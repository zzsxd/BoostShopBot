# main.py
import time
import telebot
import os
import re
import json
import threading
import platform
from threading import Lock
from datetime import datetime, timedelta
from config_parser import ConfigParser
from frontend import Bot_inline_btns
from telebot import types
from backend import DbAct
from db import DB

temp_data = {}
config_name = 'secrets.json'

def main():
    config_data = config.get_config()
    channel_username = config_data.get('channel_username', 'BoostShop_Community')
    
    def is_subscribed(user_id):
        try:
            member = bot.get_chat_member(chat_id=f"@{channel_username}", user_id=user_id)
            return member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    def show_subscription_request(user_id):
        buttons = Bot_inline_btns()
        markup = types.InlineKeyboardMarkup()
        channel_btn = types.InlineKeyboardButton("üî• –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø", url=f"https://t.me/+JrjbQb9-HtcxOWUy")
        check_btn = types.InlineKeyboardButton("‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø", callback_data="check_subscription")
        markup.add(channel_btn, check_btn)
        bot.send_message(
            user_id,
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
            reply_markup=markup
        )

    def show_product(user_id, product_id):
        product = db_actions.get_product(product_id)
        if not product:
            bot.send_message(user_id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        buttons = Bot_inline_btns()
        
        if product[9]:  # is_exclusive
            caption = (
                f"üéØ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ô –¢–û–í–ê–†\n\n"
                f"üõçÔ∏è {product[1]}\n\n"
                f"üìù {product[2]}\n"
                f"üíé –¶–µ–Ω–∞: {product[4]} BS Coin"
            )
            markup = buttons.product_detail_buttons(product_id, True, product[4])
        else:
            caption = (
                f"üõçÔ∏è {product[1]}\n\n"
                f"üìù {product[2]}\n"
                f"üí∞ –¶–µ–Ω–∞: {product[3]}‚ÇΩ"
            )
            markup = buttons.product_detail_buttons(product_id, False)
        
        bot.send_photo(
            user_id,
            product[5],  # photo_id
            caption=caption,
            reply_markup=markup
        )
    
    def handle_daily_bonus(user_id):
        user_data = db_actions.get_user_data(user_id)
        if not user_data:
            return False
        
        last_active = user_data.get('last_active')
        now = datetime.now()
        
        if isinstance(last_active, str):
            try:
                last_active = datetime.strptime(last_active, "%Y-%m-%d %H:%M:%S.%f")
            except ValueError:
                last_active = None
        
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å
        if not last_active or (now - last_active) > timedelta(hours=24):
            db_actions.update_user_stats(user_id, 'bs_coin', 10)
            db_actions.update_last_active(user_id, now)
            return True
        return False
    
    def check_comment_achievement(user_id):
        user_data = db_actions.get_user_data(user_id)
        if user_data and user_data['comments'] >= 10:
            if "active_commentator" not in user_data['achievements']:
                db_actions.add_achievement(user_id, "active_commentator")
                db_actions.update_user_stats(user_id, 'discount', 1)
                bot.send_message(
                    user_id,
                    "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä¬ª! –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 1%"
                )

    @bot.message_handler(commands=['start'])
    def start(message):
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        if not is_subscribed(user_id):
            show_subscription_request(user_id)
            return
        
        buttons = Bot_inline_btns()
        
        is_new_user = not db_actions.user_exists(user_id)
        if is_new_user:
            first_name = message.from_user.first_name or ""
            last_name = message.from_user.last_name or ""
            username = f"@{message.from_user.username}" if message.from_user.username else ""
            db_actions.add_user(user_id, first_name, last_name, username)

        command_parts = message.text.split()
        if len(command_parts) > 1:
            param = command_parts[1]
            
            if param.startswith('ref_'):
                try:
                    referrer_id = int(param.split('_')[1])
                    if is_new_user and db_actions.user_exists(referrer_id) and referrer_id != user_id:
                        db_actions.add_referral(referrer_id, user_id)
                        bot.send_message(
                            referrer_id,
                            f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 BS Coin. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {db_actions.get_referral_stats(referrer_id)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
                        )
                except (ValueError, IndexError):
                    pass
                
            elif param.startswith('product_'):
                try:
                    product_id_str = param.split('_')[1]
                    if product_id_str.lower() == 'none':
                        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞")
                        
                    product_id = int(product_id_str)
                    show_product(user_id, product_id)
                    return
                except (ValueError, IndexError):
                    bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä")
        
        # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
        if handle_daily_bonus(user_id):
            bot.send_message(user_id, "üéâ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: 10 BS Coin –∑–∞—à–ª–∏ –≤–∞–º –Ω–∞ —Å—á–µ—Ç!")
        
        user_data = db_actions.get_user_data(user_id)
        welcome_msg = (
            f"üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BrandName!\n\n"
            f"‚Ä¢ –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞–Ω–∞–ª–µ #–º–∞–≥–∞–∑–∏–Ω\n"
            f"‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ #–Ω–æ–≤–æ—Å—Ç–∏\n"
            f"‚Ä¢ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: /profile\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"üîç /catalog - –¢–æ–≤–∞—Ä—ã\n"
            f"üë• /ref - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
            f"üõ†Ô∏è /support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        )
        
        if db_actions.user_is_admin(user_id):
            bot.send_message(user_id, welcome_msg, reply_markup=buttons.admin_buttons())
        else:
            bot.send_message(user_id, welcome_msg, reply_markup=buttons.start_buttons())

    @bot.message_handler(func=lambda msg: msg.text == 'üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω')
    def show_shop(message):
        catalog(message)
    
    @bot.message_handler(func=lambda msg: msg.text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    def show_profile(message):
        profile(message)
    
    @bot.message_handler(func=lambda msg: msg.text == 'üéÅ –ê–∫—Ü–∏–∏')
    def show_promo(message):
        bot.send_message(message.chat.id, "üî• –ì–æ—Ä—è—á–∏–µ –∞–∫—Ü–∏–∏")
    
    @bot.message_handler(func=lambda msg: msg.text == 'üì¢ –û—Ç–∑—ã–≤—ã')
    def show_—Å–¥—É—Ñ–∫s(message):
        user_id = message.from_user.id
        reviews = db_actions.get_reviews()
        buttons = Bot_inline_btns()
        
        if not reviews:
            bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!", reply_markup=buttons.reviews_buttons())
            return
            
        reviews_msg = "üî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n"
        for review in reviews[:3]:
            reviews_msg += f"‚≠êÔ∏è {review[2]}\n‚Äî {review[5] or review[6]}\n\n"
        
        bot.send_message(
            user_id,
            reviews_msg,
            reply_markup=buttons.reviews_buttons()
        )

    @bot.message_handler(commands=['support'])
    def support(message):
        bot.reply_to(message, "üõ†Ô∏è –ù–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—Å!\n\n"
                              "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n"
                              "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @support_username\n"
                              "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 10:00-22:00 (–ú–°–ö)\n\n"
                              "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!")

    @bot.message_handler(commands=['ref'])
    def ref_command(message):
        user_id = message.from_user.id
        user_data = db_actions.get_user_data(user_id)
        if not user_data:
            bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        ref_count = db_actions.get_referral_stats(user_id)
        ref_link = f"https://t.me/{bot.get_me().username}?start={user_data['referral_code']}"
        
        ref_msg = (
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
            f"‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 100 BS Coin\n"
            f"‚Ä¢ –í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç 50 BS Coin –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–∫–∞–∑–µ\n\n"
            f"üöÄ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {ref_count}"
        )
        
        bot.send_message(user_id, ref_msg, parse_mode="HTML")

    @bot.message_handler(commands=['set_discount'])
    def set_discount(message):
        user_id = message.from_user.id
        if not db_actions.user_is_admin(user_id):
            bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return

        args = message.text.split()
        if len(args) != 3:
            bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_discount [user_id] [%]")
            return

        try:
            target_user_id = int(args[1])
            discount = int(args[2])
            
            if discount < 0 or discount > 50:
                bot.send_message(user_id, "–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 50%")
                return
                
            db_actions.set_discount(target_user_id, discount)
            bot.send_message(user_id, f"‚úÖ –°–∫–∏–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {discount}%")
            bot.send_message(target_user_id, f"üéâ –í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞: {discount}%")
        except ValueError:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. user_id –∏ % –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")

    @bot.message_handler(commands=['add_coins'])
    def add_coins(message):
        user_id = message.from_user.id
        if not db_actions.user_is_admin(user_id):
            bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return

        args = message.text.split()
        if len(args) != 3:
            bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_coins [user_id] [amount]")
            return

        try:
            target_user_id = int(args[1])
            amount = int(args[2])
            db_actions.update_user_stats(target_user_id, 'bs_coin', amount)
            bot.send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} BS Coin")
            bot.send_message(target_user_id, f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} BS Coin!")
        except ValueError:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. user_id –∏ amount –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")

    @bot.message_handler(commands=['user_info'])
    def user_info(message):
        user_id = message.from_user.id
        if not db_actions.user_is_admin(user_id):
            bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return

        args = message.text.split()
        if len(args) != 2:
            bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_info [user_id]")
            return

        try:
            target_user_id = int(args[1])
            user_data = db_actions.get_user_data(target_user_id)
            if not user_data:
                bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            info = (
                f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
                f"üÜî ID: {user_data['user_id']}\n"
                f"üë§ –ò–º—è: {user_data['first_name']} {user_data['last_name']}\n"
                f"üîó Username: {user_data['username']}\n"
                f"‚≠êÔ∏è –°—Ç–∞—Ç—É—Å: {user_data['status']}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_data['comments']}\n"
                f"üì¶ –ó–∞–∫–∞–∑—ã: {user_data['orders']}\n"
                f"ü™ô BS Coin: {user_data['bs_coin']}\n"
                f"üéÅ –°–∫–∏–¥–∫–∞: {user_data['discount']}%\n"
                f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {db_actions.get_referral_stats(target_user_id)}"
            )
            bot.send_message(user_id, info)
        except ValueError:
            bot.send_message(user_id, "user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    @bot.callback_query_handler(func=lambda call: call.data == 'check_subscription')
    def check_subscription(call):
        user_id = call.from_user.id
        if is_subscribed(user_id):
            bot.delete_message(user_id, call.message.message_id)
            start(call.message)
        else:
            bot.answer_callback_query(call.id, "–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª")

    @bot.callback_query_handler(func=lambda call: call.data == 'exchange_coin')
    def exchange_coin(call):
        user_id = call.from_user.id
        user_data = db_actions.get_user_data(user_id)
        
        if not user_data:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if user_data['bs_coin'] < 500:
            bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BS Coin! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 500")
            return
            
        db_actions.update_user_stats(user_id, 'bs_coin', -500)
        db_actions.update_user_stats(user_id, 'discount', 5)
        
        bot.answer_callback_query(call.id, "‚úÖ –£—Å–ø–µ—à–Ω–æ! 500 BS Coin –æ–±–º–µ–Ω—è–Ω—ã –Ω–∞ 5% —Å–∫–∏–¥–∫–∏")
        
        user_data = db_actions.get_user_data(user_id)
        buttons = Bot_inline_btns()
        
        achievements_str = ""
        if user_data['achievements']:
            icons = {"first_order": "üöÄ", "active_commentator": "üí¨", "referral_king": "üëë"}
            achievements_str = "\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: " + " ".join(
                [icons.get(a, "üåü") for a in user_data['achievements']]
            )
        
        profile_msg = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üÜî ID: <code>{user_data['user_id']}</code>\n"
            f"üåü –°—Ç–∞—Ç—É—Å: {user_data['status']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_data['comments']}\n"
            f"üì¶ –ó–∞–∫–∞–∑—ã: {user_data['orders']}\n"
            f"ü™ô BS Coin: {user_data['bs_coin']}\n"
            f"üéÅ –°–∫–∏–¥–∫–∞: {user_data['discount']}%\n"
            f"{achievements_str}"
        )
        
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=profile_msg,
            parse_mode="HTML",
            reply_markup=buttons.profile_buttons(user_data)
        )
        
        bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ–±–º–µ–Ω—è–ª–∏ 500 BS Coin –Ω–∞ 5% —Å–∫–∏–¥–∫–∏")

    @bot.message_handler(commands=['profile'])
    def profile(message):
        user_id = message.from_user.id
        if not is_subscribed(user_id):
            show_subscription_request(user_id)
            return
            
        user_data = db_actions.get_user_data(user_id)
        if not user_data:
            bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
        
        buttons = Bot_inline_btns()
        achievements_str = ""
        if user_data['achievements']:
            icons = {"first_order": "üöÄ", "active_commentator": "üí¨", "referral_king": "üëë"}
            achievements_str = "\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: " + " ".join(
                [icons.get(a, "üåü") for a in user_data['achievements']]
            )
        
        coin_info = ""
        if user_data['bs_coin'] < 100:
            coin_info = "\n\nüí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å BS Coin:\n‚Ä¢ /start - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n‚Ä¢ /ref - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ"
        
        profile_msg = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üÜî ID: <code>{user_data['user_id']}</code>\n"
            f"üåü –°—Ç–∞—Ç—É—Å: {user_data['status']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_data['comments']}\n"
            f"üì¶ –ó–∞–∫–∞–∑—ã: {user_data['orders']}\n"
            f"ü™ô BS Coin: {user_data['bs_coin']}{coin_info}\n"
            f"üéÅ –°–∫–∏–¥–∫–∞: {user_data['discount']}%\n"
            f"{achievements_str}"
        )
        
        bot.send_message(
            user_id,
            profile_msg,
            parse_mode="HTML",
            reply_markup=buttons.profile_buttons(user_data)
        )

    @bot.message_handler(commands=['admin'])
    def admin_panel(message):
        user_id = message.from_user.id
        if not is_subscribed(user_id):
            show_subscription_request(user_id)
            return
            
        if not db_actions.user_is_admin(user_id):
            bot.send_message(user_id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        buttons = Bot_inline_btns()
        bot.send_message(
            user_id,
            "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=buttons.admin_buttons()
        )


    @bot.message_handler(commands=['catalog'])
    def catalog(message_or_call):
        if isinstance(message_or_call, types.CallbackQuery):
            user_id = message_or_call.message.chat.id
            message = message_or_call.message
        else:
            user_id = message_or_call.chat.id
            message = message_or_call
                
        if not is_subscribed(user_id):
            show_subscription_request(user_id)
            return
                
        products = db_actions.get_products(limit=5)
        buttons = Bot_inline_btns()
        
        if not products:
            bot.send_message(user_id, "–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç")
            return
            
        products_msg = "üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
        for product in products:
            # product[9] - is_exclusive, product[4] - coin_price, product[3] - price
            if product[9]:
                products_msg += f"{product[1]} - {product[4]} BS Coin\n"
            else:
                products_msg += f"{product[1]} - {product[3]}‚ÇΩ\n"
        
        if isinstance(message_or_call, types.CallbackQuery):
            try:
                bot.edit_message_text(
                    chat_id=user_id,
                    message_id=message.message_id,
                    text=products_msg,
                    reply_markup=buttons.product_buttons(products)
                )
            except:
                bot.send_message(
                    user_id,
                    products_msg,
                    reply_markup=buttons.product_buttons(products)
                )
        else:
            bot.send_message(
                user_id,
                products_msg,
                reply_markup=buttons.product_buttons(products)
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('product_'))
    def product_detail(call):
        user_id = call.message.chat.id
        if not is_subscribed(user_id):
            show_subscription_request(user_id)
            return
            
        product_id = int(call.data.split('_')[1])
        product = db_actions.get_product(product_id)
        buttons = Bot_inline_btns()
        
        if not product:
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if product[9]:  # is_exclusive
            product_msg = (
                f"üéØ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ô –¢–û–í–ê–†\n\n"
                f"üõçÔ∏è {product[1]}\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product[2]}\n"
                f"üíé –¶–µ–Ω–∞: {product[4]} BS Coin\n"
                f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {'–î–∞' if product[8] else '–ù–µ—Ç'}"
            )
            markup = buttons.product_detail_buttons(product_id, True, product[4])
        else:
            product_msg = (
                f"üõçÔ∏è {product[1]}\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product[2]}\n"
                f"üí∞ –¶–µ–Ω–∞: {product[3]}‚ÇΩ\n"
                f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {'–î–∞' if product[8] else '–ù–µ—Ç'}"
            )
            markup = buttons.product_detail_buttons(product_id, False)
        
        try:
            bot.edit_message_caption(
                chat_id=user_id,
                message_id=call.message.message_id,
                caption=product_msg,
                reply_markup=markup
            )
        except:
            if product[5]:  # if photo_id exists
                bot.send_photo(
                    user_id,
                    product[5],
                    caption=product_msg,
                    reply_markup=markup
                )
            else:
                bot.send_message(
                    user_id,
                    product_msg,
                    reply_markup=markup
                )
        bot.answer_callback_query(call.id)  

    @bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
    def buy_product(call):
        if call.data.startswith('buy_coin_'):
            return
            
        user_id = call.message.chat.id
        if not is_subscribed(user_id):
            show_subscription_request(user_id)
            return
            
        try:
            product_id = int(call.data.split('_')[1])
        except (IndexError, ValueError):
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return
            
        user_data = db_actions.get_user_data(user_id)
        
        if not user_data:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
            
        db_actions.create_order(user_id, product_id, 1)
        db_actions.update_user_stats(user_id, 'orders', 1)
        
        if user_data['orders'] == 0:
            db_actions.add_achievement(user_id, "first_order")
            db_actions.update_user_stats(user_id, 'bs_coin', 50)
            bot.send_message(
                user_id,
                "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑¬ª +50 BS Coin!"
            )
        
        bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
        bot.send_message(
            user_id,
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ."
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('buy_coin_'))
    def buy_product_with_coins(call):
        print(123123)
        user_id = call.message.chat.id
        if not is_subscribed(user_id):
            show_subscription_request(user_id)
            return
            
        try:
            product_id = int(call.data.split('_')[2])
        except (IndexError, ValueError):
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return
            
        product = db_actions.get_product(product_id)
        user_data = db_actions.get_user_data(user_id)
        
        if not user_data:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
        
        if not product or not product[9]:  # is_exclusive
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º")
            return
        
        coin_price = product[4]  # coin_price
        
        if user_data['bs_coin'] < coin_price:
            bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BS Coin!")
            
            buttons = Bot_inline_btns()
            markup = types.InlineKeyboardMarkup()
            
            btn1 = types.InlineKeyboardButton(
                text="üíé –ü–æ–ª—É—á–∏—Ç—å BS Coin",
                callback_data="how_to_get_coins"
            )
            btn2 = types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É",
                callback_data=f"product_{product_id}"
            )
            markup.add(btn1, btn2)
            
            bot.send_message(
                user_id,
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BS Coin –¥–ª—è –ø–æ–∫—É–ø–∫–∏!\n\n"
                f"üíé –ù—É–∂–Ω–æ: {coin_price} BS Coin\n"
                f"üí∞ –£ –≤–∞—Å: {user_data['bs_coin']} BS Coin\n"
                f"üìä –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {coin_price - user_data['bs_coin']} BS Coin\n\n"
                f"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å BS Coin —á–µ—Ä–µ–∑:\n"
                f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (/start)\n"
                f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É (/ref)\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ",
                reply_markup=markup
            )
            return
        
        db_actions.create_order(user_id, product_id, 1)
        db_actions.update_user_stats(user_id, 'bs_coin', -coin_price)
        db_actions.update_user_stats(user_id, 'orders', 1)
        
        if user_data['orders'] == 0:
            db_actions.add_achievement(user_id, "first_order")
            db_actions.update_user_stats(user_id, 'bs_coin', 50)
            bot.send_message(
                user_id,
                "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑¬ª +50 BS Coin!"
            )
        
        bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
        bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∏—Å–∞–Ω–æ {coin_price} BS Coin. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ."
        )
        
    @bot.callback_query_handler(func=lambda call: call.data == 'how_to_get_coins')
    def how_to_get_coins(call):
        user_id = call.from_user.id
        user_data = db_actions.get_user_data(user_id)
        
        if not user_data:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
        
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(
            text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
            callback_data="ref_link"
        )
        btn2 = types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥",
            callback_data="back_to_catalog"
        )
        markup.add(btn1, btn2)
        
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=f"üíé –°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è BS Coin:\n\n"
                f"1. üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +10 BS Coin –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (/start)\n"
                f"2. üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: +100 BS Coin –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ (/ref)\n"
                f"3. üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ: –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã\n"
                f"4. üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n\n"
                f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data['bs_coin']} BS Coin",
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data == 'ref_link')
    def ref_link(call):
        user_id = call.message.chat.id
        if not is_subscribed(user_id):
            show_subscription_request(user_id)
            return
            
        user_data = db_actions.get_user_data(user_id)
        
        if not user_data:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
            
        ref_count = db_actions.get_referral_stats(user_id)
        ref_link = f"https://t.me/{bot.get_me().username}?start={user_data['referral_code']}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(
            text="üíé –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä–∞–º",
            callback_data="back_to_catalog"
        )
        markup.add(btn1)
        
        ref_msg = (
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
            f"‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 100 BS Coin\n"
            f"‚Ä¢ –í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç 50 BS Coin –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–∫–∞–∑–µ\n\n"
            f"üöÄ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {ref_count}\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {ref_count * 100} BS Coin"
        )
        
        try:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=ref_msg,
                parse_mode="HTML",
                reply_markup=markup
            )
        except:
            bot.send_message(
                user_id,
                ref_msg,
                parse_mode="HTML",
                reply_markup=markup
            )
        bot.answer_callback_query(call.id)

    @bot.message_handler(commands=['exclusive'])
    def exclusive_products(message):
        user_id = message.from_user.id
        if not is_subscribed(user_id):
            show_subscription_request(user_id)
            return
            
        products = db_actions.get_exclusive_products(limit=10)
        buttons = Bot_inline_btns()
        
        if not products:
            bot.send_message(user_id, "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
            
        products_msg = "üéØ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ç–æ–ª—å–∫–æ –∑–∞ BS Coin):\n\n"
        for product in products:
            products_msg += f"{product[1]} - {product[4]} BS Coin\n"
        
        bot.send_message(
            user_id,
            products_msg,
            reply_markup=buttons.exclusive_products_buttons(products)
        )

    @bot.message_handler(commands=['add_product'])
    def add_product(message):
        user_id = message.from_user.id
        if not is_subscribed(user_id):
            show_subscription_request(user_id)
            return
            
        if not db_actions.user_is_admin(user_id):
            bot.send_message(user_id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
            
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(message, process_product_photo)

    def process_product_photo(message):
        if not message.photo:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")
            return
            
        photo_id = message.photo[-1].file_id
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(
            message, 
            lambda m: process_product_name(m, photo_id)
        )

    def process_product_name(message, photo_id):
        name = message.text
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(
            message, 
            lambda m: process_product_description(m, photo_id, name)
        )

    def process_product_description(message, photo_id, name):
        description = message.text
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)")
        bot.register_next_step_handler(
            message, 
            lambda m: process_product_price(m, photo_id, name, description)
        )

    def process_product_price(message, photo_id, name, desc):
        try:
            price = float(message.text)
            
            markup = types.InlineKeyboardMarkup()
            btn_yes = types.InlineKeyboardButton("–î–∞", callback_data="exclusive_yes")
            btn_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="exclusive_no")
            markup.add(btn_yes, btn_no)
            
            msg = bot.send_message(
                message.chat.id,
                "üéØ –≠—Ç–æ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä (—Ç–æ–ª—å–∫–æ –∑–∞ BS Coin)?",
                reply_markup=markup
            )
        
            user_id = message.from_user.id
            temp_data[user_id] = {
                'name': name,
                'description': desc,
                'price': price,
                'photo_id': photo_id,
                'step': 'ask_exclusive'
            }
                
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞")

    @bot.callback_query_handler(func=lambda call: call.data in ['exclusive_yes', 'exclusive_no'])
    def process_exclusive(call):
        user_id = call.from_user.id
        is_exclusive = (call.data == 'exclusive_yes')
        
        if user_id not in temp_data or temp_data[user_id]['step'] != 'ask_exclusive':
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        temp_data[user_id]['is_exclusive'] = is_exclusive
        temp_data[user_id]['step'] = 'ask_coin_price' if is_exclusive else 'ready_to_save'
        
        if is_exclusive:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text="üíé –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ BS Coin:"
            )
            bot.register_next_step_handler(call.message, process_coin_price)
        else:
            product_data = temp_data[user_id]
            product_id = db_actions.add_product(
                name=product_data['name'],
                description=product_data['description'],
                price=product_data['price'],
                photo_id=product_data['photo_id'],
                is_exclusive=False,
                coin_price=0
            )
            
            product_data['product_id'] = product_id
            post_link = publish_product_to_channel(product_data)
            
            if post_link:
                bot.send_message(
                    user_id,
                    f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n–°—Å—ã–ª–∫–∞: {post_link}",
                    disable_web_page_preview=True
                )
            else:
                bot.send_message(user_id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            
            if user_id in temp_data:
                del temp_data[user_id]

    def process_coin_price(message):
        user_id = message.from_user.id
        
        if user_id not in temp_data or temp_data[user_id]['step'] != 'ask_coin_price':
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        try:
            coin_price = int(message.text)
            if coin_price <= 0:
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            
            product_data = temp_data[user_id]
            product_id = db_actions.add_product(
                name=product_data['name'],
                description=product_data['description'],
                price=product_data['price'],
                photo_id=product_data['photo_id'],
                is_exclusive=True,
                coin_price=coin_price
            )
            
            if not product_id:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            product_data['product_id'] = product_id
            product_data['coin_price'] = coin_price
            product_data['is_exclusive'] = True
            post_link = publish_product_to_channel(product_data)
            
            if post_link:
                bot.send_message(
                    user_id,
                    f"‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n–°—Å—ã–ª–∫–∞: {post_link}",
                    disable_web_page_preview=True
                )
            else:
                bot.send_message(user_id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            
            if user_id in temp_data:
                del temp_data[user_id]
                
        except ValueError:
            bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.")
            msg = bot.send_message(user_id, "üíé –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ BS Coin:")
            bot.register_next_step_handler(msg, process_coin_price)
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
            if user_id in temp_data:
                del temp_data[user_id]

    def publish_product_to_channel(product):
        try:
            if not product.get('product_id'):
                print("–û—à–∏–±–∫–∞: product_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                return None
                
            config_data = config.get_config()
            chat_id = config_data['chat_id']
            topic_id = config_data['topics']['–º–∞–≥–∞–∑–∏–Ω']
            
            deep_link = f"https://t.me/{bot.get_me().username}?start=product_{product['product_id']}"
            
            markup = types.InlineKeyboardMarkup()
            buy_btn = types.InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", url=deep_link)
            markup.add(buy_btn)
            
            if product.get('is_exclusive'):
                caption = (
                    f"üéØ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ô –¢–û–í–ê–†\n\n"
                    f"üõçÔ∏è {product['name']}\n\n"
                    f"üìù {product['description']}\n"
                    f"üíé –¶–µ–Ω–∞: {product['coin_price']} BS Coin\n\n"
                    f"üëâ –ù–∞–∂–º–∏—Ç–µ ¬´üõí –ö—É–ø–∏—Ç—å¬ª –¥–ª—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"
                )
            else:
                caption = (
                    f"üõçÔ∏è {product['name']}\n\n"
                    f"üìù {product['description']}\n"
                    f"üí∞ –¶–µ–Ω–∞: {product['price']}‚ÇΩ\n\n"
                    f"üëâ –ù–∞–∂–º–∏—Ç–µ ¬´üõí –ö—É–ø–∏—Ç—å¬ª –¥–ª—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"
                )
            
            message = bot.send_photo(
                chat_id=chat_id,
                photo=product['photo_id'],
                caption=caption,
                reply_markup=markup,
                message_thread_id=topic_id
            )
            
            channel_id = str(abs(chat_id))
            return f"https://t.me/c/{channel_id}/{message.message_id}?thread={topic_id}"
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return None

    @bot.channel_post_handler(content_types=['text'])
    def handle_channel_post(message):
        if message.reply_to_message:
            user_id = message.from_user.id
            
            db_actions.update_user_stats(user_id, 'comments', 1)
            
            check_comment_achievement(user_id)

    @bot.message_handler(content_types=['text'], func=lambda message: message.is_topic_message)
    def handle_topic_messages(message):
        user_id = message.from_user.id
        
        db_actions.update_user_stats(user_id, 'comments', 1)
        
        check_comment_achievement(user_id)


    @bot.callback_query_handler(func=lambda call: call.data == 'back_to_catalog')
    def back_to_catalog(call):
        user_id = call.message.chat.id
        if not is_subscribed(user_id):
            show_subscription_request(user_id)
            return
            
        try:
            bot.delete_message(user_id, call.message.message_id)
        except:
            pass
            
        catalog(call.message)

if __name__ == '__main__':
    os_type = platform.system()
    work_dir = os.path.dirname(os.path.realpath(__file__))
    config = ConfigParser(f'{work_dir}/{config_name}', os_type)
    db = DB(config.get_config()['db_file_name'], Lock())
    db_actions = DbAct(db, config, config.get_config()['xlsx_path'])
    bot = telebot.TeleBot(config.get_config()['tg_api'])
    main()
    bot.polling(none_stop=True)