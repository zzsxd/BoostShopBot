import time
import telebot
import os
import traceback
import re
import json
import threading
import platform
import logging
import pandas as pd
from threading import Lock
from datetime import datetime, timedelta
from config_parser import ConfigParser
from frontend import Bot_inline_btns
from telebot import types
from backend import DbAct
from db import DB

config_name = 'secrets.json'
os_type = platform.system()
work_dir = os.path.dirname(os.path.realpath(__file__))
config = ConfigParser(f'{work_dir}/{config_name}', os_type)
db = DB(config.get_config()['db_file_name'], Lock())
db_actions = DbAct(db, config, config.get_config()['xlsx_path'])
bot = telebot.TeleBot(config.get_config()['tg_api'])

temp_data = {}
pending_reviews = {}

config_data = config.get_config()
channels = [
    '@BridgeSide_Featback',
    '@BridgeSide_LifeStyle', 
    '@BridgeSide_Store'
]

# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

def is_subscribed(user_id):
    try:
        for channel in channels:
            member = bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                return False
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def show_subscription_request(user_id):
    buttons = Bot_inline_btns()
    markup = types.InlineKeyboardMarkup()
    
    for i, channel in enumerate(channels):
        channel_btn = types.InlineKeyboardButton(f"üì¢ –ö–∞–Ω–∞–ª {i+1}", url=f"https://t.me/{channel[1:]}")
        markup.add(channel_btn)
    
    check_btn = types.InlineKeyboardButton("‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø", callback_data="check_subscription")
    markup.add(check_btn)
    
    bot.send_message(
        user_id,
        "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
        reply_markup=markup
    )

def show_product(user_id, product_id):
    product = db_actions.get_product(product_id)
    if not product:
        bot.send_message(user_id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    variations = db_actions.get_product_variations(product_id)
    available_sizes = [v for v in variations if v['quantity'] > 0]
    
    buttons = Bot_inline_btns()
    
    is_exclusive = product[10] == 1
    
    if is_exclusive:
        caption = (
            f"üéØ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ô –¢–û–í–ê–†\n\n"
            f"üõçÔ∏è {product[1]}\n\n"
            f"üìù {product[2]}\n"
            f"üíé –¶–µ–Ω–∞: {product[4]} BS Coin\n\n"
            f"üìè –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:"
        )
    else:
        caption = (
            f"üõçÔ∏è {product[1]}\n\n"
            f"üìù {product[2]}\n"
            f"üí∞ –¶–µ–Ω–∞: {product[3]}‚ÇΩ\n\n"
            f"üìè –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:"
        )
    
    for variation in available_sizes:
        caption += f"\n‚Ä¢ {variation['size']} - {variation['quantity']} —à—Ç."
    
    if available_sizes:
        markup = buttons.size_selection_buttons(available_sizes, is_exclusive)
    else:
        markup = None
        
    if product[6] and product[6] != 'None' and product[6] != 'invalid':
        try:
            bot.send_photo(
                user_id,
                product[6],
                caption=caption,
                reply_markup=markup
            )
            return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
    
    bot.send_message(
        user_id,
        caption,
        reply_markup=markup
    )

def check_and_fix_photos():
    try:
        products = db_actions.get_all_products()
        for product in products:
            product_id, name, _, _, _, photo_id, _, _, _, _, _ = product
            if photo_id:
                try:
                    file_info = bot.get_file(photo_id)
                    print(f"‚úÖ Photo {photo_id} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {name} –¥–æ—Å—Ç—É–ø–µ–Ω")
                except Exception as e:
                    print(f"‚ùå Photo {photo_id} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    db_actions.update_product_photo(product_id, None)
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ç–æ: {e}")

def handle_daily_bonus(user_id):
    user_data = db_actions.get_user_data(user_id)
    if not user_data:
        return False
    
    last_active = user_data.get('last_active')
    now = datetime.now()
    
    if isinstance(last_active, str):
        try:
            last_active = datetime.strptime(last_active, "%Y-%m-%d %H:%M:%S.%f")
        except ValueError:
            last_active = None
    
    if not last_active or (now - last_active) > timedelta(hours=24):
        db_actions.update_user_stats(user_id, 'bs_coin', 10)
        db_actions.update_last_active(user_id, now)
        return True
    return False

def check_comment_achievement(user_id):
    user_data = db_actions.get_user_data(user_id)
    if user_data and user_data['comments'] >= 10:
        if "active_commentator" not in user_data['achievements']:
            db_actions.add_achievement(user_id, "active_commentator")
            db_actions.update_user_stats(user_id, 'discount', 1)
            bot.send_message(
                user_id,
                "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä¬ª! –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 1%"
            )

def ask_exclusive_status(user_id):
    markup = types.InlineKeyboardMarkup()
    btn_yes = types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="exclusive_yes_post")
    btn_no = types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="exclusive_no_post")
    markup.add(btn_yes, btn_no)
    
    bot.send_message(
        user_id,
        "üéØ –≠—Ç–æ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä (—Ç–æ–ª—å–∫–æ –∑–∞ BS Coin)?",
        reply_markup=markup
    )


def process_products_file(message):
    user_id = message.from_user.id
    if not message.document:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª")
        return
        
    try:
        bot.send_message(user_id, "üîÑ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã...")
        db_actions.clear_all_products()
        
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        filename = f"products_{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}.xlsx"
        with open(filename, 'wb') as f:
            f.write(downloaded_file)
        
        import pandas as pd
        
        df = pd.read_excel(filename)
        
        required_columns = ['–ú–æ–¥–µ–ª—å', 'ID –ú–æ–¥–µ–ª–∏', '–†–∞–∑–º–µ—Ä', '–¶–µ–Ω–∞ Y', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞', '–°—Å—ã–ª–∫–∞']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            bot.send_message(user_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
            os.remove(filename)
            return
        
        def calculate_price(row):
            try:
                price_yuan = row['–¶–µ–Ω–∞ Y']
                if pd.isna(price_yuan) or price_yuan == 0:
                    return 0
            
                if isinstance(row['–¶–µ–Ω–∞'], (int, float)) and not pd.isna(row['–¶–µ–Ω–∞']):
                    return float(row['–¶–µ–Ω–∞'])
                
                if isinstance(row['–¶–µ–Ω–∞'], str) and row['–¶–µ–Ω–∞'].startswith('='):
                    return float(price_yuan) * 12
                
                return float(row['–¶–µ–Ω–∞'])
            except:
                return float(price_yuan) * 12 
        
        df['–¶–µ–Ω–∞'] = df.apply(calculate_price, axis=1)
        
        df['ID –ú–æ–¥–µ–ª–∏'] = df['ID –ú–æ–¥–µ–ª–∏'].astype(str).apply(lambda x: x.split('.')[0] if '.' in x else x).str.strip()
        
        def safe_convert(value, default=0):
            if value is None or value == '' or pd.isna(value):
                return default
            try:
                if isinstance(value, str):
                    value = value.strip().replace(',', '.')
                    if not value:
                        return default
                return float(value)
            except (ValueError, TypeError):
                return default
        
        df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].apply(lambda x: int(safe_convert(x, 0)))
        df['–¶–µ–Ω–∞ Y'] = df['–¶–µ–Ω–∞ Y'].apply(lambda x: safe_convert(x, 0))
        
        df['–ú–æ–¥–µ–ª—å'] = df['–ú–æ–¥–µ–ª—å'].fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').astype(str)
        df['–†–∞–∑–º–µ—Ä'] = df['–†–∞–∑–º–µ—Ä'].fillna('').astype(str)
        df['–°—Å—ã–ª–∫–∞'] = df['–°—Å—ã–ª–∫–∞'].fillna('').astype(str)
        
        if df['–¶–µ–Ω–∞'].isnull().all() or (df['–¶–µ–Ω–∞'] == 0).all():
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ü–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
            os.remove(filename)
            return
    
        
        success_count = db_actions.import_products_from_excel(df)
        
        total_products = len(df['–ú–æ–¥–µ–ª—å'].unique())
        total_variations = len(df)
        zero_quantity = len(df[df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] == 0])
        
        stats_msg = (
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {total_products}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–π: {total_variations}\n"
            f"‚Ä¢ –° –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º: {zero_quantity}\n"
            f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {df['–¶–µ–Ω–∞'].min():.0f} - {df['–¶–µ–Ω–∞'].max():.0f}‚ÇΩ"
        )
        
        bot.send_message(user_id, stats_msg)
        
        sample_msg = "üìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 5 —Ç–æ–≤–∞—Ä–æ–≤:\n"
        for i, (_, row) in enumerate(df.head().iterrows()):
            sample_msg += f"{i+1}. {row['–ú–æ–¥–µ–ª—å']} - {row['–†–∞–∑–º–µ—Ä']} - {row['–¶–µ–Ω–∞']}‚ÇΩ\n"
        
        bot.send_message(user_id, sample_msg)
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
        print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        print(traceback.format_exc())
        bot.send_message(user_id, error_msg)
    finally:
        if os.path.exists(filename):
            os.remove(filename)

def send_review_for_moderation(user_id, review_data):
    try:
        user_data = db_actions.get_user_data(user_id)
        admin_group_id = -1002585832553
        
        caption = (
            f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['first_name']} {user_data['last_name']}\n"
            f"üîó @{user_data['username']}\n\n"
            f"üìÑ –¢–µ–∫—Å—Ç: {review_data['text'][:500]}...\n\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        markup = types.InlineKeyboardMarkup()
        approve_btn = types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_review_{user_id}")
        reject_btn = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_review_{user_id}")
        markup.add(approve_btn, reject_btn)
        
        review_id = f"{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}"
        pending_reviews[review_id] = review_data
        
        if review_data.get('photos'):
            message = bot.send_photo(
                chat_id=admin_group_id,
                photo=review_data['photos'][0],
                caption=caption,
                reply_markup=markup
            )
            
            pending_reviews[review_id]['message_id'] = message.message_id
            
            for photo in review_data['photos'][1:]:
                bot.send_photo(
                    chat_id=admin_group_id,
                    photo=photo
                )
        else:
            message = bot.send_message(
                chat_id=admin_group_id,
                text=caption,
                reply_markup=markup
            )
            pending_reviews[review_id]['message_id'] = message.message_id
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")

def publish_review_to_channel(user_id, review_data):
    try:
        user_data = db_actions.get_user_data(user_id)
        channel_id = "@BridgeSide_Featback"
        
        caption = (
            f"‚≠êÔ∏è –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤\n\n"
            f"üë§ –û—Ç: {user_data['first_name']} {user_data['last_name']}\n\n"
            f"üìù {review_data['text']}\n\n"
            f"üí¨ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é!"
        )
        
        if review_data.get('photos'):
            bot.send_photo(
                chat_id=channel_id,
                photo=review_data['photos'][0],
                caption=caption
            )
        else:
            bot.send_message(
                chat_id=channel_id,
                text=caption
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")

def send_order_to_admin(user_id, delivery_info):
    user_data = db_actions.get_user_data(user_id)
    product_data = temp_data[user_id]
    product = db_actions.get_product(product_data['selected_product'])
    
    order_text = (
        f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['first_name']} {user_data['last_name']}\n"
        f"üîó {user_data['username']}\n\n"
        f"üõçÔ∏è –¢–æ–≤–∞—Ä: {product[1]}\n"
        f"üìè –†–∞–∑–º–µ—Ä: {product_data['selected_size']}\n"
        f"üí∞ –¶–µ–Ω–∞: {product[3]}‚ÇΩ\n\n"
        f"üì¶ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n{delivery_info}\n\n"
        f"üïí –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    for admin_id in config.get_config()['admins']:
        try:
            bot.send_message(admin_id, order_text)
        except:
            pass

def notify_admins_about_order(user_id, product, order_data, order_id, payment_photo_id=None):
    try:
        user_data = db_actions.get_user_data(user_id)
        config_data = config.get_config()
        
        topic_id = create_user_order_topic(user_data)
        
        order_text = (
            f"üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_id}\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_data['first_name']} {user_data['last_name']}\n"
            f"üîó @{user_data['username']}\n"
            f"üÜî ID: {user_id}\n\n"
            f"üõçÔ∏è –¢–æ–≤–∞—Ä: {product[1]}\n"
            f"üí∞ –¶–µ–Ω–∞: {product[3]}‚ÇΩ\n"
            f"üéØ –¢–∏–ø: {'–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π (BS Coin)' if product[10] else '–û–±—ã—á–Ω—ã–π'}\n\n"
            f"üì¶ –î–ê–ù–ù–´–ï –î–û–°–¢–ê–í–ö–ò:\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {order_data['city']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order_data['address']}\n"
            f"üë§ –§–ò–û: {order_data['full_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone']}\n"
            f"üöö –°–ø–æ—Å–æ–±: {order_data['delivery_type']}\n\n"
            f"üí≥ –û–ü–õ–ê–¢–ê: {'–ü—Ä–∏–ª–æ–∂–µ–Ω–∞ ‚úÖ' if payment_photo_id else '–ù–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∞ ‚ùå'}\n\n"
            f"üïí –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: ‚è≥ –û–ñ–ò–î–ê–ï–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø"
        )
        
        markup = types.InlineKeyboardMarkup()
        btn_approve = types.InlineKeyboardButton(
            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", 
            callback_data=f"approve_order_{order_id}"
        )
        btn_reject = types.InlineKeyboardButton(
            "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", 
            callback_data=f"reject_order_{order_id}"
        )
        markup.add(btn_approve, btn_reject)
        
        try:
            if payment_photo_id:
                message = bot.send_photo(
                    chat_id=config_data['admin_group_id'],
                    photo=payment_photo_id,
                    caption=order_text,
                    message_thread_id=topic_id,
                    reply_markup=markup 
                )
            else:
                message = bot.send_message(
                    chat_id=config_data['admin_group_id'],
                    text=order_text,
                    message_thread_id=topic_id,
                    reply_markup=markup
                )
            
            db_actions.save_order_message_id(order_id, message.message_id, topic_id)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–æ–ø–∏–∫: {e}")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ notify_admins_about_order: {e}")

def create_user_order_topic(user_data):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–ø–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID"""
    try:
        config_data = config.get_config()
        group_id = config_data['admin_group_id']
        
        topic_name = f"{user_data['first_name']} {user_data['last_name']} - –ó–ê–ö–ê–ó"
        
        result = bot.create_forum_topic(
            chat_id=group_id,
            name=topic_name
        )
        
        return result.message_thread_id
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞: {e}")
        return config_data['topics'].get('–º–∞–≥–∞–∑–∏–Ω', 1)
    
def close_order_topic(user_data, order_id, status="‚úÖ –í–´–ü–û–õ–ù–ï–ù"):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ–ø–∏–∫ –∑–∞–∫–∞–∑–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        config_data = config.get_config()
        group_id = config_data['admin_group_id']
        
        topics = bot.get_forum_topics(group_id)
        topic_name = f"{user_data['first_name']} {user_data['last_name']} - –ó–ê–ö–ê–ó"
        
        for topic in topics.topics:
            if topic.name == topic_name:
                close_text = (
                    f"üì¶ –ó–ê–ö–ê–ó #{order_id} {status}\n"
                    f"üë§ {user_data['first_name']} {user_data['last_name']}\n"
                    f"üïí –ó–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )
                
                bot.send_message(
                    chat_id=group_id,
                    text=close_text,
                    message_thread_id=topic.message_thread_id
                )
                
                try:
                    bot.close_forum_topic(
                        chat_id=group_id,
                        message_thread_id=topic.message_thread_id
                    )
                except:
                    pass
                
                break
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–æ–ø–∏–∫–∞: {e}")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'confirm_order' and
    message.text.lower() == '‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
def confirm_order(message):
    user_id = message.from_user.id
    
    try:
        order_data = temp_data[user_id]['order']
        product_id = order_data['product_id']
        size = order_data.get('size')
        product = db_actions.get_product(product_id)
        payment_photo_id = order_data.get('payment_photo')
        
        if not product:
            bot.send_message(user_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if size:
            variations = db_actions.get_product_variations(product_id)
            available = False
            for variation in variations:
                if variation['size'] == size and variation['quantity'] > 0:
                    available = True
                    break
            
            if not available:
                bot.send_message(user_id, "‚ùå –≠—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
                
            success = db_actions.decrease_product_quantity(product_id, size)
            if not success:
                bot.send_message(user_id, "‚ùå –≠—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
        
        order_id = db_actions.create_detailed_order(
            user_id=user_id,
            product_id=product_id,
            size=size,
            city=order_data['city'],
            address=order_data['address'],
            full_name=order_data['full_name'],
            phone=order_data['phone'],
            delivery_type=order_data['delivery_type']
        )
        
        if order_id:
            if product[10]:
                db_actions.update_user_stats(user_id, 'bs_coin', -product[4])
            
            db_actions.update_user_stats(user_id, 'orders', 1)
            
            notify_admins_about_order(user_id, product, order_data, order_id, payment_photo_id)
            
            bot.send_message(
                user_id,
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
                f"üìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n"
                f"üí¨ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
            )
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    finally:
        if user_id in temp_data and 'order' in temp_data[user_id]:
            del temp_data[user_id]['order']

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ============

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    
    if not is_subscribed(user_id):
        show_subscription_request(user_id)
        return
    
    buttons = Bot_inline_btns()
    
    is_new_user = not db_actions.user_exists(user_id)
    if is_new_user:
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        username = f"@{message.from_user.username}" if message.from_user.username else ""
        db_actions.add_user(user_id, first_name, last_name, username)

    command_parts = message.text.split()
    if len(command_parts) > 1:
        param = command_parts[1]
        
        if param.startswith('ref_'):
            try:
                referrer_id = int(param.split('_')[1])
                if is_new_user and db_actions.user_exists(referrer_id) and referrer_id != user_id:
                    db_actions.add_referral(referrer_id, user_id)
                    db_actions.update_user_stats(referrer_id, 'bs_coin', 100)
                    db_actions.update_user_stats(user_id, 'bs_coin', 50)
                    db_actions.update_user_stats(user_id, 'discount', 5)
                    
                    bot.send_message(
                        referrer_id,
                        f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 BS Coin. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {db_actions.get_referral_stats(referrer_id)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
                    )
                    
                    bot.send_message(
                        user_id,
                        f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n"
                        f"üíé +50 BS Coin\n"
                        f"üéØ +5% —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤—Å–µ –∑–∞–∫–∞–∑—ã"
                    )
            except (ValueError, IndexError):
                pass
            
        elif param.startswith('product_'):
            try:
                product_id_str = param.split('_')[1]
                if product_id_str.lower() == 'none':
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞")
                    
                product_id = int(product_id_str)
                show_product(user_id, product_id)
                return
            except (ValueError, IndexError):
                bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä")
    
    if handle_daily_bonus(user_id):
        bot.send_message(user_id, "üéâ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: 10 BS Coin –∑–∞—à–ª–∏ –≤–∞–º –Ω–∞ —Å—á–µ—Ç!")
    
    user_data = db_actions.get_user_data(user_id)
    welcome_msg = (
        f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–æ—Ä—Ç, –î—Ä—É–≥! üöÄ\n"
        f"–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ BridgeSide ‚Äî –º–µ—Å—Ç–µ, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–≤–æ–π —Å—Ç–∏–ª—å –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
        f"üåâ –¢–≤–æ–∏ –º–æ—Å—Ç—ã –≤ –º–∏—Ä BridgeSide: üåâ\n"
        f"üõçÔ∏è @BridgeSide_Shop - –ü—Ä—è–º–æ–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ó–¥–µ—Å—å —Ç—ã –ø–µ—Ä–≤—ã–º —É–∑–Ω–∞–µ—à—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –¥—Ä–æ–ø–∞—Ö.\n"
        f"üåü @BridgeSide_LifeStyle - –õ—É–∫–±—É–∫–∏, —Å—Ç–∏–ª—å, –∂–∏–∑–Ω—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∞–∫—Ü–∏–∏ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏. –í–¥–æ—Ö–Ω–æ–≤–ª—è–π—Å—è –∏ —É—á–∞—Å—Ç–≤—É–π!\n"
        f"üì¢ @BridgeSide_Featback- –ß–µ—Å—Ç–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –æ—Ç —Ç–∞–∫–∏—Ö –∂–µ —á–ª–µ–Ω–æ–≤ –∫–ª—É–±–∞, –∫–∞–∫ –∏ —Ç—ã. –ù–∞–º –≤–∞–∂–Ω–∞ —Ç–≤–æ—è –æ—Ü–µ–Ω–∫–∞.\n\n"
        f"ü§ñ –ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º –∫–æ—Ä–∞–±–ª–µ–º? –ü—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ–≥–æ!\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ù–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ —Å–∫–∞—á–∏–≤–∞—Ç—å.–ü—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä—è–º–æ –≤ —ç—Ç—É —Å—Ç—Ä–æ–∫—É —á–∞—Ç–∞:\n"
        f"‚Ä¢ /profile ‚Äî üë§ –¢–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ–ø—É—Å–∫. –ó–¥–µ—Å—å —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è, –±–æ–Ω—É—Å—ã –∏ —Å—Ç–∞—Ç—É—Å –≤ –∫–ª—É–±–µ.\n"
        f"‚Ä¢ /ref ‚Äî üìç –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥. –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –∫—Ä—É—Ç—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞.\n"
        f"‚Ä¢ /support ‚Äî üõü –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å 24/7.\n"
        f"üåü–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –±–æ—Ç–∞üåü\n\n"
        f"üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ —Å –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ! –ë–æ—Ç –∂–¥–µ—Ç —Ç–≤–æ–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞. üòâ\n"
        f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ BridgeSide. üåâ"
    )
    
    if db_actions.user_is_admin(user_id):
        bot.send_message(user_id, welcome_msg, reply_markup=buttons.admin_buttons())
    else:
        bot.send_message(user_id, welcome_msg, reply_markup=buttons.start_buttons())

@bot.message_handler(func=lambda msg: msg.text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    profile(message)

@bot.message_handler(func=lambda msg: msg.text == 'üéÅ –ê–∫—Ü–∏–∏')
def show_promo(message):
    bot.send_message(message.chat.id, "üî• –ì–æ—Ä—è—á–∏–µ –∞–∫—Ü–∏–∏")

@bot.message_handler(func=lambda msg: msg.text == 'üì¢ –û—Ç–∑—ã–≤—ã')
def show_reviews(message):
    user_id = message.from_user.id
    reviews = db_actions.get_reviews()
    buttons = Bot_inline_btns()
    
    if not reviews:
        bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!", reply_markup=buttons.reviews_buttons())
        return
        
    reviews_msg = "üî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n"
    for review in reviews[:3]:
        reviews_msg += f"‚≠êÔ∏è {review[2]}\n‚Äî {review[5] or review[6]}\n\n"
    
    bot.send_message(
        user_id,
        reviews_msg,
        reply_markup=buttons.reviews_buttons()
    )

@bot.message_handler(commands=['my_orders'])
def my_orders(message):
    user_id = message.from_user.id
    orders = db_actions.get_user_orders(user_id)
    
    if not orders:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return
    
    orders_text = "üì¶ –í–ê–®–ò –ó–ê–ö–ê–ó–´:\n\n"
    for order in orders:
        product = db_actions.get_product(order['product_id'])
        orders_text += (
            f"üõí –ó–∞–∫–∞–∑ #{order['order_id']}\n"
            f"üõçÔ∏è –¢–æ–≤–∞—Ä: {product[1] if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
            f"üïí –î–∞—Ç–∞: {order['created_at']}\n\n"
        )
    
    bot.send_message(user_id, orders_text)

@bot.message_handler(commands=['support'])
def support(message):
    bot.reply_to(message, "üõ†Ô∏è –ù–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—Å!\n\n"
                          "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n"
                          "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @support_username\n"
                          "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 10:00-22:00 (–ú–°–ö)\n\n"
                          "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!")

@bot.message_handler(commands=['ref'])
def ref_command(message):
    user_id = message.from_user.id
    user_data = db_actions.get_user_data(user_id)
    if not user_data:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    ref_count = db_actions.get_referral_stats(user_id)
    ref_link = f"https://t.me/{bot.get_me().username}?start={user_data['referral_code']}"
    
    ref_msg = (
        f"‚ú® ü™ô –ó–ê–†–ê–ë–ê–¢–´–í–ê–ô BS COIN –í–ú–ï–°–¢–ï –° –î–†–£–ó–¨–Ø–ú–ò! ‚ú®\n\n"
        f'–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –∫—Ä—É—Ç—ã–µ –±–æ–Ω—É—Å—ã! –≠—Ç–æ –Ω–∞—à —Å–ø–æ—Å–æ–± —Å–∫–∞–∑–∞—Ç—å "—Å–ø–∞—Å–∏–±–æ" –∑–∞ —Ç–≤–æ—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
        f"üîÆ –¢–í–û–Ø –ú–ê–ì–ò–Ø –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø:\n"
        f"–°–∫–æ–ø–∏—Ä—É–π —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–µ –¥—Ä—É–∑—å—è–º. –¢–æ–ª—å–∫–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —Ç–≤–æ–π –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫!"
        f"{ref_link}\n"
        f"(–ù–∞–∂–º–∏, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å) ‚ú®\n\n"
        f"üéÅ –ß–¢–û –¢–´ –ü–û–õ–£–ß–ê–ï–®–¨:\n"
        f" +100 BridgeSide Coin ü™ô ‚Äî –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ —Ç–≤–æ–π —Å—á–µ—Ç.\n\n"
        f"üéÅ –ß–¢–û –ü–û–õ–£–ß–ê–ï–¢ –¢–í–û–ô –î–†–£–ì:\n"
        f" –©–µ–¥—Ä—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ ‚Äî –°–ö–ò–î–ö–ê 5% üéØ + +50 BS Coin –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç! –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ –Ω–∞—á–∞—Ç—å shopping!\n"
        f"üèÜ –¢–û–ü-5 –ü–û –†–ï–§–ï–†–ê–õ–ê–ú –ï–ñ–ï–ú–ï–°–Ø–ß–ù–û –ü–û–õ–£–ß–ê–Æ–¢ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ô –ú–ï–†–ß!\n"
        f"–ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π —Ç—ã –ø—Ä–∏–≤–µ–¥—ë—à—å, —Ç–µ–º –≤—ã—à–µ —Ç–≤–æ–π —à–∞–Ω—Å –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ —á–∏—Å–ª–µ –õ–µ–≥–µ–Ω–¥ –Ω–∞—à–µ–≥–æ –∫–ª—É–±–∞! –°–º–æ—Ç—Ä–∏ —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ (/profile).\n"
        f"üöÄ–ù–µ –∫–æ–ø–∏ ‚Äî –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º, –ø–æ–∫—É–ø–∞–π –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π!"
    )
    
    bot.send_message(user_id, ref_msg, parse_mode="HTML")

@bot.message_handler(commands=['set_discount'])
def set_discount(message):
    user_id = message.from_user.id
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    args = message.text.split()
    if len(args) != 3:
        bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_discount [user_id] [%]")
        return

    try:
        target_user_id = int(args[1])
        discount = int(args[2])
        
        if discount < 0 or discount > 50:
            bot.send_message(user_id, "–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 50%")
            return
            
        db_actions.set_discount(target_user_id, discount)
        bot.send_message(user_id, f"‚úÖ –°–∫–∏–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {discount}%")
        bot.send_message(target_user_id, f"üéâ –í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞: {discount}%")
    except ValueError:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. user_id –∏ % –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")

@bot.message_handler(commands=['add_coins'])
def add_coins(message):
    user_id = message.from_user.id
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    args = message.text.split()
    if len(args) != 3:
        bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_coins [user_id] [amount]")
        return

    try:
        target_user_id = int(args[1])
        amount = int(args[2])
        db_actions.update_user_stats(target_user_id, 'bs_coin', amount)
        bot.send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} BS Coin")
        bot.send_message(target_user_id, f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} BS Coin!")
    except ValueError:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. user_id –∏ amount –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")

@bot.message_handler(commands=['user_info'])
def user_info(message):
    user_id = message.from_user.id
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    args = message.text.split()
    if len(args) != 2:
        bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_info [user_id]")
        return

    try:
        target_user_id = int(args[1])
        user_data = db_actions.get_user_data(target_user_id)
        if not user_data:
            bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        info = (
            f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
            f"üÜî ID: {user_data['user_id']}\n"
            f"üë§ –ò–º—è: {user_data['first_name']} {user_data['last_name']}\n"
            f"üîó Username: {user_data['username']}\n"
            f"‚≠êÔ∏è –°—Ç–∞—Ç—É—Å: {user_data['status']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_data['comments']}\n"
            f"üì¶ –ó–∞–∫–∞–∑—ã: {user_data['orders']}\n"
            f"ü™ô BS Coin: {user_data['bs_coin']}\n"
            f"üéÅ –°–∫–∏–¥–∫–∞: {user_data['discount']}%\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {db_actions.get_referral_stats(target_user_id)}"
        )
        bot.send_message(user_id, info)
    except ValueError:
        bot.send_message(user_id, "user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

@bot.message_handler(commands=['profile'])
def profile(message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        show_subscription_request(user_id)
        return
        
    user_data = db_actions.get_user_data(user_id)
    if not user_data:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    buttons = Bot_inline_btns()
    achievements_str = ""
    if user_data['achievements']:
        icons = {"first_order": "üöÄ", "active_commentator": "üí¨", "referral_king": "üëë"}
        achievements_str = "\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: " + " ".join(
            [icons.get(a, "üåü") for a in user_data['achievements']]
        )
    
    coin_info = ""
    if user_data['bs_coin'] < 100:
        coin_info = "\n\nüí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å BS Coin:\n‚Ä¢ /start - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n‚Ä¢ /ref - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ"
    
    profile_msg = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üÜî ID: <code>{user_data['user_id']}</code>\n"
        f"üåü –°—Ç–∞—Ç—É—Å: {user_data['status']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_data['comments']}\n"
        f"üì¶ –ó–∞–∫–∞–∑—ã: {user_data['orders']}\n"
        f"ü™ô BS Coin: {user_data['bs_coin']}{coin_info}\n"
        f"üéÅ –°–∫–∏–¥–∫–∞: {user_data['discount']}%\n"
        f"{achievements_str}"
    )
    
    bot.send_message(
        user_id,
        profile_msg,
        parse_mode="HTML",
        reply_markup=buttons.profile_buttons(user_data)
    )

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        show_subscription_request(user_id)
        return
        
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    buttons = Bot_inline_btns()
    bot.send_message(
        user_id,
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=buttons.admin_buttons()
    )

@bot.message_handler(commands=['admin_stats'])
def admin_stats(message):
    user_id = message.from_user.id
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    products_count = db_actions.get_products_count()
    variations_count = db_actions.get_variations_count()
    users_count = db_actions.get_users_count()
    reviews_count = db_actions.get_reviews_count()
    
    stats_msg = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"
        f"üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤: {products_count}\n"
        f"üì¶ –í–∞—Ä–∏–∞—Ü–∏–π: {variations_count}\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
        f"üìù –û—Ç–∑—ã–≤–æ–≤: {reviews_count}"
    )
    
    bot.send_message(user_id, stats_msg)

@bot.message_handler(commands=['export_products'])
def export_products(message):
    user_id = message.from_user.id
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    try:
        products_data = db_actions.get_all_products_for_export()
        
        if not products_data:
            bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        df_data = []
        for product in products_data:
            df_data.append({
                '–ú–æ–¥–µ–ª—å': product['name'],
                'ID –ú–æ–¥–µ–ª–∏': product['model_id'],
                '–†–∞–∑–º–µ—Ä': product['size'],
                '–¶–µ–Ω–∞ Y': product['price_yuan'],
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': product['quantity'],
                '–¶–µ–Ω–∞': product['price'],
                '–°—Å—ã–ª–∫–∞': product['link']
            })
        
        df = pd.DataFrame(df_data)
        filename = f"products_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        df.to_excel(filename, index=False)
        
        with open(filename, 'rb') as f:
            bot.send_document(user_id, f, caption="üìä –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        
        os.remove(filename)
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}"
        print(error_msg)
        bot.send_message(user_id, error_msg)

@bot.message_handler(commands=['upload_products'])
def upload_products(message):
    user_id = message.from_user.id
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    bot.send_message(user_id, "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏")
    bot.register_next_step_handler(message, process_products_file)

@bot.message_handler(commands=['create_post'])
def create_post(message):
    user_id = message.from_user.id
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    if user_id in temp_data:
        del temp_data[user_id]
    
    temp_data[user_id] = {
        'step': 'select_product',
        'photos': []
    }
    
    products = db_actions.get_products(limit=50)
    buttons = Bot_inline_btns()
    
    if not products:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return
        
    bot.send_message(
        user_id,
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª:",
        reply_markup=buttons.post_products_buttons(products)
    )

@bot.message_handler(commands=['export_users'])
def export_users(message):
    user_id = message.from_user.id
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    users = db_actions.get_all_users()
    if not users:
        bot.send_message(user_id, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
        
    df = pd.DataFrame(users, columns=['user_id', 'first_name', 'last_name', 'username'])
    
    filename = f"users_export_{datetime.now().strftime('%Y%m%d%H%M%S')}.xlsx"
    df.to_excel(filename, index=False)
    
    with open(filename, 'rb') as f:
        bot.send_document(user_id, f, caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    os.remove(filename)

@bot.message_handler(commands=['exclusive'])
def exclusive_products(message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        show_subscription_request(user_id)
        return
        
    products = db_actions.get_exclusive_products(limit=10)
    buttons = Bot_inline_btns()
    
    if not products:
        bot.send_message(user_id, "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
        
    products_msg = "üéØ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ç–æ–ª—å–∫–æ –∑–∞ BS Coin):\n\n"
    for product in products:
        products_msg += f"{product[1]} - {product[4]} BS Coin\n"
    
    bot.send_message(
        user_id,
        products_msg,
        reply_markup=buttons.exclusive_products_buttons(products)
    )

@bot.message_handler(commands=['order_status'])
def order_status_command(message):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    user_id = message.from_user.id
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    args = message.text.split()
    if len(args) < 3:
        bot.send_message(user_id, 
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /order_status [order_id] [status]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ç—É—Å–æ–≤:\n"
            "‚Ä¢ new - –ù–æ–≤—ã–π\n"
            "‚Ä¢ confirmed - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n" 
            "‚Ä¢ paid - –û–ø–ª–∞—á–µ–Ω\n"
            "‚Ä¢ shipped - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω\n"
            "‚Ä¢ delivered - –î–æ—Å—Ç–∞–≤–ª–µ–Ω\n"
            "‚Ä¢ cancelled - –û—Ç–º–µ–Ω–µ–Ω"
        )
        return
        
    try:
        order_id = int(args[1])
        status = ' '.join(args[2:])
        
        success = db_actions.update_order_status(order_id, status)
        
        if success:
            order_info = db_actions.get_order_by_id(order_id)
            if order_info:
                user_data = db_actions.get_user_data(order_info['user_id'])
                product = db_actions.get_product(order_info['product_id'])
                
                status_texts = {
                    'new': 'üÜï –ù–û–í–´–ô',
                    'confirmed': '‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù',
                    'paid': 'üí≥ –û–ü–õ–ê–ß–ï–ù', 
                    'shipped': 'üöö –û–¢–ü–†–ê–í–õ–ï–ù',
                    'delivered': 'üì¶ –î–û–°–¢–ê–í–õ–ï–ù',
                    'cancelled': '‚ùå –û–¢–ú–ï–ù–ï–ù'
                }
                
                status_display = status_texts.get(status.lower(), status.upper())
                
                bot.send_message(
                    order_info['user_id'],
                    f"üì¶ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω:\n"
                    f"üîÑ {status_display}\n\n"
                    f"üõçÔ∏è –¢–æ–≤–∞—Ä: {product[1] if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                    f"üí∞ –°—É–º–º–∞: {product[3] if product else '0'}‚ÇΩ"
                )
            
            bot.send_message(user_id, f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status}'")
        else:
            bot.send_message(user_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        bot.send_message(user_id, "‚ùå order_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['orders'])
def list_orders(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    user_id = message.from_user.id
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    status_filter = None
    args = message.text.split()
    if len(args) > 1:
        status_filter = args[1].lower()
    
    orders = db_actions.get_all_orders(status_filter)
    
    if not orders:
        bot.send_message(user_id, "–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    orders_text = "üì¶ –°–ü–ò–°–û–ö –ó–ê–ö–ê–ó–û–í"
    if status_filter:
        orders_text += f" (—Ñ–∏–ª—å—Ç—Ä: {status_filter})"
    orders_text += "\n\n"
    
    for order in orders:
        product = db_actions.get_product(order['product_id'])
        user_data = db_actions.get_user_data(order['user_id'])
        
        orders_text += (
            f"üõí –ó–∞–∫–∞–∑ #{order['order_id']}\n"
            f"üë§ {user_data['first_name']} {user_data['last_name']}\n"
            f"üõçÔ∏è {product[1] if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
            f"üïí {order['created_at']}\n"
            f"üîó /order_info_{order['order_id']}\n\n"
        )
    
    bot.send_message(user_id, orders_text)


@bot.callback_query_handler(func=lambda call: call.data.startswith('order_now_'))
def handle_order_now(call):
    try:
        print(f"DEBUG: Order now callback: {call.data}")
        
        user_id = call.from_user.id
        parts = call.data.split('_')
        
        if len(parts) < 4:
            print(f"DEBUG: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - {call.data}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞")
            return
            
        product_id = int(parts[2])
        size = parts[3]
        
        print(f"DEBUG: Order now - product_id: {product_id}, size: '{size}' (type: {type(size)})")
        
        if not db_actions.check_size_availability(product_id, size):
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if user_id not in temp_data:
            temp_data[user_id] = {}
        
        temp_data[user_id]['order'] = {
            'product_id': product_id,
            'size': size,
            'step': 'ask_delivery'
        }
        
        delivery_form = (
            "üì¶ –î–õ–Ø –û–§–û–†–ú–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "üèôÔ∏è –ì–æ—Ä–æ–¥: –í–∞—à –≥–æ—Ä–æ–¥\n"
            "üìç –ê–¥—Ä–µ—Å: –£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞\n"
            "üë§ –§–ò–û: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +79123456789\n"
            "üöö –î–æ—Å—Ç–∞–≤–∫–∞: –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ú–æ—Å–∫–≤–∞\n"
            "—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 5\n"
            "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
            "+79123456789\n"
            "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏"
        )
        
        bot.send_message(user_id, delivery_form)
        bot.answer_callback_query(call.id, "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ order_now: {e}")
        import traceback
        traceback.print_exc()
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'confirm_order' and
    message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
def confirm_order(message):
    user_id = message.from_user.id
    
    try:
        order_data = temp_data[user_id]['order']
        product_id = order_data['product_id']
        size = order_data.get('size')
        product = db_actions.get_product(product_id)
        payment_photo_id = order_data.get('payment_photo')
        
        if not product:
            bot.send_message(user_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if size:
            success = db_actions.decrease_product_quantity(product_id, size)
            if not success:
                bot.send_message(user_id, "‚ùå –≠—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
        
        order_id = db_actions.create_detailed_order(
            user_id=user_id,
            product_id=product_id,
            size=size,
            city=order_data['city'],
            address=order_data['address'],
            full_name=order_data['full_name'],
            phone=order_data['phone'],
            delivery_type=order_data['delivery_type']
        )
        
        if order_id:
            if product[10]:  # is_exclusive
                db_actions.update_user_stats(user_id, 'bs_coin', -product[4])  # coin_price
            
            db_actions.update_user_stats(user_id, 'orders', 1)
            
            notify_admins_about_order(user_id, product, order_data, order_id, payment_photo_id)
            
            remove_markup = types.ReplyKeyboardRemove()
            
            bot.send_message(
                user_id,
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
                f"üìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n"
                f"üí¨ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
                reply_markup=remove_markup
            )
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    finally:
        if user_id in temp_data and 'order' in temp_data[user_id]:
            del temp_data[user_id]['order']

@bot.message_handler(func=lambda message: message.text.startswith('/order_info_'))
def order_info(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
    user_id = message.from_user.id
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    try:
        order_id = int(message.text.split('_')[2])
        order_info = db_actions.get_order_by_id(order_id)
        
        if not order_info:
            bot.send_message(user_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        product = db_actions.get_product(order_info['product_id'])
        user_data = db_actions.get_user_data(order_info['user_id'])
        buttons = Bot_inline_btns()
        
        info_text = (
            f"üì¶ –ó–ê–ö–ê–ó #{order_id}\n\n"
            f"üë§ –ö–õ–ò–ï–ù–¢:\n"
            f"‚Ä¢ –ò–º—è: {user_data['first_name']} {user_data['last_name']}\n"
            f"‚Ä¢ @{user_data['username']}\n"
            f"‚Ä¢ ID: {user_data['user_id']}\n\n"
            f"üõçÔ∏è –¢–û–í–ê–†:\n"
            f"‚Ä¢ {product[1] if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {product[3] if product else '0'}‚ÇΩ\n\n"
            f"üì¶ –î–û–°–¢–ê–í–ö–ê:\n"
            f"‚Ä¢ –ì–æ—Ä–æ–¥: {order_info['city']}\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: {order_info['address']}\n"
            f"‚Ä¢ –§–ò–û: {order_info['full_name']}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {order_info['phone']}\n"
            f"‚Ä¢ –°–ø–æ—Å–æ–±: {order_info['delivery_type']}\n\n"
            f"üìä –°–¢–ê–¢–£–°: {order_info['status']}\n"
            f"üïí –°–û–ó–î–ê–ù: {order_info['created_at']}\n\n"
            f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /order_status {order_id} [—Å—Ç–∞—Ç—É—Å]"
        )
        
        bot.send_message(user_id, info_text, reply_markup=buttons.create_order_status_buttons(order_id))
        
    except (IndexError, ValueError):
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('order_'))
def handle_order_status_buttons(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    buttons = Bot_inline_btns()
    try:
        admin_id = call.from_user.id
        if not db_actions.user_is_admin(admin_id):
            bot.answer_callback_query(call.id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
            
        parts = call.data.split('_')
        action = parts[1]
        order_id = int(parts[2])
        
        status_mapping = {
            'confirm': 'confirmed',
            'pay': 'paid',
            'ship': 'shipped', 
            'deliver': 'delivered',
            'cancel': 'cancelled'
        }
        
        if action in status_mapping:
            new_status = status_mapping[action]
            success = db_actions.update_order_status(order_id, new_status)
            
            if success:
                order_info = db_actions.get_order_by_id(order_id)
                if order_info:
                    user_data = db_actions.get_user_data(order_info['user_id'])
                    product = db_actions.get_product(order_info['product_id'])
                    
                    status_messages = {
                        'confirmed': '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!',
                        'paid': 'üí≥ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω. –ì–æ—Ç–æ–≤–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!',
                        'shipped': 'üöö –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ.',
                        'delivered': 'üéâ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!',
                        'cancelled': '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
                    }
                    
                    bot.send_message(
                        order_info['user_id'],
                        f"{status_messages.get(new_status, '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω')}\n\n"
                        f"üõí –ó–∞–∫–∞–∑ #{order_id}\n"
                        f"üõçÔ∏è {product[1] if product else '–¢–æ–≤–∞—Ä'}"
                    )
                
                try:
                    current_text = call.message.caption if call.message.caption else call.message.text
                    updated_text = current_text.replace(
                        "üìä –°—Ç–∞—Ç—É—Å: ‚è≥ –û–ñ–ò–î–ê–ï–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø",
                        f"üìä –°—Ç–∞—Ç—É—Å: {new_status.upper()}"
                    )
                    
                    if call.message.photo:
                        bot.edit_message_caption(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            caption=updated_text,
                            reply_markup=buttons.create_order_status_buttons(order_id)
                        )
                    else:
                        bot.edit_message_text(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text=updated_text,
                            reply_markup=buttons.create_order_status_buttons(order_id)
                        )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                bot.answer_callback_query(call.id, f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}")
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

@bot.message_handler(commands=['add_product'])
def add_product(message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        show_subscription_request(user_id)
        return
        
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
        
    bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")
    bot.register_next_step_handler(message, process_product_photo)

def process_product_photo(message):
    if not message.photo:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")
        return
        
    photo_id = message.photo[-1].file_id
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    bot.register_next_step_handler(
        message, 
        lambda m: process_product_name(m, photo_id)
    )

def process_product_name(message, photo_id):
    name = message.text
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    bot.register_next_step_handler(
        message, 
        lambda m: process_product_description(m, photo_id, name)
    )

def process_product_description(message, photo_id, name):
    description = message.text
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)")
    bot.register_next_step_handler(
        message, 
        lambda m: process_product_price(m, photo_id, name, description)
    )

def process_product_price(message, photo_id, name, desc):
    try:
        price = float(message.text)
        
        markup = types.InlineKeyboardMarkup()
        btn_yes = types.InlineKeyboardButton("–î–∞", callback_data="exclusive_yes")
        btn_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="exclusive_no")
        markup.add(btn_yes, btn_no)
        
        msg = bot.send_message(
            message.chat.id,
            "üéØ –≠—Ç–æ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä (—Ç–æ–ª—å–∫–æ –∑–∞ BS Coin)?",
            reply_markup=markup
        )
    
        user_id = message.from_user.id
        temp_data[user_id] = {
            'name': name,
            'description': desc,
            'price': price,
            'photo_id': photo_id,
            'step': 'ask_exclusive'
        }
            
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞")

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ============

@bot.callback_query_handler(func=lambda call: call.data == 'check_subscription')
def check_subscription(call):
    user_id = call.from_user.id
    if is_subscribed(user_id):
        bot.delete_message(user_id, call.message.message_id)
        start(call.message)
    else:
        bot.answer_callback_query(call.id, "–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª")

@bot.callback_query_handler(func=lambda call: call.data == 'exchange_coin')
def exchange_coin(call):
    user_id = call.from_user.id
    user_data = db_actions.get_user_data(user_id)
    
    if not user_data:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    if user_data['bs_coin'] < 500:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BS Coin! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 500")
        return
        
    db_actions.update_user_stats(user_id, 'bs_coin', -500)
    db_actions.update_user_stats(user_id, 'discount', 5)
    
    bot.answer_callback_query(call.id, "‚úÖ –£—Å–ø–µ—à–Ω–æ! 500 BS Coin –æ–±–º–µ–Ω—è–Ω—ã –Ω–∞ 5% —Å–∫–∏–¥–∫–∏")
    
    user_data = db_actions.get_user_data(user_id)
    buttons = Bot_inline_btns()
    
    achievements_str = ""
    if user_data['achievements']:
        icons = {"first_order": "üöÄ", "active_commentator": "üí¨", "referral_king": "üëë"}
        achievements_str = "\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: " + " ".join(
            [icons.get(a, "üåü") for a in user_data['achievements']]
        )
    
    profile_msg = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üÜî ID: <code>{user_data['user_id']}</code>\n"
        f"üåü –°—Ç–∞—Ç—É—Å: {user_data['status']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_data['comments']}\n"
        f"üì¶ –ó–∞–∫–∞–∑—ã: {user_data['orders']}\n"
        f"ü™ô BS Coin: {user_data['bs_coin']}\n"
        f"üéÅ –°–∫–∏–¥–∫–∞: {user_data['discount']}%\n"
        f"{achievements_str}"
    )
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=profile_msg,
        parse_mode="HTML",
        reply_markup=buttons.profile_buttons(user_data)
    )
    
    bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ–±–º–µ–Ω—è–ª–∏ 500 BS Coin –Ω–∞ 5% —Å–∫–∏–¥–∫–∏")

@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_coin_'))
def buy_product_with_coins(call):
    user_id = call.from_user.id
    if not is_subscribed(user_id):
        show_subscription_request(user_id)
        return
        
    try:
        product_id = int(call.data.split('_')[2])
    except (IndexError, ValueError):
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
        return
        
    product = db_actions.get_product(product_id)
    user_data = db_actions.get_user_data(user_id)
    
    if not user_data:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    if not product or not product[10]:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º")
        return
    
    coin_price = product[4]
    
    if user_data['bs_coin'] < coin_price:
        bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BS Coin!")
        
        buttons = Bot_inline_btns()
        markup = types.InlineKeyboardMarkup()
        
        btn1 = types.InlineKeyboardButton(
            text="üíé –ü–æ–ª—É—á–∏—Ç—å BS Coin",
            callback_data="how_to_get_coins"
        )
        btn2 = types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É",
            callback_data=f"product_{product_id}"
        )
        markup.add(btn1, btn2)
        
        bot.send_message(
            user_id,
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BS Coin –¥–ª—è –ø–æ–∫—É–ø–∫–∏!\n\n"
            f"üíé –ù—É–∂–Ω–æ: {coin_price} BS Coin\n"
            f"üí∞ –£ –≤–∞—Å: {user_data['bs_coin']} BS Coin\n"
            f"üìä –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {coin_price - user_data['bs_coin']} BS Coin\n\n"
            f"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å BS Coin —á–µ—Ä–µ–∑:\n"
            f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (/start)\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É (/ref)\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ",
            reply_markup=markup
        )
        return
    
    db_actions.create_order(user_id, product_id, 1)
    db_actions.update_user_stats(user_id, 'bs_coin', -coin_price)
    db_actions.update_user_stats(user_id, 'orders', 1)
    
    if user_data['orders'] == 0:
        db_actions.add_achievement(user_id, "first_order")
        db_actions.update_user_stats(user_id, 'bs_coin', 50)
        bot.send_message(
            user_id,
            "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑¬ª +50 BS Coin!"
        )
    
    bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
    bot.send_message(
        user_id,
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∏—Å–∞–Ω–æ {coin_price} BS Coin. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ."
    )

@bot.callback_query_handler(func=lambda call: call.data == 'how_to_get_coins')
def how_to_get_coins(call):
    user_id = call.from_user.id
    user_data = db_actions.get_user_data(user_id)
    
    if not user_data:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(
        text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        callback_data="ref_link"
    )
    markup.add(btn1)
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=f"üíé –°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è BS Coin:\n\n"
            f"1. üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +10 BS Coin –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (/start)\n"
            f"2. üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: +100 BS Coin –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ (/ref)\n"
            f"3. üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ: –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã\n"
            f"4. üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n\n"
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data['bs_coin']} BS Coin",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'ref_link')
def ref_link(call):
    user_id = call.message.chat.id
    if not is_subscribed(user_id):
        show_subscription_request(user_id)
        return
        
    user_data = db_actions.get_user_data(user_id)
    
    if not user_data:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
        
    ref_count = db_actions.get_referral_stats(user_id)
    ref_link = f"https://t.me/{bot.get_me().username}?start={user_data['referral_code']}"
    
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(
        text="üíé –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä–∞–º",
        callback_data="back_to_catalog"
    )
    markup.add(btn1)
    
    ref_msg = (
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
        f"‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 100 BS Coin\n"
        f"‚Ä¢ –í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç 50 BS Coin –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–∫–∞–∑–µ\n\n"
        f"üöÄ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {ref_count}\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {ref_count * 100} BS Coin"
    )
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=ref_msg,
            parse_mode="HTML",
            reply_markup=markup
        )
    except:
        bot.send_message(
            user_id,
            ref_msg,
            parse_mode="HTML",
            reply_markup=markup
        )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data in ['exclusive_yes', 'exclusive_no'])
def process_exclusive(call):
    user_id = call.from_user.id
    is_exclusive = (call.data == 'exclusive_yes')
    
    if user_id not in temp_data or temp_data[user_id]['step'] != 'ask_exclusive':
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    temp_data[user_id]['is_exclusive'] = is_exclusive
    temp_data[user_id]['step'] = 'ask_coin_price' if is_exclusive else 'ready_to_save'
    
    if is_exclusive:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text="üíé –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ BS Coin:"
        )
        bot.register_next_step_handler(call.message, process_coin_price)
    else:
        product_data = temp_data[user_id]
        product_id = db_actions.add_product(
            name=product_data['name'],
            description=product_data['description'],
            price=product_data['price'],
            photo_id=product_data['photo_id'],
            is_exclusive=False,
            coin_price=0
        )
        
        product_data['product_id'] = product_id
        post_link = publish_product_to_channel(product_data)
        
        if post_link:
            bot.send_message(
                user_id,
                f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n–°—Å—ã–ª–∫–∞: {post_link}",
                disable_web_page_preview=True
            )
        else:
            bot.send_message(user_id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        
        if user_id in temp_data:
            del temp_data[user_id]

def process_coin_price(message):
    user_id = message.from_user.id
    
    if user_id not in temp_data or temp_data[user_id]['step'] != 'ask_coin_price':
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    try:
        coin_price = int(message.text)
        if coin_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        product_data = temp_data[user_id]
        product_id = db_actions.add_product(
            name=product_data['name'],
            description=product_data['description'],
            price=product_data['price'],
            photo_id=product_data['photo_id'],
            is_exclusive=True,
            coin_price=coin_price
        )
        
        if not product_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        product_data['product_id'] = product_id
        product_data['coin_price'] = coin_price
        product_data['is_exclusive'] = True
        post_link = publish_product_to_channel(product_data)
        
        if post_link:
            bot.send_message(
                user_id,
                f"‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n–°—Å—ã–ª–∫–∞: {post_link}",
                disable_web_page_preview=True
            )
        else:
            bot.send_message(user_id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        
        if user_id in temp_data:
            del temp_data[user_id]
            
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.")
        msg = bot.send_message(user_id, "üíé –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ BS Coin:")
        bot.register_next_step_handler(msg, process_coin_price)
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        if user_id in temp_data:
            del temp_data[user_id]

def publish_product_to_channel(product):
    try:
        if not product.get('product_id'):
            print("–û—à–∏–±–∫–∞: product_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return None
            
        config_data = config.get_config()
        chat_id = config_data['chat_id']
        topic_id = config_data['topics']['–º–∞–≥–∞–∑–∏–Ω']
        
        deep_link = f"https://t.me/{bot.get_me().username}?start=product_{product['product_id']}"
        
        markup = types.InlineKeyboardMarkup()
        buy_btn = types.InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", url=deep_link)
        markup.add(buy_btn)
        
        if product.get('is_exclusive'):
            caption = (
                f"üéØ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ô –¢–û–í–ê–†\n\n"
                f"üõçÔ∏è {product['name']}\n\n"
                f"üìù {product['description']}\n"
                f"üíé –¶–µ–Ω–∞: {product['coin_price']} BS Coin\n\n"
                f"üëâ –ù–∞–∂–º–∏—Ç–µ ¬´üõí –ö—É–ø–∏—Ç—å¬ª –¥–ª—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"
            )
        else:
            caption = (
                f"üõçÔ∏è {product['name']}\n\n"
                f"üìù {product['description']}\n"
                f"üí∞ –¶–µ–Ω–∞: {product['price']}‚ÇΩ\n\n"
                f"üëâ –ù–∞–∂–º–∏—Ç–µ ¬´üõí –ö—É–ø–∏—Ç—å¬ª –¥–ª—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"
            )
        
        message = bot.send_photo(
            chat_id=chat_id,
            photo=product['photo_id'],
            caption=caption,
            reply_markup=markup,
            message_thread_id=topic_id
        )
        
        channel_id = str(abs(chat_id))
        return f"https://t.me/c/{channel_id}/{message.message_id}?thread={topic_id}"
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return None

@bot.callback_query_handler(func=lambda call: call.data.startswith('post_product_'))
def select_product_for_post(call):
    user_id = call.from_user.id
    product_id = int(call.data.split('_')[2])
    
    if user_id not in temp_data or temp_data[user_id]['step'] != 'select_product':
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        return
        
    product = db_actions.get_product(product_id)
    if not product:
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    temp_data[user_id]['product_id'] = product_id
    temp_data[user_id]['step'] = 'add_photos'
    temp_data[user_id]['product_name'] = product[1]
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=f"üì¶ –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {product[1]}\n\n"
            f"üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 6 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞\n"
            f"üìù –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞\n"
            f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data in ['exclusive_yes_post', 'exclusive_no_post'])
def handle_exclusive_post(call):
    user_id = call.from_user.id
    is_exclusive = (call.data == 'exclusive_yes_post')
    
    if user_id not in temp_data:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        return
        
    product_id = temp_data[user_id]['product_id']
    product = db_actions.get_product(product_id)
    
    if not product:
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if is_exclusive:
        temp_data[user_id]['step'] = 'ask_coin_price_post'
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text="üíé –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ BS Coin:"
        )
    else:
        db_actions.update_product_exclusive(product_id, False, 0)
        success = publish_post_to_channel(
            product_id,
            temp_data[user_id]['photos'],
            temp_data[user_id]['text'],
            False,
            0
        )
        
        if success:
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @BridgeSide_Store\n\n"
                    f"üõçÔ∏è –¢–æ–≤–∞—Ä: {temp_data[user_id]['product_name']}\n"
                    f"üéØ –°—Ç–∞—Ç—É—Å: –û–±—ã—á–Ω—ã–π (—Ä—É–±–ª–∏)\n"
                    f"üí∞ –¶–µ–Ω–∞: {product[3]}‚ÇΩ"
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            
        if user_id in temp_data:
            del temp_data[user_id]

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('step') == 'ask_coin_price_post')


def handle_coin_price_input(message):
    user_id = message.from_user.id
    
    if message.text.lower() == '/cancel':
        if user_id in temp_data:
            del temp_data[user_id]
        bot.send_message(user_id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
        
    process_coin_price_post(message)

def process_coin_price_post(message):
    user_id = message.from_user.id
    
    if user_id not in temp_data or temp_data[user_id]['step'] != 'ask_coin_price_post':
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
        
    if message.text.lower() == '/cancel':
        if user_id in temp_data:
            del temp_data[user_id]
        bot.send_message(user_id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
        
    try:
        coin_price = int(message.text)
        if coin_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            
        product_id = temp_data[user_id]['product_id']
        product = db_actions.get_product(product_id)
        
        if not product:
            bot.send_message(user_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        db_actions.update_product_exclusive(product_id, True, coin_price)
        
        success = publish_post_to_channel(
            product_id,
            temp_data[user_id]['photos'],
            temp_data[user_id]['text'],
            True,
            coin_price
        )
        
        if success:
            bot.send_message(
                user_id,
                f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @BridgeSide_Store\n\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {temp_data[user_id]['product_name']}\n"
                f"üéØ –°—Ç–∞—Ç—É—Å: –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π\n"
                f"üíé –¶–µ–Ω–∞: {coin_price} BS Coin"
            )
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
        
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.")
        bot.send_message(user_id, "üíé –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ BS Coin:")
        return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
    finally:
        if user_id in temp_data:
            del temp_data[user_id]

def publish_post_to_channel(product_id, photos, text, is_exclusive, coin_price=0):
    try:
        product = db_actions.get_product(product_id)
        if not product:
            print("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        config_data = config.get_config()
        channel_id = config_data.get('store_channel_id', '@BridgeSide_Store')
        
        if not channel_id:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω channel_id –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
            return False
        
        deep_link = f"https://t.me/{bot.get_me().username}?start=product_{product_id}"
        

        markup = types.InlineKeyboardMarkup()
        buy_btn = types.InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", url=deep_link)
        markup.add(buy_btn)
        

        if not is_exclusive:
            price_text = f"üí∞ {product[3]}‚ÇΩ"
        else:
            price_text = f"üíé {coin_price} BS Coin"
        
        caption = (
            f"{text}\n\n"
            f"{price_text}\n\n"
            f"üëâ –ù–∞–∂–º–∏—Ç–µ ¬´üõí –ö—É–ø–∏—Ç—å¬ª –¥–ª—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"
        )
        
        if photos and len(photos) > 0:
            bot.send_photo(
                chat_id=channel_id,
                photo=photos[0],
                caption=caption,
                reply_markup=markup
            )
            
            for photo in photos[1:]:
                bot.send_photo(
                    chat_id=channel_id,
                    photo=photo
                )
        else:
            bot.send_message(
                chat_id=channel_id,
                text=caption,
                reply_markup=markup
            )
            
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        return False
    
@bot.callback_query_handler(func=lambda call: call.data.startswith(('buy_', 'order_now_')))
def handle_buy(call):
    user_id = call.from_user.id
    
    try:
        if call.data.startswith('buy_coin_'):
            parts = call.data.split('_')
            product_id = int(parts[2])
        else:
            parts = call.data.split('_')
            product_id = int(parts[1])
            size = parts[3] if len(parts) > 3 else None
        

        if user_id not in temp_data:
            temp_data[user_id] = {}
        
        temp_data[user_id]['order'] = {
            'product_id': product_id,
            'step': 'ask_delivery'
        }
        

        delivery_form = (
            "üì¶ –î–õ–Ø –û–§–û–†–ú–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
            "üèôÔ∏è –ì–æ—Ä–æ–¥:\n"
            "üìç –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):\n"
            "üë§ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n"
            "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
            "üöö –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ (–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏/–°–î–≠–ö):\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."
        )
        
        bot.send_message(user_id, delivery_form)
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith(('approve_order_', 'reject_order_')))
def handle_order_approval(call):
    try:
        admin_id = call.from_user.id
        if not db_actions.user_is_admin(admin_id):
            bot.answer_callback_query(call.id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
            
        action = call.data.split('_')[0]
        order_id = int(call.data.split('_')[2])
        
        order_data = db_actions.get_order_by_id(order_id)
        if not order_data:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        user_data = db_actions.get_user_data(order_data['user_id'])
        product = db_actions.get_product(order_data['product_id'])
        
        if action == 'approve':

            db_actions.update_order_status(order_id, "‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù")
            

            current_text = call.message.caption if call.message.caption else call.message.text
            updated_text = f"{current_text}\n\nüìä –°—Ç–∞—Ç—É—Å: ‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù\nüë®‚Äçüíº –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: @{call.from_user.username}"
            
            try:
                if call.message.photo:
                    bot.edit_message_caption(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        caption=updated_text,
                        reply_markup=None
                    )
                else:
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=updated_text,
                        reply_markup=None
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            

            bot.send_message(
                order_data['user_id'],
                f"üéâ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {product[1]}\n"
                f"üí∞ –°—É–º–º–∞: {product[3]}‚ÇΩ\n\n"
                f"üì¶ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ."
            )
            
            bot.answer_callback_query(call.id, "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            
        else:
        
            markup = types.InlineKeyboardMarkup()
            reason_btn = types.InlineKeyboardButton(
                "üìù –£–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", 
                callback_data=f"reject_reason_{order_id}"
            )
            markup.add(reason_btn)
            

            current_text = call.message.caption if call.message.caption else call.message.text
            updated_text = f"{current_text}\n\nüìä –°—Ç–∞—Ç—É—Å: ‚ùå –û–¢–ö–õ–û–ù–ï–ù (—É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É)\nüë®‚Äçüíº –û—Ç–∫–ª–æ–Ω–∏–ª: @{call.from_user.username}"
            
            try:
                if call.message.photo:
                    bot.edit_message_caption(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        caption=updated_text,
                        reply_markup=markup
                    )
                else:
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=updated_text,
                        reply_markup=markup
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            bot.answer_callback_query(call.id, "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤ —Ç–æ–ø–∏–∫–µ")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_reason_'))
def ask_reject_reason(call):
    """–ó–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫–µ"""
    try:
        order_id = int(call.data.split('_')[2])
        
        bot.answer_callback_query(
            call.id, 
            "üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", 
            show_alert=True
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—á–∏–Ω—ã: {e}")

@bot.message_handler(func=lambda message: message.reply_to_message)
def handle_reply_in_topic(message):

    try:
        replied_message = message.reply_to_message
        

        replied_text = ""
        if replied_message.caption:
            replied_text = replied_message.caption
        elif replied_message.text:
            replied_text = replied_message.text
        else:

            return
        

        if replied_text and "–ó–ê–ö–ê–ó #" in replied_text and "‚ùå –û–¢–ö–õ–û–ù–ï–ù" in replied_text:

            import re
            order_id_match = re.search(r'–ó–ê–ö–ê–ó #(\d+)', replied_text)
            if order_id_match:
                order_id = int(order_id_match.group(1))
                reason = message.text
                

                db_actions.update_order_status(order_id, f"‚ùå –û–¢–ö–õ–û–ù–ï–ù: {reason}")
                

                order_info = db_actions.get_order_by_id(order_id)
                if order_info:
                    user_data = db_actions.get_user_data(order_info['user_id'])
                    product = db_actions.get_product(order_info['product_id'])
                    

                    if user_data and product:
                        try:
                            bot.send_message(
                                order_info['user_id'],
                                f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
                                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {product[1]}\n"
                                f"üí∞ –°—É–º–º–∞: {product[3]}‚ÇΩ\n\n"
                                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                                f"üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                            )
                            

                            if product[10]:
                                db_actions.update_user_stats(order_info['user_id'], 'bs_coin', product[4])
                                bot.send_message(
                                    order_info['user_id'],
                                    f"üíé –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {product[4]} BS Coin"
                                )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                

                try:
                    bot.delete_message(message.chat.id, message.message_id)
                except:
                    pass
                

                try:
                    bot.send_message(
                        message.chat.id,
                        f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
                        reply_to_message_id=replied_message.message_id
                    )
                except:
                    pass
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    'reject_reason' in temp_data[message.from_user.id] and
    message.chat.id == temp_data[message.from_user.id]['reject_reason']['chat_id'])
def process_reject_reason_in_topic(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫–µ"""
    try:
        admin_id = message.from_user.id
        reason_data = temp_data[admin_id]['reject_reason']
        order_id = reason_data['order_id']
        reason = message.text
        
        order_info = db_actions.get_order_by_id(order_id)
        if not order_info:
            print(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        user_data = db_actions.get_user_data(order_info['user_id'])
        product = db_actions.get_product(order_info['product_id'])
        
        if not user_data or not product:
            print("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        

        db_actions.update_order_status(order_id, f"‚ùå –û–¢–ö–õ–û–ù–ï–ù: {reason}")
        

        updated_text = (
            f"üõí –ó–ê–ö–ê–ó #{order_id} ‚ùå –û–¢–ö–õ–û–ù–ï–ù\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_data['first_name']} {user_data['last_name']}\n"
            f"üîó @{user_data['username']}\n"
            f"üõçÔ∏è –¢–æ–≤–∞—Ä: {product[1]}\n"
            f"üí∞ –¶–µ–Ω–∞: {product[3]}‚ÇΩ\n\n"
            f"üì¶ –î–ê–ù–ù–´–ï –î–û–°–¢–ê–í–ö–ò:\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {order_info.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order_info.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üë§ –§–ò–û: {order_info.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üöö –°–ø–æ—Å–æ–±: {order_info.get('delivery_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reason}\n"
            f"üë®‚Äçüíº –û—Ç–∫–ª–æ–Ω–∏–ª: @{message.from_user.username}\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        try:
            if reason_data['is_photo']:
                bot.edit_message_caption(
                    chat_id=reason_data['chat_id'],
                    message_id=reason_data['message_id'],
                    caption=updated_text,
                    reply_markup=None
                )
            else:
                bot.edit_message_text(
                    chat_id=reason_data['chat_id'],
                    message_id=reason_data['message_id'],
                    text=updated_text,
                    reply_markup=None
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        try:
            bot.send_message(
                order_info['user_id'],
                f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {product[1]}\n"
                f"üí∞ –°—É–º–º–∞: {product[3]}‚ÇΩ\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            
            if product[10]:  # is_exclusive
                db_actions.update_user_stats(order_info['user_id'], 'bs_coin', product[4])
                bot.send_message(
                    order_info['user_id'],
                    f"üíé –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {product[4]} BS Coin"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        if admin_id in temp_data and 'reject_reason' in temp_data[admin_id]:
            del temp_data[admin_id]['reject_reason']
        
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except:
            pass
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    'reject_order' in temp_data[message.from_user.id])
def handle_reject_reason(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        admin_id = message.from_user.id
        order_data = temp_data[admin_id]['reject_order']
        order_id = order_data['order_id']
        
        reason = message.text
        order_info = db_actions.get_order_by_id(order_id)
        user_data = db_actions.get_user_data(order_info['user_id'])
        product = db_actions.get_product(order_info['product_id'])
        
        try:
            if order_data['is_photo']:
                msg_info = bot.get_message(order_data['chat_id'], order_data['message_id'])
                current_text = msg_info.caption
            else:
                msg_info = bot.get_message(order_data['chat_id'], order_data['message_id'])
                current_text = msg_info.text
        except:
            current_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ"
        
        updated_text = f"{current_text}\n\nüìä –°—Ç–∞—Ç—É—Å: ‚ùå –û–¢–ö–õ–û–ù–ï–ù\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\nüë®‚Äçüíº –û—Ç–∫–ª–æ–Ω–∏–ª: @{message.from_user.username}"
        
        try:
            if order_data['is_photo']:
                bot.edit_message_caption(
                    chat_id=order_data['chat_id'],
                    message_id=order_data['message_id'],
                    caption=updated_text,
                    reply_markup=None
                )
            else:
                bot.edit_message_text(
                    chat_id=order_data['chat_id'],
                    message_id=order_data['message_id'],
                    text=updated_text,
                    reply_markup=None
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        bot.send_message(
            order_info['user_id'],
            f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
            f"üõçÔ∏è –¢–æ–≤–∞—Ä: {product[1]}\n"
            f"üí∞ –°—É–º–º–∞: {product[3]}‚ÇΩ\n\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

        if product[10]:  # is_exclusive
            db_actions.update_user_stats(order_info['user_id'], 'bs_coin', product[4])
            bot.send_message(
                order_info['user_id'],
                f"üíé –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {product[4]} BS Coin"
            )
        
        bot.send_message(admin_id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω")
        
        del temp_data[admin_id]['reject_order']
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
        bot.send_message(admin_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_delivery')
def process_delivery_info(message):
    user_id = message.from_user.id
    product_id = temp_data[user_id]['order']['product_id']
    product = db_actions.get_product(product_id)
    
    try:
        delivery_data = message.text.strip().split('\n')
        
        if len(delivery_data) < 5:
            bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –í–°–ï –ø–æ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            return
        
        city = delivery_data[0].replace('–ì–æ—Ä–æ–¥:', '').replace('–≥–æ—Ä–æ–¥:', '').strip()
        address = delivery_data[1].replace('–ê–¥—Ä–µ—Å:', '').replace('–∞–¥—Ä–µ—Å:', '').strip()
        full_name = delivery_data[2].replace('–§–ò–û:', '').replace('—Ñ–∏–æ:', '').strip()
        phone = delivery_data[3].replace('–¢–µ–ª–µ—Ñ–æ–Ω:', '').replace('–Ω–æ–º–µ—Ä:', '').strip()
        delivery_type = delivery_data[4].replace('–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', '').replace('–¥–æ—Å—Ç–∞–≤–∫–∞:', '').strip()
        
        temp_data[user_id]['order'].update({
            'city': city,
            'address': address,
            'full_name': full_name,
            'phone': phone,
            'delivery_type': delivery_type,
            'step': 'ask_payment'
        })
        
        bot.send_message(
            user_id,
            "‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã!\n\n"
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –Ω–∞ —Å—É–º–º—É {product[3]}‚ÇΩ –ø–æ –Ω–æ–º–µ—Ä—É - +79123456789\n"
            "üì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\n"
            "(—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ —á–µ–∫–∞)"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@bot.message_handler(content_types=['photo'], 
                    func=lambda message: 
                    message.from_user.id in temp_data and 
                    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_payment')
def process_payment_photo(message):
    user_id = message.from_user.id
    
    try:
        payment_photo_id = message.photo[-1].file_id
        temp_data[user_id]['order']['payment_photo'] = payment_photo_id
        temp_data[user_id]['order']['step'] = 'confirm_order'
        
        product_id = temp_data[user_id]['order']['product_id']
        product = db_actions.get_product(product_id)
        
        if product:
            order_summary = (
                f"‚úÖ –í–°–ï –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ï–ù–´!\n\n"
                f"üìã –í–∞—à –∑–∞–∫–∞–∑:\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {product[1]}\n"
                f"üí∞ –¶–µ–Ω–∞: {product[3]}‚ÇΩ\n\n"
                f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞:\n"
                f"üèôÔ∏è –ì–æ—Ä–æ–¥: {temp_data[user_id]['order']['city']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {temp_data[user_id]['order']['address']}\n"
                f"üë§ –§–ò–û: {temp_data[user_id]['order']['full_name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {temp_data[user_id]['order']['phone']}\n"
                f"üöö –°–ø–æ—Å–æ–±: {temp_data[user_id]['order']['delivery_type']}\n\n"
                f"üì∏ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–æ\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ üëá"
            )
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            confirm_btn = types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
            markup.add(confirm_btn)
            
            bot.send_photo(user_id, payment_photo_id, caption="üì∏ –í–∞—à–µ —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã:")
            bot.send_message(user_id, order_summary, reply_markup=markup)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_delivery')
def process_delivery_info(message):
    user_id = message.from_user.id
    
    try:
        delivery_data = message.text.strip().split('\n')
        
        if len(delivery_data) < 5:
            bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            return
        
        city = delivery_data[0].strip()
        address = delivery_data[1].strip()
        full_name = delivery_data[2].strip()
        phone = delivery_data[3].strip()
        delivery_type = delivery_data[4].strip()
        
        valid_delivery_types = ['–ø–æ—á—Ç–∞ —Ä–æ—Å—Å–∏–∏', '—Å–¥—ç–∫', '–ø–æ—á—Ç–∞', '—Å–¥–µ–∫']
        if delivery_type.lower() not in valid_delivery_types:
            bot.send_message(user_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏' –∏–ª–∏ '–°–î–≠–ö' –∫–∞–∫ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏")
            return
        
        if delivery_type.lower() in ['–ø–æ—á—Ç–∞ —Ä–æ—Å—Å–∏–∏', '–ø–æ—á—Ç–∞']:
            delivery_type = '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏'
        else:
            delivery_type = '–°–î–≠–ö'
        
        temp_data[user_id]['order'].update({
            'city': city,
            'address': address,
            'full_name': full_name,
            'phone': phone,
            'delivery_type': delivery_type,
            'step': 'confirm_order'
        })
        
        product_id = temp_data[user_id]['order']['product_id']
        product = db_actions.get_product(product_id)
        
        if product:
            price = product[4] if product[10] else product[3]
            currency = 'BS Coin' if product[10] else '‚ÇΩ'
            
            order_summary = (
                f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑:\n\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {product[1]}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {temp_data[user_id]['order']['size']}\n"
                f"üí∞ –¶–µ–Ω–∞: {price} {currency}\n\n"
                f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞:\n"
                f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n"
                f"üìç –ê–¥—Ä–µ—Å: {address}\n"
                f"üë§ –§–ò–û: {full_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üöö –°–ø–æ—Å–æ–±: {delivery_type}\n\n"
                f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'"
            )
            
            bot.send_message(user_id, order_summary)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@bot.callback_query_handler(func=lambda call: call.data.startswith(('approve_review_', 'reject_review_')))
def handle_review_moderation(call):
    try:
        parts = call.data.split('_')
        action = parts[0]
        user_id = int(parts[2])
        
        review_key = None
        review_data = None
        
        for key in list(pending_reviews.keys()):
            if key.startswith(f"{user_id}_"):
                review_key = key
                review_data = pending_reviews[key]
                break
        
        if not review_data:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
            return
            
        if action == 'approve':
            photos_json = json.dumps(review_data.get('photos', [])) if review_data.get('photos') else None
            db_actions.add_review(
                user_id, 
                review_data['text'], 
                photos_json
            )
            
            publish_review_to_channel(user_id, review_data)
            
            bot.answer_callback_query(call.id, "‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω")
            bot.send_message(
                user_id,
                "üéâ –í–∞—à –æ—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @BridgeSide_Featback!"
            )
            
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            bot.send_message(
                user_id,
                "‚ùå –í–∞—à –æ—Ç–∑—ã–≤ –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

@bot.callback_query_handler(func=lambda call: call.data == 'start_review')
def start_review(call):
    user_id = call.from_user.id
    
    if user_id not in temp_data:
        temp_data[user_id] = {}
    
    temp_data[user_id]['step'] = 'writing_review'
    temp_data[user_id]['photos'] = []
    
    bot.send_message(
        user_id,
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤. –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞\n"
        "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('select_size_'))
def select_size(call):
    user_id = call.from_user.id
    product_id = int(call.data.split('_')[2])
    
    product = db_actions.get_product_with_variations(product_id)
    if not product:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    buttons = Bot_inline_btns()
    markup = buttons.size_selection_buttons(product['variations'])
    
    bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith(('size_', 'size_coin_')))
def handle_size_selection(call):
    user_id = call.from_user.id
    parts = call.data.split('_')
    
    is_exclusive = parts[0] == 'size_coin'
    
    if is_exclusive:
        product_id = int(parts[2])
        size = parts[3]
    else:
        product_id = int(parts[1])
        size = parts[2]
    
    print(f"DEBUG: –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä - product_id: {product_id}, size: '{size}', exclusive: {is_exclusive}")
    
    if not db_actions.check_size_availability(product_id, size):
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    if user_id not in temp_data:
        temp_data[user_id] = {}
    
    temp_data[user_id]['selected_product'] = product_id
    temp_data[user_id]['selected_size'] = size
    temp_data[user_id]['is_exclusive'] = is_exclusive
    
    product = db_actions.get_product(product_id)
    if not product:
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    buttons = Bot_inline_btns()
    
    if is_exclusive:
        markup = types.InlineKeyboardMarkup()
        buy_btn = types.InlineKeyboardButton(
            text=f"üíé –ö—É–ø–∏—Ç—å –∑–∞ {product[4]} BS Coin",
            callback_data=f"buy_coin_{product_id}_{size}"
        )
        markup.add(buy_btn)
    else:
        markup = buttons.order_now_button(product_id, size)
        print(f"DEBUG: Created order_now button for product {product_id}, size {size}")
    
    try:
        if call.message.caption:
            bot.edit_message_caption(
                chat_id=user_id,
                message_id=call.message.message_id,
                caption=call.message.caption,
                reply_markup=markup
            )
        else:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=call.message.text,
                reply_markup=markup
            )
        
        bot.answer_callback_query(call.id, f"‚úÖ –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: {size}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞")

@bot.callback_query_handler(func=lambda call: True)
def debug_all_callbacks(call):
    print(f"DEBUG CALLBACK RECEIVED: {call.data} from user {call.from_user.id}")

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ============

@bot.message_handler(content_types=['text', 'photo'])
def handle_messages(message):
    user_id = message.from_user.id
    
    if user_id in temp_data and temp_data[user_id].get('step') in ['add_photos', 'add_text']:
        handle_post_creation(message)
        return
        
    if user_id in temp_data and temp_data[user_id].get('step') == 'writing_review':
        handle_review(message)
        return
        
    if user_id in temp_data and temp_data[user_id].get('step') == 'waiting_delivery_info':
        process_delivery_info(message)
        return

def handle_post_creation(message):
    user_id = message.from_user.id
    
    if message.text == '/cancel':
        if user_id in temp_data:
            del temp_data[user_id]
        bot.send_message(user_id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
        
    if temp_data[user_id]['step'] == 'add_photos':
        if message.content_type == 'photo':
            if len(temp_data[user_id]['photos']) < 6:
                temp_data[user_id]['photos'].append(message.photo[-1].file_id)
                remaining = 6 - len(temp_data[user_id]['photos'])
                bot.send_message(user_id, f"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å: {remaining}")
            else:
                bot.send_message(user_id, "‚ùå –ú–∞–∫—Å–∏–º—É–º 6 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
        elif message.content_type == 'text':
            temp_data[user_id]['step'] = 'add_text'
            temp_data[user_id]['text'] = message.text
            ask_exclusive_status(user_id)
            
    elif temp_data[user_id]['step'] == 'add_text':
        temp_data[user_id]['text'] = message.text
        ask_exclusive_status(user_id)

def handle_review(message):
    user_id = message.from_user.id
    
    review_data = temp_data[user_id]
    
    if message.content_type == 'photo':
        if 'photos' not in review_data:
            review_data['photos'] = []
            
        if len(review_data['photos']) < 3:
            review_data['photos'].append(message.photo[-1].file_id)
            remaining = 3 - len(review_data['photos'])
            bot.send_message(user_id, f"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {remaining} —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        else:
            bot.send_message(user_id, "‚ùå –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            
    elif message.content_type == 'text':
        text = message.text.strip()
        
        if text.lower() == '/done':
            if 'text' not in review_data or not review_data['text']:
                bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞")
                return
                
            send_review_for_moderation(user_id, review_data)
            
            if user_id in temp_data:
                del temp_data[user_id]
                
            bot.send_message(user_id, "‚úÖ –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
        elif text.lower() == '/cancel':
            if user_id in temp_data:
                del temp_data[user_id]
            bot.send_message(user_id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
        else:
            review_data['text'] = text
            photos_count = len(review_data.get('photos', []))
            remaining_photos = 3 - photos_count
            
            if photos_count > 0:
                bot.send_message(
                    user_id, 
                    f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {photos_count}/3. "
                    f"–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {remaining_photos} —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
                )
            else:
                bot.send_message(
                    user_id, 
                    f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ {remaining_photos} —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
                )

def process_delivery_info(message):
    user_id = message.from_user.id
    delivery_info = message.text
    
    send_order_to_admin(user_id, delivery_info)
    
    bot.send_message(
        user_id,
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    
    if user_id in temp_data:
        del temp_data[user_id]

@bot.channel_post_handler(content_types=['text'])
def handle_channel_post(message):
    if message.reply_to_message:
        user_id = message.from_user.id
        
        db_actions.update_user_stats(user_id, 'comments', 1)
        
        check_comment_achievement(user_id)

@bot.message_handler(content_types=['text'], func=lambda message: message.is_topic_message)
def handle_topic_messages(message):
    user_id = message.from_user.id
    
    db_actions.update_user_stats(user_id, 'comments', 1)
    
    check_comment_achievement(user_id)

# ============ –ó–ê–ü–£–°–ö –ë–û–¢–ê ============

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print("–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
        traceback.print_exc()