import time
import telebot
import os
import traceback
import re
import json
import threading
import platform
import logging
import pandas as pd
import requests
import urllib.parse
import pathlib
import shutil
import time
from threading import Lock
from datetime import datetime, timedelta
from config_parser import ConfigParser
from frontend import Bot_inline_btns
from telebot import types
from backend import DbAct
from db import DB
from logging_config import setup_logging, get_logger, log_error, log_info

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = get_logger('bot')

print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
log_info(logger, "–°—Ç–∞—Ä—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

config_name = 'secrets.json'
os_type = platform.system()
work_dir = os.path.dirname(os.path.realpath(__file__))

try:
    config = ConfigParser(f'{work_dir}/{config_name}', os_type)
    config_data = config.get_config()
    mysql_config = config_data.get('mysql', {})
    host_raw = mysql_config.get('host', '127.0.0.1')
    port_raw = mysql_config.get('port', 3306)

    # –ï—Å–ª–∏ –≤ host –ø–µ—Ä–µ–¥–∞–Ω URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://localhost:8000/index.php?route=/), —Ä–∞—Å–ø–∞—Ä—Å–∏–º
    parsed_host = urllib.parse.urlparse(host_raw) if isinstance(host_raw, str) and host_raw.startswith('http') else None
    if parsed_host:
        host = parsed_host.hostname or '127.0.0.1'
        # –ü–æ—Ä—Ç MySQL –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π, —Ç.–∫. 8000 ‚Äî —ç—Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ø–æ—Ä—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        port = 3306
    else:
        host = host_raw
        # –ï—Å–ª–∏ –ø–æ –æ—à–∏–±–∫–µ —É–∫–∞–∑–∞–Ω 8000, –∑–∞–º–µ–Ω–∏–º –Ω–∞ 3306
        port = 3306 if str(port_raw) == '8000' else port_raw

    db = DB(
        host=host,
        user=mysql_config.get('user', 'root'),
        password=mysql_config.get('password', '12345678'),
        database=mysql_config.get('database', 'bridgeside_bot'),
        port=port,
        lock=Lock()
    )
    db_actions = DbAct(db, config, config_data['xlsx_path'])
    bot = telebot.TeleBot(config.get_config()['tg_api'])
except SystemExit as e:
    # –û—à–∏–±–∫–∏ –∏–∑ ConfigParser (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç secrets.json –∏–ª–∏ –ø—É—Å—Ç–æ–π tg_api)
    log_error(logger, e, "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    raise
except Exception as e:
    # –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Ä–∞–Ω–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–î)
    log_error(logger, e, "–û—à–∏–±–∫–∞ —Ä–∞–Ω–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    raise

temp_data = {}
pending_reviews = {}

def clear_temp_data(user_id):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in temp_data:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞, –æ—á–∏—Å—Ç–∏–º –∏—Ö
        photos = temp_data[user_id].get('photos', [])
        if photos:
            cleanup_local_files(photos)
        del temp_data[user_id]
channels = [
    '@BridgeSide_Featback',
    '@BridgeSide_LifeStyle', 
    '@BridgeSide_Store'
]

# ============ –°–ò–°–¢–ï–ú–ê –ê–ß–ò–í–û–ö ============

ACHIEVEMENTS = {
    # –õ–∏–Ω–∏—è "–ú–û–°–¢" ‚Äî —Å—Ç–∏–ª—å + —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    'pilot_bridge': {
        'name': 'üõ∏ –ü–∏–ª–æ—Ç –ú–æ—Å—Ç–∞',
        'description': '–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞',
        'category': '–ú–û–°–¢',
        'bs_coin_reward': 500,
        'discount_bonus': 0,
        'condition': 'first_purchase'
    },
    'style_engineer': {
        'name': '‚öôÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä –°—Ç–∏–ª—è',
        'description': '–õ—É–∫: 3+ –≤–µ—â–∏ —Ä–∞–∑–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–∫–∞–∑–µ',
        'category': '–ú–û–°–¢',
        'bs_coin_reward': 1000,
        'discount_bonus': 0,
        'condition': 'multi_brand_order'
    },
    
    # –õ–∏–Ω–∏—è "–ë–ï–†–ï–ì" ‚Äî –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
    'pioneer': {
        'name': 'üí° –ü–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü',
        'description': '–ü–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ',
        'category': '–ë–ï–†–ï–ì',
        'bs_coin_reward': 100,
        'discount_bonus': 0,
        'condition': 'first_review_with_photo'
    },
    'cornerstone': {
        'name': 'üß± –ö—Ä–∞–µ—É–≥–æ–ª—å–Ω—ã–π –ö–∞–º–µ–Ω—å',
        'description': '–£—Ä–æ–≤–µ–Ω—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ 5 "–õ–µ–≥–µ–Ω–¥–∞"',
        'category': '–ë–ï–†–ï–ì',
        'bs_coin_reward': 1000,
        'discount_bonus': 10,
        'condition': 'loyalty_level_5'
    },
    
    # –õ–∏–Ω–∏—è "–ö–û–õ–õ–ï–ö–¢–ò–í" ‚Äî –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    'connector': {
        'name': 'üîå –°–æ–µ–¥–∏–Ω—è—é—â–∏–π',
        'description': '–ü—Ä–∏–≤—ë–ª 3 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Ö—Å—è –¥—Ä—É–≥–∞ –ø–æ —Ä–µ—Ñ-—Å—Å—ã–ª–∫–µ',
        'category': '–ö–û–õ–õ–ï–ö–¢–ò–í',
        'bs_coin_reward': 300,
        'discount_bonus': 0,
        'condition': 'three_referrals'
    }
}

def check_achievement_conditions(user_id, condition_type, **kwargs):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—á–∏–≤–æ–∫"""
    try:
        for achievement_code, achievement_data in ACHIEVEMENTS.items():
            if achievement_data['condition'] == condition_type:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ –∞—á–∏–≤–∫–∞
                if db_actions.get_achievement_by_code(user_id, achievement_code):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
                if check_achievement_condition(user_id, condition_type, achievement_code, **kwargs):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞—á–∏–≤–∫—É
                    if db_actions.add_achievement(user_id, achievement_code, achievement_data):
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        notify_achievement_earned(user_id, achievement_data)
                        return True
    except Exception as e:
        log_error(logger, e, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—á–∏–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return False

def check_achievement_condition(user_id, condition_type, achievement_code, **kwargs):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –∞—á–∏–≤–∫–∏"""
    try:
        if condition_type == 'first_purchase':
            # –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞
            orders = db_actions.get_user_orders(user_id)
            return len(orders) == 1
            
        elif condition_type == 'multi_brand_order':
            # 3+ –≤–µ—â–∏ —Ä–∞–∑–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–∫–∞–∑–µ
            # –≠—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤
            return False  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            
        elif condition_type == 'first_review_with_photo':
            # –ü–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ
            reviews = db_actions.get_user_reviews(user_id)
            for review in reviews:
                if review.get('photos') and len(review['photos']) > 0:
                    return True
            return False
            
        elif condition_type == 'loyalty_level_5':
            # –£—Ä–æ–≤–µ–Ω—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ 5 "–õ–µ–≥–µ–Ω–¥–∞"
            # –≠—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            return False  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            
        elif condition_type == 'three_referrals':
            # 3 —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            referral_count = db_actions.get_referral_stats(user_id)
            return referral_count >= 3
            
    except Exception as e:
        log_error(logger, e, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è –∞—á–∏–≤–∫–∏ {achievement_code}")
    return False

def notify_achievement_earned(user_id, achievement_data):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—á–∏–≤–∫–∏"""
    try:
        message = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∞—á–∏–≤–∫—É!\n\n"
            f"{achievement_data['name']}\n"
            f"{achievement_data['description']}\n\n"
        )
        
        if achievement_data['bs_coin_reward'] > 0:
            message += f"üí∞ +{achievement_data['bs_coin_reward']} BS Coin\n"
        
        if achievement_data['discount_bonus'] > 0:
            message += f"üéØ +{achievement_data['discount_bonus']}% –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞\n"
        
        message += f"\nüèÜ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {achievement_data['category']}"
        
        bot.send_message(user_id, message)
        
    except Exception as e:
        log_error(logger, e, f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∞—á–∏–≤–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# ============ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –Ø–ù–î–ï–ö–°.–î–ò–°–ö ============

YANDEX_DISK_BASE_PATH = "BridgeSideBot/Boots"
YANDEX_OAUTH_URL = "https://oauth.yandex.ru/authorize"
YANDEX_TOKEN_URL = "https://oauth.yandex.ru/token"

def get_yadisk_tokens():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    cfg = config.get_config()
    yadisk_config = cfg.get('yadisk', {})
    
    client_id = yadisk_config.get('client_id')
    client_secret = yadisk_config.get('client_secret')
    access_token = yadisk_config.get('access_token')
    refresh_token = yadisk_config.get('refresh_token')
    expires_at = yadisk_config.get('expires_at', 0)
    
    if not client_id or not client_secret:
        raise RuntimeError("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã client_id –∏ client_secret –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Ç–æ–∫–µ–Ω
    if access_token and expires_at > time.time():
        return access_token
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å refresh_token, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
    if refresh_token:
        try:
            new_tokens = refresh_yadisk_token(client_id, client_secret, refresh_token)
            config.update_yadisk_tokens(
                new_tokens['access_token'],
                new_tokens['refresh_token'],
                new_tokens['expires_in']
            )
            return new_tokens['access_token']
        except Exception as e:
            log_error(logger, e, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å
    raise RuntimeError("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /yadisk_auth")

def refresh_yadisk_token(client_id, client_secret, refresh_token):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    data = {
        'grant_type': 'refresh_token',
        'refresh_token': refresh_token,
        'client_id': client_id,
        'client_secret': client_secret
    }
    
    response = requests.post(YANDEX_TOKEN_URL, data=data, timeout=30)
    response.raise_for_status()
    return response.json()

def yadisk_headers(token: str) -> dict:
    return {"Authorization": f"OAuth {token}"}

def yadisk_list_images(product_id: str) -> list:
    token = get_yadisk_tokens()

    # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ: yadisk.base_path
    try:
        cfg = config.get_config()
        base_path = (cfg.get('yadisk', {}) or {}).get('base_path') or YANDEX_DISK_BASE_PATH
    except Exception:
        base_path = YANDEX_DISK_BASE_PATH

    # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: base/<id> –∏ base/Boots/<id>
    candidate_folders = [f"{base_path}/{product_id}"]
    if "/Boots" not in base_path:
        candidate_folders.append(f"{base_path}/Boots/{product_id}")
    else:
        # –í–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ "Boots"
        candidate_folders.append(f"{base_path.replace('/Boots', '')}/{product_id}")

    seen = set()
    candidate_folders = [p for p in candidate_folders if not (p in seen or seen.add(p))]

    images_prefixed = []
    images_all = []

    for folder in candidate_folders:
        params = {
            "path": folder,
            "limit": 1000,
            "fields": "name,_embedded.items.name,_embedded.items.path,_embedded.items.type,_embedded.items.media_type",
            "_embedded.limit": 1000,
        }
        resp = requests.get(
            "https://cloud-api.yandex.net/v1/disk/resources",
            headers=yadisk_headers(token), params=params, timeout=30
        )
        if resp.status_code == 404:
            # –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
            continue
        resp.raise_for_status()
        data = resp.json()
        items = (data.get("_embedded") or {}).get("items", [])

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–≥–æ forbot_*, –∑–∞—Ç–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for it in items:
            if it.get("type") != "file":
                continue
            if not (it.get("media_type") or "").startswith("image"):
                continue
            name = str(it.get("name", ""))
            path = it.get("path")
            if not path:
                continue
            if name.startswith("forbot_"):
                images_prefixed.append(path)
            images_all.append(path)

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —á—Ç–æ-—Ç–æ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∏—Å–∫–∞—Ç—å –¥–∞–ª—å—à–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π)
        if images_prefixed or images_all:
            break

    # –û—Ç–¥–∞—ë–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–π–ª–∞–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º forbot_, –∏–Ω–∞—á–µ –ª—é–±—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return images_prefixed if images_prefixed else images_all

def yadisk_get_download_href(file_path: str) -> str:
    token = get_yadisk_tokens()
    r = requests.get("https://cloud-api.yandex.net/v1/disk/resources/download",
                     headers=yadisk_headers(token), params={"path": file_path}, timeout=30)
    r.raise_for_status()
    return r.json()["href"]

def download_photos_from_yadisk(product_id: str) -> list:
    dest_dir = os.path.join("/tmp", "bsbot", str(product_id))
    pathlib.Path(dest_dir).mkdir(parents=True, exist_ok=True)
    local_files: list[str] = []
    
    try:
        image_paths = yadisk_list_images(product_id)
        if not image_paths:
            log_info(logger, f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
            return []
            
        for ypath in image_paths:
            try:
                href = yadisk_get_download_href(ypath)
                with requests.get(href, headers=yadisk_headers(get_yadisk_tokens()), stream=True, timeout=30) as resp:
                    resp.raise_for_status()
                    filename = os.path.basename(urllib.parse.urlparse(ypath).path)
                    local_path = os.path.join(dest_dir, filename)
                    with open(local_path, "wb") as f:
                        shutil.copyfileobj(resp.raw, f)
                    local_files.append(local_path)
                    log_info(logger, f"–°–∫–∞—á–∞–Ω–æ —Ñ–æ—Ç–æ: {filename}")
            except Exception as e:
                log_error(logger, e, f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ {ypath}")
                continue
                
    except Exception as e:
        log_error(logger, e, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
        return []
        
    return local_files

def cleanup_local_files(paths: list) -> None:
    for p in paths:
        try:
            os.remove(p)
        except FileNotFoundError:
            pass

# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

def get_product_field(product, field_name, default=None):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å MySQL"""
    if isinstance(product, dict):
        return product.get(field_name, default)
    elif isinstance(product, (list, tuple)):
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        field_mapping = {
            'product_id': 0,
            'name': 1,
            'description': 2,
            'price': 3,
            'price_yuan': 4,
            'coin_price': 5,
            'photo_id': 6,
            'category': 7,
            'topic': 8,
            'is_available': 9,
            'is_exclusive': 10
        }
        index = field_mapping.get(field_name, -1)
        return product[index] if 0 <= index < len(product) else default
    return default

def get_product_price(product):
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞"""
    return get_product_field(product, 'price', 0), '‚ÇΩ'

def get_product_name(product):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    return get_product_field(product, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

def show_product(user_id, product_id):
    product = db_actions.get_product(product_id)
    if not product:
        bot.send_message(user_id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    variations = db_actions.get_product_variations(product_id)
    available_sizes = [v for v in variations if v['quantity'] > 0]
    
    buttons = Bot_inline_btns()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    product_name = get_product_field(product, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    description_full = get_product_field(product, 'description_full', '')
    description_old = get_product_field(product, 'description', '')
    table_id = get_product_field(product, 'table_id', '')
    # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º table_id, –∞ –ø—Ä–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ‚Äî model_id –∏–∑ –≤–∞—Ä–∏–∞—Ü–∏–π.
    # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π product_id –∫–∞–∫ –∞—Ä—Ç–∏–∫—É–ª.
    first_model_id_for_display = None
    try:
        first_model_id_for_display = next((v.get('model_id') for v in variations if v.get('model_id')), None)
    except Exception:
        pass
    # –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∞–¥–º–∏–Ω–æ–º –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞
    admin_entered_table_id = temp_data.get(user_id, {}).get('table_id') if user_id in temp_data else None
    article_to_show = (str(table_id).strip() if table_id and str(table_id).strip() else None) 
    if not article_to_show and admin_entered_table_id and str(admin_entered_table_id).strip():
        article_to_show = str(admin_entered_table_id).strip()
    if not article_to_show and first_model_id_for_display and str(first_model_id_for_display).strip():
        article_to_show = str(first_model_id_for_display).strip()
    keywords = get_product_field(product, 'keywords', '')
    price = get_product_field(product, 'price', 0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    caption_parts = []
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    caption_parts.append(f"üõçÔ∏è *{product_name}*")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–æ–º—É –ø–æ–ª—é, –µ—Å–ª–∏ –ø—É—Å—Ç–æ–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ)
    description_to_show = description_full if description_full else description_old
    if description_to_show and description_to_show.strip():
        # –£–±–∏—Ä–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        description_clean = description_to_show
        if '\n' in description_clean:
            lines = description_clean.split('\n')
            # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            description_clean = '\n'.join([line for line in lines if not line.strip().startswith('#')]).strip()
        
        if description_clean:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ blockquote
            quoted_description = '\n'.join([f"> {line}" for line in description_clean.split('\n')])
            caption_parts.append(quoted_description)
    
    # –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
    if article_to_show:
        caption_parts.append(f"üÜî –ê—Ä—Ç–∏–∫—É–ª: `{article_to_show}`")
    
    # –¶–µ–Ω–∞
    if price > 0:
        caption_parts.append(f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ")
    else:
        caption_parts.append("üí∞ –¶–µ–Ω–∞: –£—Ç–æ—á–Ω—è–π—Ç–µ")
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    if available_sizes:
        caption_parts.append("üìè –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:")
    for variation in available_sizes:
            caption_parts.append(f"‚Ä¢ {variation['size']} - {variation['quantity']} —à—Ç.")
    
    # –•–µ—à—Ç–µ–≥–∏ (–∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ keywords)
    hashtags_to_show = ""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    if description_to_show and '\n' in description_to_show:
        lines = description_to_show.split('\n')
        hashtag_lines = [line.strip() for line in lines if line.strip().startswith('#')]
        if hashtag_lines:
            hashtags_to_show = ' '.join(hashtag_lines)
    
    # –ï—Å–ª–∏ —Ö–µ—à—Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ keywords
    if not hashtags_to_show and keywords and keywords.strip():
        hashtags_to_show = keywords.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω–µ—Ü
    if hashtags_to_show:
        caption_parts.append(f"\n{hashtags_to_show}")
    
    caption = "\n\n".join(caption_parts)
    
    if available_sizes:
        markup = buttons.size_selection_buttons(available_sizes)
    else:
        markup = None
        
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞, –ø—Ä–æ–±—É—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:
    # 1) table_id (–∞—Ä—Ç–∏–∫—É–ª), 2) model_id –∏–∑ –≤–∞—Ä–∏–∞—Ü–∏–π, 3) —á–∏—Å–ª–æ–≤–æ–π product_id
    photos = []
    candidate_ids = []
    if article_to_show:
        candidate_ids.append(article_to_show)
    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π model_id –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        first_model_id = next((v.get('model_id') for v in variations if v.get('model_id')), None)
        if first_model_id and str(first_model_id).strip() not in candidate_ids:
            candidate_ids.append(str(first_model_id).strip())
    except Exception:
        pass
    # –§–æ–ª–±—ç–∫ –Ω–∞ product_id
    if str(product_id) not in candidate_ids:
        candidate_ids.append(str(product_id))

    used_identifier = None
    for candidate in candidate_ids:
        try:
            photos = download_photos_from_yadisk(candidate)
            if photos:
                used_identifier = candidate
                log_info(logger, f"–ù–∞–π–¥–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É '{candidate}'")
                break
            else:
                log_info(logger, f"–ù–µ—Ç —Ñ–æ—Ç–æ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É '{candidate}'")
        except Exception as e:
            log_error(logger, e, f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –¥–ª—è '{candidate}'")
            photos = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é
    if photos:
        first_file = None
        try:
            first_path = photos[0]
            first_file = open(first_path, 'rb')
            bot.send_photo(
                user_id,
                first_file,
                caption=caption,
                reply_markup=markup,
                parse_mode="Markdown"
            )
            return
        except Exception as e:
            log_error(logger, e, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
        finally:
            try:
                if first_file:
                    first_file.close()
            except Exception:
                pass
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            cleanup_local_files(photos)
    
    # –§–æ–ª–±—ç–∫: –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å photo_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    photo_id = get_product_field(product, 'photo_id')
    if photo_id and photo_id != 'None' and photo_id != 'invalid':
        try:
            bot.send_photo(
                user_id,
                photo_id,
                caption=caption,
                reply_markup=markup,
                parse_mode="Markdown"
            )
            return
        except Exception as e:
            log_error(logger, e, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏–∑ –ë–î: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    bot.send_message(
        user_id,
        caption,
        reply_markup=markup,
        parse_mode="Markdown"
    )

def check_and_fix_photos():
    try:
        products = db_actions.get_all_products()
        for product in products:
            product_id, name, _, _, _, photo_id, _, _, _, _, _ = product
            if photo_id:
                try:
                    file_info = bot.get_file(photo_id)
                    log_info(logger, f"Photo {photo_id} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {name} –¥–æ—Å—Ç—É–ø–µ–Ω")
                except Exception as e:
                    log_error(logger, e, f"Photo {photo_id} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    db_actions.update_product_photo(product_id, None)
        log_info(logger, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ç–æ")

def handle_daily_bonus(user_id):
    user_data = db_actions.get_user_data(user_id)
    if not user_data:
        return False
    
    last_active = user_data.get('last_active')
    now = datetime.now()
    
    if isinstance(last_active, str):
        try:
            last_active = datetime.strptime(last_active, "%Y-%m-%d %H:%M:%S.%f")
        except ValueError:
            last_active = None
    
    if not last_active or (now - last_active) > timedelta(hours=24):
        db_actions.update_user_stats(user_id, 'bs_coin', 10)
        db_actions.update_last_active(user_id, now)
        return True
    return False

def check_comment_achievement(user_id):
    user_data = db_actions.get_user_data(user_id)
    if user_data and user_data['comments'] >= 10:
        if "active_commentator" not in user_data['achievements']:
            db_actions.add_achievement(user_id, "active_commentator")
            db_actions.update_user_stats(user_id, 'discount', 1)
            bot.send_message(
                user_id,
                "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä¬ª! –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 1%"
            )


def process_products_file(message):
    user_id = message.from_user.id
    if not message.document:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª")
        return
        
    try:
        bot.send_message(user_id, "üîÑ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã...")
        db_actions.clear_all_products()
        
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        filename = f"products_{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}.xlsx"
        with open(filename, 'wb') as f:
            f.write(downloaded_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏—Å—Ç—ã "–≠–ö–û–ù–û–ú–ò–ö–ê" –∏ "–ö–õ–Æ–ß–ò"
        excel_file = pd.ExcelFile(filename)
        sheet_names = excel_file.sheet_names
        
        if '–≠–ö–û–ù–û–ú–ò–ö–ê' in sheet_names and '–ö–õ–Æ–ß–ò' in sheet_names:
            # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –ª–∏—Å—Ç–∞–º–∏
            bot.send_message(user_id, "üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ —Å –ª–∏—Å—Ç–∞–º–∏ '–≠–ö–û–ù–û–ú–ò–ö–ê' –∏ '–ö–õ–Æ–ß–ò'")
            
            economics_df = pd.read_excel(filename, sheet_name='–≠–ö–û–ù–û–ú–ò–ö–ê')
            keys_df = pd.read_excel(filename, sheet_name='–ö–õ–Æ–ß–ò')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –ª–∏—Å—Ç–µ "–≠–ö–û–ù–û–ú–ò–ö–ê"
            required_economics_columns = ['–ú–æ–¥–µ–ª—å', 'ID –º–æ–¥–µ–ª–∏', '–†–∞–∑–º–µ—Ä', '–¶–µ–Ω–∞ Y', '–ö–æ–ª.', '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏', '–¶–≤–µ—Ç', '–°—Å—ã–ª–∫–∏']
            missing_economics_columns = [col for col in required_economics_columns if col not in economics_df.columns]
            
            if missing_economics_columns:
                bot.send_message(user_id, f"‚ùå –í –ª–∏—Å—Ç–µ '–≠–ö–û–ù–û–ú–ò–ö–ê' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_economics_columns)}")
                os.remove(filename)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –ª–∏—Å—Ç–µ "–ö–õ–Æ–ß–ò"
            required_keys_columns = ['ID', '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ Telegram', '#–•–µ—à—Ç–µ–≥–∏']
            missing_keys_columns = [col for col in required_keys_columns if col not in keys_df.columns]
            
            if missing_keys_columns:
                bot.send_message(user_id, f"‚ùå –í –ª–∏—Å—Ç–µ '–ö–õ–Æ–ß–ò' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_keys_columns)}")
                os.remove(filename)
                return
            
            success_count = db_actions.import_products_from_excel_new_format(economics_df, keys_df)
            
            total_products = len(economics_df['–ú–æ–¥–µ–ª—å'].unique())
            total_variations = len(economics_df)
            zero_quantity = len(economics_df[economics_df['–ö–æ–ª.'].fillna(0) == 0])
            
            stats_msg = (
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {total_products}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–π: {total_variations}\n"
                f"‚Ä¢ –° –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º: {zero_quantity}\n"
                f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {economics_df['–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏'].min():.0f} - {economics_df['–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏'].max():.0f}‚ÇΩ\n\n"
                f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ —Ö–µ—à—Ç–µ–≥–∞–º–∏"
            )
            
            bot.send_message(user_id, stats_msg)
            
            sample_msg = "üìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 5 —Ç–æ–≤–∞—Ä–æ–≤:\n"
            for i, (_, row) in enumerate(economics_df.head().iterrows()):
                sample_msg += f"{i+1}. {row['–ú–æ–¥–µ–ª—å']} - {row['–†–∞–∑–º–µ—Ä']} - {row['–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏']}‚ÇΩ\n"
            
            bot.send_message(user_id, sample_msg)
            return
            
        else:
            # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –æ–¥–Ω–∏–º –ª–∏—Å—Ç–æ–º
            bot.send_message(user_id, "üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞")
        
        df = pd.read_excel(filename)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (—á–∞—Å—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤)
        def _normalize_column_name(name):
            return str(name).strip().lower()

        column_synonyms = {
            'id –º–æ–¥–µ–ª–∏': 'ID –ú–æ–¥–µ–ª–∏',
            'id –º–æ–¥–µ–ª–∏.': 'ID –ú–æ–¥–µ–ª–∏',
            '–∫–æ–ª.': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            '—Å—Å—ã–ª–∫–∏': '–°—Å—ã–ª–∫–∞',
            '—Å—Å—ã–ª–∫–∞': '–°—Å—ã–ª–∫–∞',
            '—Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏': '–¶–µ–Ω–∞',
            '—Ü–µ–Ω–∞': '–¶–µ–Ω–∞',
            '—Ü–µ–Ω–∞ y': '–¶–µ–Ω–∞ Y',
            '–º–æ–¥–µ–ª—å': '–ú–æ–¥–µ–ª—å',
            '—Ä–∞–∑–º–µ—Ä': '–†–∞–∑–º–µ—Ä',
        }

        normalized_columns = {}
        for original_col in list(df.columns):
            key = _normalize_column_name(original_col)
            if key in column_synonyms:
                target = column_synonyms[key]
                if original_col != target and target not in df.columns:
                    df.rename(columns={original_col: target}, inplace=True)
                normalized_columns[target] = True
            else:
                # –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è, –µ—Å–ª–∏ –Ω–µ—Ç —Å–∏–Ω–æ–Ω–∏–º–∞
                normalized_columns[original_col] = True

        required_columns = ['–ú–æ–¥–µ–ª—å', 'ID –ú–æ–¥–µ–ª–∏', '–†–∞–∑–º–µ—Ä', '–¶–µ–Ω–∞ Y', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞', '–°—Å—ã–ª–∫–∞']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            bot.send_message(user_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
            os.remove(filename)
            return
        
        def calculate_price(row):
            try:
                price_yuan = row['–¶–µ–Ω–∞ Y']
                if pd.isna(price_yuan) or price_yuan == 0:
                    return 0
            
                if isinstance(row['–¶–µ–Ω–∞'], (int, float)) and not pd.isna(row['–¶–µ–Ω–∞']):
                    return float(row['–¶–µ–Ω–∞'])
                
                if isinstance(row['–¶–µ–Ω–∞'], str) and row['–¶–µ–Ω–∞'].startswith('='):
                    return float(price_yuan) * 12
                
                return float(row['–¶–µ–Ω–∞'])
            except:
                return float(price_yuan) * 12 
        
        df['–¶–µ–Ω–∞'] = df.apply(calculate_price, axis=1)
        
        df['ID –ú–æ–¥–µ–ª–∏'] = df['ID –ú–æ–¥–µ–ª–∏'].astype(str).apply(lambda x: x.split('.')[0] if '.' in x else x).str.strip()
        
        def safe_convert(value, default=0):
            if value is None or value == '' or pd.isna(value):
                return default
            try:
                if isinstance(value, str):
                    value = value.strip().replace(',', '.')
                    if not value:
                        return default
                return float(value)
            except (ValueError, TypeError):
                return default
        
        df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].apply(lambda x: int(safe_convert(x, 0)))
        df['–¶–µ–Ω–∞ Y'] = df['–¶–µ–Ω–∞ Y'].apply(lambda x: safe_convert(x, 0))
        
        df['–ú–æ–¥–µ–ª—å'] = df['–ú–æ–¥–µ–ª—å'].fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').astype(str)
        df['–†–∞–∑–º–µ—Ä'] = df['–†–∞–∑–º–µ—Ä'].fillna('').astype(str)
        df['–°—Å—ã–ª–∫–∞'] = df['–°—Å—ã–ª–∫–∞'].fillna('').astype(str)
        
        if df['–¶–µ–Ω–∞'].isnull().all() or (df['–¶–µ–Ω–∞'] == 0).all():
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ü–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
            os.remove(filename)
            return
    
        success_count = db_actions.import_products_from_excel(df)
        
        total_products = len(df['–ú–æ–¥–µ–ª—å'].unique())
        total_variations = len(df)
        zero_quantity = len(df[df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] == 0])
        
        stats_msg = (
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {total_products}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–π: {total_variations}\n"
            f"‚Ä¢ –° –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º: {zero_quantity}\n"
                f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {df['–¶–µ–Ω–∞'].min():.0f} - {df['–¶–µ–Ω–∞'].max():.0f}‚ÇΩ\n\n"
                f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞"
        )
        
        bot.send_message(user_id, stats_msg)
        
        sample_msg = "üìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 5 —Ç–æ–≤–∞—Ä–æ–≤:\n"
        for i, (_, row) in enumerate(df.head().iterrows()):
            sample_msg += f"{i+1}. {row['–ú–æ–¥–µ–ª—å']} - {row['–†–∞–∑–º–µ—Ä']} - {row['–¶–µ–Ω–∞']}‚ÇΩ\n"
        
        bot.send_message(user_id, sample_msg)
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
        log_error(logger, e, "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        bot.send_message(user_id, error_msg)
    finally:
        if 'filename' in locals() and os.path.exists(filename):
            os.remove(filename)

def create_review_topic(user_data):
    """–°–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ –¥–ª—è –æ—Ç–∑—ã–≤–∞ –≤ –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–æ–≤"""
    try:
        admin_group_id = -1002585832553
        topic_name = f"{user_data['first_name']} {user_data['last_name']} –û–¢–ó–´–í"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫
        result = bot.create_forum_topic(
            chat_id=admin_group_id,
            name=topic_name
        )
        
        if result and result.message_thread_id:
            return result.message_thread_id
        else:
            log_error(logger, None, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ –¥–ª—è –æ—Ç–∑—ã–≤–∞: {topic_name}")
            return None
            
    except Exception as e:
        log_error(logger, e, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞: {topic_name}")
        return None

def send_review_for_moderation(user_id, review_data):
    try:
        user_data = db_actions.get_user_data(user_id)
        admin_group_id = -1002585832553
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫ –¥–ª—è –æ—Ç–∑—ã–≤–∞
        topic_id = create_review_topic(user_data)
        if not topic_id:
            log_error(logger, None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ –¥–ª—è –æ—Ç–∑—ã–≤–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç")
        
        caption = (
            f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['first_name']} {user_data['last_name']}\n"
            f"üîó @{user_data['username']}\n\n"
            f"üìÑ –¢–µ–∫—Å—Ç: {review_data['text'][:500]}...\n\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        markup = types.InlineKeyboardMarkup()
        approve_btn = types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_review_{user_id}")
        reject_btn = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_review_{user_id}")
        markup.add(approve_btn, reject_btn)
        
        review_id = f"{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}"
        pending_reviews[review_id] = review_data
        
        if review_data.get('photos'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            media = []
            
            # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å caption –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            media.append(types.InputMediaPhoto(
                review_data['photos'][0], 
                caption=caption
            ))
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ caption
            for photo in review_data['photos'][1:]:
                media.append(types.InputMediaPhoto(photo))
            
            try:
                send_params = {"chat_id": admin_group_id, "media": media}
                if topic_id:
                    send_params["message_thread_id"] = topic_id
                    
                messages = bot.send_media_group(**send_params)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
                pending_reviews[review_id]['message_id'] = messages[0].message_id
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                button_params = {
                    "chat_id": admin_group_id,
                    "text": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    "reply_markup": markup
                }
                if topic_id:
                    button_params["message_thread_id"] = topic_id
                    
                bot.send_message(**button_params)
                
            except Exception as e:
                log_error(logger, e, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –æ—Ç–∑—ã–≤–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                photo_params = {
                    "chat_id": admin_group_id,
                    "photo": review_data['photos'][0],
                    "caption": caption,
                    "reply_markup": markup
                }
                if topic_id:
                    photo_params["message_thread_id"] = topic_id
                msg_one = bot.send_photo(**photo_params)
                pending_reviews[review_id]['message_id'] = msg_one.message_id
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
            for photo in review_data['photos'][1:]:
                    single_photo_params = {
                        "chat_id": admin_group_id,
                        "photo": photo
                    }
                    if topic_id:
                        single_photo_params["message_thread_id"] = topic_id
                    bot.send_photo(**single_photo_params)
        else:
            text_params = {
                "chat_id": admin_group_id,
                "text": caption,
                "reply_markup": markup
            }
            if topic_id:
                text_params["message_thread_id"] = topic_id
                
            message = bot.send_message(**text_params)
            pending_reviews[review_id]['message_id'] = message.message_id
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")

def publish_review_to_channel(user_id, review_data):
    try:
        user_data = db_actions.get_user_data(user_id)
        channel_id = "@BridgeSide_Featback"
        
        caption = (
            f"‚≠êÔ∏è –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤\n\n"
            f"üë§ –û—Ç: {user_data['first_name']} {user_data['last_name']}\n\n"
            f"üìù {review_data['text']}"
        )
        
        if review_data.get('photos'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            media = []
            
            # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å caption
            media.append(types.InputMediaPhoto(
                review_data['photos'][0], 
                caption=caption
            ))
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ caption
            for photo in review_data['photos'][1:]:
                media.append(types.InputMediaPhoto(photo))
            
            try:
                bot.send_media_group(
                    chat_id=channel_id,
                    media=media
                )
            except Exception as e:
                log_error(logger, e, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å caption
                bot.send_photo(
                    chat_id=channel_id,
                    photo=review_data['photos'][0],
                    caption=caption
                )
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
                for photo in review_data['photos'][1:]:
                    bot.send_photo(
                        chat_id=channel_id,
                        photo=photo
                    )
        else:
            bot.send_message(
                chat_id=channel_id,
                text=caption
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")

def parse_delivery_info(text):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    lines = text.strip().split('\n')
    delivery_info = {
        'city': '',
        'address': '',
        'full_name': '',
        'phone': '',
        'delivery_type': ''
    }
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        if '–≥–æ—Ä–æ–¥:' in line.lower():
            delivery_info['city'] = line.split(':', 1)[1].strip() if ':' in line else line
        elif '–∞–¥—Ä–µ—Å:' in line.lower():
            delivery_info['address'] = line.split(':', 1)[1].strip() if ':' in line else line
        elif '—Ñ–∏–æ:' in line.lower() or '—Ñ–ò–û:' in line.lower():
            delivery_info['full_name'] = line.split(':', 1)[1].strip() if ':' in line else line
        elif '—Ç–µ–ª–µ—Ñ–æ–Ω:' in line.lower():
            delivery_info['phone'] = line.split(':', 1)[1].strip() if ':' in line else line
        elif '–¥–æ—Å—Ç–∞–≤–∫–∞:' in line.lower():
            delivery_info['delivery_type'] = line.split(':', 1)[1].strip() if ':' in line else line
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
            if re.match(r'^\+?[78]?[ -]?\(?\d{3}\)?[ -]?\d{3}[ -]?\d{2}[ -]?\d{2}$', line.replace(' ', '')):
                delivery_info['phone'] = line
            elif not delivery_info['city'] and len(line) < 50:
                delivery_info['city'] = line
            elif not delivery_info['address'] and len(line) > 10:
                delivery_info['address'] = line
            elif not delivery_info['full_name'] and len(line.split()) >= 2:
                delivery_info['full_name'] = line
            elif not delivery_info['delivery_type'] and any(x in line.lower() for x in ['–ø–æ—á—Ç–∞', '—Å–¥–µ–∫', '–¥–æ—Å—Ç–∞–≤–∫–∞']):
                delivery_info['delivery_type'] = line
    
    return delivery_info

def notify_admins_about_order(user_id, product, order_data, order_id, payment_photo_id=None):
    try:
        # –î–û–ë–ê–í–¨–¢–ï –ü–†–û–í–ï–†–ö–£
        print(f"DEBUG notify_admins_about_order - order_data keys: {list(order_data.keys())}")
        
        user_data = db_actions.get_user_data(user_id)
        config_data = config.get_config()
        
        topic_id = create_user_order_topic(user_data)
        
        price, currency = get_product_price(product)
        order_text = (
            f"üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_id}\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_data['first_name']} {user_data['last_name']}\n"
            f"üîó {user_data['username']}\n"
            f"üÜî ID: {user_id}\n\n"
            f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product)}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {order_data.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} {currency}\n"
            f"üéØ –¢–∏–ø: {'–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π (BS Coin)' if get_product_field(product, 'is_exclusive') else '–û–±—ã—á–Ω—ã–π'}\n\n"
            f"üì¶ –î–ê–ù–ù–´–ï –î–û–°–¢–ê–í–ö–ò:\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {order_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üë§ –§–ò–û: {order_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üöö –°–ø–æ—Å–æ–±: {order_data.get('delivery_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"üí≥ –û–ü–õ–ê–¢–ê: {'–ü—Ä–∏–ª–æ–∂–µ–Ω–∞ ‚úÖ' if payment_photo_id else '–ù–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∞ ‚ùå'}\n\n"
            f"üïí –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: ‚è≥ –û–ñ–ò–î–ê–ï–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø"
        )
        
        markup = types.InlineKeyboardMarkup()
        btn_approve = types.InlineKeyboardButton(
            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", 
            callback_data=f"approve_order_{order_id}"
        )
        btn_reject = types.InlineKeyboardButton(
            "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", 
            callback_data=f"reject_order_{order_id}"
        )
        markup.add(btn_approve, btn_reject)
        
        try:
            if payment_photo_id:
                message = bot.send_photo(
                    chat_id=config_data['admin_group_id'],
                    photo=payment_photo_id,
                    caption=order_text,
                    message_thread_id=topic_id,
                    reply_markup=markup 
                )
            else:
                message = bot.send_message(
                    chat_id=config_data['admin_group_id'],
                    text=order_text,
                    message_thread_id=topic_id,
                    reply_markup=markup
                )
            
            db_actions.save_order_message_id(order_id, message.message_id, topic_id)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–æ–ø–∏–∫: {e}")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ notify_admins_about_order: {e}")
        import traceback
        traceback.print_exc()

def create_user_order_topic(user_data):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–ø–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID"""
    try:
        config_data = config.get_config()
        group_id = config_data['admin_group_id']
        
        topic_name = f"{user_data['first_name']} {user_data['last_name']} - –ó–ê–ö–ê–ó"
        
        result = bot.create_forum_topic(
            chat_id=group_id,
            name=topic_name
        )
        
        return result.message_thread_id
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞: {e}")
        return config_data['topics'].get('–º–∞–≥–∞–∑–∏–Ω', 1)
    
def close_order_topic(user_data, order_id, status="‚úÖ –í–´–ü–û–õ–ù–ï–ù"):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ–ø–∏–∫ –∑–∞–∫–∞–∑–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        config_data = config.get_config()
        group_id = config_data['admin_group_id']
        
        topics = bot.get_forum_topics(group_id)
        topic_name = f"{user_data['first_name']} {user_data['last_name']} - –ó–ê–ö–ê–ó"
        
        for topic in topics.topics:
            if topic.name == topic_name:
                close_text = (
                    f"üì¶ –ó–ê–ö–ê–ó #{order_id} {status}\n"
                    f"üë§ {user_data['first_name']} {user_data['last_name']}\n"
                    f"üïí –ó–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )
                
                bot.send_message(
                    chat_id=group_id,
                    text=close_text,
                    message_thread_id=topic.message_thread_id
                )
                
                try:
                    bot.close_forum_topic(
                        chat_id=group_id,
                        message_thread_id=topic.message_thread_id
                    )
                except:
                    pass
                
                break
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–æ–ø–∏–∫–∞: {e}")

# @bot.message_handler(func=lambda message: 
#     message.from_user.id in temp_data and 
#     temp_data[message.from_user.id].get('order', {}).get('step') == 'confirm_order' and
#     message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑')
# def confirm_order_final(message):
#     user_id = message.from_user.id
    
#     try:
#         order_data = temp_data[user_id]['order']
#         product_id = order_data['product_id']
#         product = db_actions.get_product(product_id)
        
#         if not product:
#             bot.send_message(user_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
#             return
        
#         # –î–û–ë–ê–í–¨–¢–ï –û–¢–õ–ê–î–û–ß–ù–£–Æ –ü–ï–ß–ê–¢–¨
#         print(f"DEBUG order_data keys: {list(order_data.keys())}")
#         print(f"DEBUG order_data content: {order_data}")
        
#         # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ
#         order_id = db_actions.create_detailed_order(
#             user_id=user_id,
#             product_id=product_id,
#             size=order_data.get('size'),
#             city=order_data['city'],
#             address=order_data['address'],
#             full_name=order_data['full_name'], 
#             phone=order_data['phone'],
#             delivery_type=order_data['delivery_type']
#         )
        
#         if order_id:
#             # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
#             notify_admins_about_order(user_id, product, order_data, order_id, order_data.get('payment_photo'))
            
#             # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#             remove_markup = types.ReplyKeyboardRemove()
            
#             bot.send_message(
#                 user_id,
#                 f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
#                 f"üìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
#                 f"üí¨ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
#                 reply_markup=remove_markup
#             )
            
#             # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#             db_actions.update_user_stats(user_id, 'orders', 1)
            
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
#             user_data = db_actions.get_user_data(user_id)
#             if user_data and user_data['orders'] == 1:
#                 db_actions.add_achievement(user_id, "first_order")
#                 db_actions.update_user_stats(user_id, 'bs_coin', 50)
#                 bot.send_message(
#                     user_id,
#                     "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑¬ª +50 BS Coin!"
#                 )
#         else:
#             bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
#         import traceback
#         traceback.print_exc()  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
#         bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
#     finally:
#         # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
#         if user_id in temp_data and 'order' in temp_data[user_id]:
#             del temp_data[user_id]['order']    

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'confirm_order' and
    message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑')
def cancel_order(message):
    user_id = message.from_user.id
    
    if user_id in temp_data and 'order' in temp_data[user_id]:
        del temp_data[user_id]['order']
    
    remove_markup = types.ReplyKeyboardRemove()
    
    bot.send_message(
        user_id,
        "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!",
        reply_markup=remove_markup
    )

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ============

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    buttons = Bot_inline_btns()
    
    is_new_user = not db_actions.user_exists(user_id)
    if is_new_user:
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        username = f"@{message.from_user.username}" if message.from_user.username else ""
        db_actions.add_user(user_id, first_name, last_name, username)

    command_parts = message.text.split()
    if len(command_parts) > 1:
        param = command_parts[1]
        
        if param.startswith('ref_'):
            try:
                referrer_id = int(param.split('_')[1])
                if is_new_user and db_actions.user_exists(referrer_id) and referrer_id != user_id:
                    db_actions.add_referral(referrer_id, user_id)
                    db_actions.update_user_stats(referrer_id, 'bs_coin', 100)
                    db_actions.update_user_stats(user_id, 'bs_coin', 50)
                    db_actions.update_user_stats(user_id, 'discount', 5)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                    check_achievement_conditions(referrer_id, 'three_referrals')
                    
                    bot.send_message(
                        referrer_id,
                        f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 BS Coin. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {db_actions.get_referral_stats(referrer_id)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
                    )
                    
                    bot.send_message(
                        user_id,
                        f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n"
                        f"üíé +50 BS Coin\n"
                        f"üéØ +5% —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤—Å–µ –∑–∞–∫–∞–∑—ã"
                    )
            except (ValueError, IndexError):
                pass
            
        elif param.startswith('product_'):
            try:
                product_id_str = param.split('_')[1]
                if product_id_str.lower() == 'none':
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞")
                    
                product_id = int(product_id_str)
                show_product(user_id, product_id)
                return
            except (ValueError, IndexError):
                bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä")
    
    if handle_daily_bonus(user_id):
        bot.send_message(user_id, "üéâ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: 10 BS Coin –∑–∞—à–ª–∏ –≤–∞–º –Ω–∞ —Å—á–µ—Ç!")
    
    user_data = db_actions.get_user_data(user_id)
    welcome_msg = (
        f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–æ—Ä—Ç, –î—Ä—É–≥! üöÄ\n"
        f"–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ BridgeSide ‚Äî –º–µ—Å—Ç–µ, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–≤–æ–π —Å—Ç–∏–ª—å –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
        f"üåâ –¢–≤–æ–∏ –º–æ—Å—Ç—ã –≤ –º–∏—Ä BridgeSide: üåâ\n"
        f"üõçÔ∏è @BridgeSide_Shop - –ü—Ä—è–º–æ–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ã. –ó–¥–µ—Å—å —Ç—ã –ø–µ—Ä–≤—ã–º —É–∑–Ω–∞–µ—à—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –¥—Ä–æ–ø–∞—Ö.\n"
        f"üåü @BridgeSide_LifeStyle - –õ—É–∫–±—É–∫–∏, —Å—Ç–∏–ª—å, –∂–∏–∑–Ω—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∞–∫—Ü–∏–∏ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏. –í–¥–æ—Ö–Ω–æ–≤–ª—è–π—Å—è –∏ —É—á–∞—Å—Ç–≤—É–π!\n"
        f"üì¢ @BridgeSide_Featback- –ß–µ—Å—Ç–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –æ—Ç —Ç–∞–∫–∏—Ö –∂–µ —á–ª–µ–Ω–æ–≤ –∫–ª—É–±–∞, –∫–∞–∫ –∏ —Ç—ã. –ù–∞–º –≤–∞–∂–Ω–∞ —Ç–≤–æ—è –æ—Ü–µ–Ω–∫–∞.\n\n"
        f"ü§ñ –ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º –∫–æ—Ä–∞–±–ª–µ–º? –ü—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ–≥–æ!\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ù–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ —Å–∫–∞—á–∏–≤–∞—Ç—å.–ü—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä—è–º–æ –≤ —ç—Ç—É —Å—Ç—Ä–æ–∫—É —á–∞—Ç–∞:\n"
        f"‚Ä¢ /profile ‚Äî üë§ –¢–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ–ø—É—Å–∫. –ó–¥–µ—Å—å —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è, –±–æ–Ω—É—Å—ã –∏ —Å—Ç–∞—Ç—É—Å –≤ –∫–ª—É–±–µ.\n"
        f"‚Ä¢ /ref ‚Äî üìç –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥. –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –∫—Ä—É—Ç—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞.\n"
        f"‚Ä¢ /support ‚Äî üõü –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å 24/7.\n"
        f"üåü–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –±–æ—Ç–∞üåü\n\n"
        f"üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ —Å –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ! –ë–æ—Ç –∂–¥–µ—Ç —Ç–≤–æ–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞. üòâ\n"
        f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ BridgeSide. üåâ"
    )
    
    if db_actions.user_is_admin(user_id):
        bot.send_message(user_id, welcome_msg, reply_markup=buttons.admin_buttons())
    else:
        bot.send_message(user_id, welcome_msg, reply_markup=buttons.start_buttons())

@bot.message_handler(commands=['test_button'])
def test_button(message):
    user_id = message.from_user.id
    try:
        markup = types.InlineKeyboardMarkup()
        order_btn = types.InlineKeyboardButton(
            text="üõí –ó–∞–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å",
            callback_data="order_now_36_42.0"
        )
        markup.add(order_btn)
        
        bot.send_message(
            user_id,
            "–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞:",
            reply_markup=markup
        )
        
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

@bot.message_handler(func=lambda msg: msg.text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    clear_temp_data(message.from_user.id)
    profile(message)

@bot.message_handler(func=lambda msg: msg.text == 'üéÅ –ê–∫—Ü–∏–∏')
def show_promo(message):
    # –ö–Ω–æ–ø–∫–∞ "–ê–∫—Ü–∏–∏" –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
    clear_temp_data(message.from_user.id)
    return support(message)

@bot.message_handler(func=lambda msg: msg.text == 'üõü –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
def support_from_button(message):
    clear_temp_data(message.from_user.id)
    return support(message)

@bot.message_handler(func=lambda msg: msg.text == 'üì¢ –û—Ç–∑—ã–≤—ã')
def show_reviews(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    buttons = Bot_inline_btns()
    
    text = (
        "üì¢ –†–∞–∑–¥–µ–ª –æ—Ç–∑—ã–≤–æ–≤\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    bot.send_message(user_id, text, reply_markup=buttons.reviews_buttons())

@bot.message_handler(func=lambda msg: msg.text == 'üèÜ –ê—á–∏–≤–∫–∏')
def show_achievements_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞—á–∏–≤–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    clear_temp_data(message.from_user.id)
    show_achievements(message)

@bot.message_handler(commands=['my_orders'])
def my_orders(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    orders = db_actions.get_user_orders(user_id)
    
    if not orders:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return
    
    orders_text = "üì¶ –í–ê–®–ò –ó–ê–ö–ê–ó–´:\n\n"
    for order in orders:
        product = db_actions.get_product(order['product_id'])
        orders_text += (
            f"üõí –ó–∞–∫–∞–∑ #{order['order_id']}\n"
            f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product) if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
            f"üïí –î–∞—Ç–∞: {order['created_at']}\n\n"
        )
    
    bot.send_message(user_id, orders_text)

@bot.message_handler(commands=['support'])
def support(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    temp_data[user_id] = temp_data.get(user_id, {})
    temp_data[user_id]['support_step'] = 'awaiting_description'
    bot.reply_to(message, "üõü –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")

@bot.message_handler(func=lambda m: temp_data.get(m.from_user.id, {}).get('support_step') == 'awaiting_description')
def handle_support_description(message):
    user_id = message.from_user.id
    text = message.text or ''
    temp_data[user_id]['support_step'] = 'submitted'
    temp_data[user_id]['support_text'] = text
    user_data = db_actions.get_user_data(user_id) or {}
    first_name = user_data.get('first_name') or message.from_user.first_name or ''
    last_name = user_data.get('last_name') or message.from_user.last_name or ''
    username = user_data.get('username') or (message.from_user.username or '')

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ
    try:
        cfg = config.get_config() or {}
        admin_group_id = cfg.get('admin_group_id')
        topic_name = f"{first_name} {last_name} –ü–û–î–î–ï–†–ñ–ö–ê".strip()
        topic = bot.create_forum_topic(chat_id=admin_group_id, name=topic_name)
        topic_id = topic.message_thread_id if topic else None
    except Exception as e:
        topic_id = None

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    markup = types.InlineKeyboardMarkup()
    approve_btn = types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"support_accept_{user_id}")
    reject_btn = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"support_reject_{user_id}")
    markup.add(approve_btn, reject_btn)

    admin_text = (
        f"üÜò –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name}\n"
        f"üîó @{username}\n\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {text}"
    )
    send_kwargs = {"chat_id": admin_group_id, "text": admin_text, "reply_markup": markup}
    if topic_id:
        send_kwargs["message_thread_id"] = topic_id
    msg = bot.send_message(**send_kwargs)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å
    temp_data[user_id]['support_topic_id'] = topic_id
    temp_data[user_id]['support_chat_id'] = admin_group_id
    temp_data[user_id]['support_message_id'] = msg.message_id
    temp_data[user_id]['support_status'] = 'awaiting'

    bot.send_message(user_id, "‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('support_accept_') or call.data.startswith('support_reject_'))
def handle_support_decision(call):
    admin_id = call.from_user.id
    if not db_actions.user_is_admin(admin_id):
        bot.answer_callback_query(call.id, "‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    parts = call.data.split('_')
    action = parts[1]
    user_id = int(parts[2])
    data = temp_data.get(user_id, {})
    topic_id = data.get('support_topic_id')
    chat_id = data.get('support_chat_id')

    if action == 'reject':
        temp_data[user_id]['support_status'] = 'rejected'
        bot.answer_callback_query(call.id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=data.get('support_message_id'), reply_markup=None)
        bot.send_message(user_id, "‚ùå –í –ø–æ–¥–¥–µ—Ä–∂–∫–µ –æ—Ç–∫–∞–∑–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –ø–æ–∑–∂–µ.")
        return

    if action == 'accept':
        temp_data[user_id]['support_status'] = 'active'
        bot.answer_callback_query(call.id, "–ü—Ä–∏–Ω—è—Ç–æ")
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=data.get('support_message_id'), reply_markup=None)
        bot.send_message(user_id, "‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º.")
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤ —Ç–æ–ø–∏–∫–µ
        try:
            admin_note_kwargs = {"chat_id": chat_id, "text": "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–ø–∏—à–∏—Ç–µ /close_support"}
            if topic_id:
                admin_note_kwargs["message_thread_id"] = topic_id
            bot.send_message(**admin_note_kwargs)
        except Exception:
            pass
        # –ü–æ–º–µ—Ç–∏–º —Å–≤—è–∑–∫—É –¥–ª—è —Ä–µ–ª–µ—è —Å–æ–æ–±—â–µ–Ω–∏–π
        temp_data[user_id]['relay'] = {
            'chat_id': chat_id,
            'topic_id': topic_id
        }

@bot.message_handler(func=lambda m: temp_data.get(m.from_user.id, {}).get('support_status') == 'active')
def relay_user_to_admin(message):
    user_id = message.from_user.id
    relay = temp_data.get(user_id, {}).get('relay') or {}
    chat_id = relay.get('chat_id')
    topic_id = relay.get('topic_id')
    try:
        kwargs = {"chat_id": chat_id, "text": f"‚úâÔ∏è –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}"}
        if topic_id:
            kwargs["message_thread_id"] = topic_id
        bot.send_message(**kwargs)
    except Exception as _:
        pass

@bot.message_handler(func=lambda m: m.chat.type in ['supergroup', 'group'] and hasattr(m, 'is_topic_message') and m.is_topic_message and str(m.text or '').startswith('/close_support'))
def close_support_from_topic(message):
    admin_id = message.from_user.id
    if not db_actions.user_is_admin(admin_id):
        return
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ topic_id
    topic_id = message.message_thread_id
    user_id = None
    for uid, data in temp_data.items():
        if isinstance(data, dict) and data.get('relay', {}).get('topic_id') == topic_id:
            user_id = uid
            break
    if not user_id:
        return
    temp_data[user_id]['support_status'] = 'closed'
    bot.send_message(user_id, "‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω.")
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –∑–∞–∫—Ä—ã—Ç—å —Å–∞–º —Ç–æ–ø–∏–∫
    try:
        cfg = config.get_config() or {}
        admin_group_id = cfg.get('admin_group_id')
        bot.close_forum_topic(chat_id=admin_group_id, message_thread_id=topic_id)
    except Exception:
        pass

@bot.message_handler(func=lambda m: m.chat.type in ['supergroup', 'group'] and hasattr(m, 'is_topic_message') and m.is_topic_message)
def relay_admin_to_user(message):
    # –†–µ–ª–µ–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–æ–ø–∏–∫–∞ –∞–¥–º–∏–Ω–≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
    topic_id = message.message_thread_id
    user_id = None
    for uid, data in temp_data.items():
        if isinstance(data, dict) and data.get('relay', {}).get('topic_id') == topic_id and data.get('support_status') == 'active':
            user_id = uid
            break
    if not user_id:
        return
    try:
        bot.send_message(user_id, f"üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: {message.text}")
    except Exception:
        pass

@bot.message_handler(commands=['ref'])
def ref_command(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    user_data = db_actions.get_user_data(user_id)
    if not user_data:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    ref_count = db_actions.get_referral_stats(user_id)
    ref_link = f"https://t.me/{bot.get_me().username}?start={user_data['referral_code']}"
    
    ref_msg = (
        f"‚ú® ü™ô –ó–ê–†–ê–ë–ê–¢–´–í–ê–ô BS COIN –í–ú–ï–°–¢–ï –° –î–†–£–ó–¨–Ø–ú–ò! ‚ú®\n\n"
        f'–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –∫—Ä—É—Ç—ã–µ –±–æ–Ω—É—Å—ã! –≠—Ç–æ –Ω–∞—à —Å–ø–æ—Å–æ–± —Å–∫–∞–∑–∞—Ç—å "—Å–ø–∞—Å–∏–±–æ" –∑–∞ —Ç–≤–æ—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
        f"üîÆ –¢–í–û–Ø –ú–ê–ì–ò–Ø –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø:\n"
        f"–°–∫–æ–ø–∏—Ä—É–π —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–µ –¥—Ä—É–∑—å—è–º. –¢–æ–ª—å–∫–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —Ç–≤–æ–π –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫!"
        f"{ref_link}\n"
        f"(–ù–∞–∂–º–∏, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å) ‚ú®\n\n"
        f"üéÅ –ß–¢–û –¢–´ –ü–û–õ–£–ß–ê–ï–®–¨:\n"
        f" +100 BridgeSide Coin ü™ô ‚Äî –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ —Ç–≤–æ–π —Å—á–µ—Ç.\n\n"
        f"üéÅ –ß–¢–û –ü–û–õ–£–ß–ê–ï–¢ –¢–í–û–ô –î–†–£–ì:\n"
        f" –©–µ–¥—Ä—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ ‚Äî –°–ö–ò–î–ö–ê 5% üéØ + +50 BS Coin –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç! –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ –Ω–∞—á–∞—Ç—å shopping!\n"
        f"üèÜ –¢–û–ü-5 –ü–û –†–ï–§–ï–†–ê–õ–ê–ú –ï–ñ–ï–ú–ï–°–Ø–ß–ù–û –ü–û–õ–£–ß–ê–Æ–¢ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ô –ú–ï–†–ß!\n"
        f"–ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π —Ç—ã –ø—Ä–∏–≤–µ–¥—ë—à—å, —Ç–µ–º –≤—ã—à–µ —Ç–≤–æ–π —à–∞–Ω—Å –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ —á–∏—Å–ª–µ –õ–µ–≥–µ–Ω–¥ –Ω–∞—à–µ–≥–æ –∫–ª—É–±–∞! –°–º–æ—Ç—Ä–∏ —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ (/profile).\n"
        f"üöÄ–ù–µ –∫–æ–ø–∏ ‚Äî –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º, –ø–æ–∫—É–ø–∞–π –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π!"
    )
    
    bot.send_message(user_id, ref_msg, parse_mode="HTML")

@bot.message_handler(commands=['set_discount'])
def set_discount(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    args = message.text.split()
    if len(args) != 3:
        bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_discount [user_id] [%]")
        return

    try:
        target_user_id = int(args[1])
        discount = int(args[2])
        
        if discount < 0 or discount > 50:
            bot.send_message(user_id, "–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 50%")
            return
            
        db_actions.set_discount(target_user_id, discount)
        bot.send_message(user_id, f"‚úÖ –°–∫–∏–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {discount}%")
        bot.send_message(target_user_id, f"üéâ –í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞: {discount}%")
    except ValueError:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. user_id –∏ % –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")

@bot.message_handler(commands=['add_coins'])
def add_coins(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    args = message.text.split()
    if len(args) != 3:
        bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_coins [user_id] [amount]")
        return

    try:
        target_user_id = int(args[1])
        amount = int(args[2])
        db_actions.update_user_stats(target_user_id, 'bs_coin', amount)
        bot.send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} BS Coin")
        bot.send_message(target_user_id, f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} BS Coin!")
    except ValueError:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. user_id –∏ amount –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")

@bot.message_handler(commands=['user_info'])
def user_info(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    args = message.text.split()
    if len(args) != 2:
        bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_info [user_id]")
        return

    try:
        target_user_id = int(args[1])
        user_data = db_actions.get_user_data(target_user_id)
        if not user_data:
            bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        info = (
            f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
            f"üÜî ID: {user_data['user_id']}\n"
            f"üë§ –ò–º—è: {user_data['first_name']} {user_data['last_name']}\n"
            f"üîó Username: {user_data['username']}\n"
            f"‚≠êÔ∏è –°—Ç–∞—Ç—É—Å: {user_data['status']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_data['comments']}\n"
            f"üì¶ –ó–∞–∫–∞–∑—ã: {user_data['orders']}\n"
            f"ü™ô BS Coin: {user_data['bs_coin']}\n"
            f"üéÅ –°–∫–∏–¥–∫–∞: {user_data['discount']}%\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {db_actions.get_referral_stats(target_user_id)}"
        )
        bot.send_message(user_id, info)
    except ValueError:
        bot.send_message(user_id, "user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

@bot.message_handler(commands=['profile'])
def profile(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
        
    user_data = db_actions.get_user_data(user_id)
    if not user_data:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    buttons = Bot_inline_btns()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—á–∏–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_achievements = db_actions.get_user_achievements(user_id)
    
    achievements_str = ""
    if user_achievements:
        achievements_str = "\nüèÜ –í–∞—à–∏ –∞—á–∏–≤–∫–∏:\n"
        for achievement in user_achievements[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
            achievements_str += f"‚Ä¢ {achievement['achievement_name']}\n"
        
        if len(user_achievements) > 3:
            achievements_str += f"... –∏ –µ—â–µ {len(user_achievements) - 3} –∞—á–∏–≤–æ–∫\n"
    else:
        achievements_str = "\nüèÜ –ê—á–∏–≤–∫–∏: –ü–æ–∫–∞ –Ω–µ—Ç\nüí° –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—á–∏–≤–æ–∫!"
    
    achievements_str += "\n\nüìñ <a href='https://telegra.ph/FAQ-Sistema-achivok--Bridge-Side-Collective-09-19'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–∏—Å—Ç–µ–º–µ –∞—á–∏–≤–æ–∫</a>"
    
    coin_info = ""
    if user_data['bs_coin'] < 100:
        coin_info = "\n\nüí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å BS Coin:\n‚Ä¢ /start - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n‚Ä¢ /ref - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ\n‚Ä¢ üèÜ <a href='https://telegra.ph/FAQ-Sistema-achivok--Bridge-Side-Collective-09-19'>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
    
    profile_msg = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üÜî ID: <code>{user_data['user_id']}</code>\n"
        f"üåü –°—Ç–∞—Ç—É—Å: {user_data['status']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_data['comments']}\n"
        f"üì¶ –ó–∞–∫–∞–∑—ã: {user_data['orders']}\n"
        f"ü™ô BS Coin: {user_data['bs_coin']}{coin_info}\n"
        f"üéÅ –°–∫–∏–¥–∫–∞: {user_data['discount']}%\n"
        f"{achievements_str}"
    )
    
    bot.send_message(
        user_id,
        profile_msg,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=buttons.profile_buttons(user_data)
    )

@bot.message_handler(commands=['achievements'])
def show_achievements(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞—á–∏–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    clear_temp_data(user_id)
    
    user_data = db_actions.get_user_data(user_id)
    if not user_data:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—á–∏–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    bridge_achievements = db_actions.get_achievements_by_category(user_id, '–ú–û–°–¢')
    shore_achievements = db_actions.get_achievements_by_category(user_id, '–ë–ï–†–ï–ì')
    collective_achievements = db_actions.get_achievements_by_category(user_id, '–ö–û–õ–õ–ï–ö–¢–ò–í')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—á–∏–≤–∫–∏
    all_achievements = db_actions.get_user_achievements(user_id)
    earned_codes = {ach['achievement_code'] for ach in all_achievements}
    
    message_text = "üèÜ –°–∏—Å—Ç–µ–º–∞ –∞—á–∏–≤–æ–∫ BridgeSide\n\n"
    message_text += "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–≤–æ–π –ë–µ—Ä–µ–≥. –ó–¥–µ—Å—å –º—ã –æ—Ç–º–µ—á–∞–µ–º –≤–∞—à –≤–∫–ª–∞–¥ —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –∞—á–∏–≤–∫–∞–º–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≤–∞–ª—é—Ç–æ–π ‚Äî BS Coin.\n\n"
    
    # –õ–∏–Ω–∏—è "–ú–û–°–¢" ‚Äî —Å—Ç–∏–ª—å + —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    message_text += "‚Äî –õ–∏–Ω–∏—è ¬´–ú–û–°–¢¬ª ‚Äî —Å—Ç–∏–ª—å + —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
    for code, data in ACHIEVEMENTS.items():
        if data['category'] == '–ú–û–°–¢':
            status = "‚úÖ" if code in earned_codes else "‚≠ï"
            message_text += f"{status} {data['name']} ‚Äî {data['description']} ‚Üí +{data['bs_coin_reward']} BS Coin\n"
    
    message_text += "\n‚Äî –õ–∏–Ω–∏—è ¬´–ë–ï–†–ï–ì¬ª ‚Äî –ª–æ—è–ª—å–Ω–æ—Å—Ç—å\n"
    for code, data in ACHIEVEMENTS.items():
        if data['category'] == '–ë–ï–†–ï–ì':
            status = "‚úÖ" if code in earned_codes else "‚≠ï"
            reward_text = f"+{data['bs_coin_reward']} BS Coin"
            if data['discount_bonus'] > 0:
                reward_text += f" +{data['discount_bonus']}% —Å–∫–∏–¥–∫–∞"
            message_text += f"{status} {data['name']} ‚Äî {data['description']} ‚Üí {reward_text}\n"
    
    message_text += "\n‚Äî –õ–∏–Ω–∏—è ¬´–ö–û–õ–õ–ï–ö–¢–ò–í¬ª ‚Äî –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n"
    for code, data in ACHIEVEMENTS.items():
        if data['category'] == '–ö–û–õ–õ–ï–ö–¢–ò–í':
            status = "‚úÖ" if code in earned_codes else "‚≠ï"
            message_text += f"{status} {data['name']} ‚Äî {data['description']} ‚Üí +{data['bs_coin_reward']} BS Coin\n"
    
    message_text += "\nüí° –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ –∏ –º–∞–≥–∞–∑–∏–Ω–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—á–∏–≤–æ–∫!"
    
    bot.send_message(user_id, message_text)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
        
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    buttons = Bot_inline_btns()
    bot.send_message(
        user_id,
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=buttons.admin_buttons()
    )

@bot.message_handler(commands=['admin_stats'])
def admin_stats(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    products_count = db_actions.get_products_count()
    variations_count = db_actions.get_variations_count()
    users_count = db_actions.get_users_count()
    reviews_count = db_actions.get_reviews_count()
    
    stats_msg = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"
        f"üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤: {products_count}\n"
        f"üì¶ –í–∞—Ä–∏–∞—Ü–∏–π: {variations_count}\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
        f"üìù –û—Ç–∑—ã–≤–æ–≤: {reviews_count}"
    )
    
    bot.send_message(user_id, stats_msg)

@bot.message_handler(commands=['export_products'])
def export_products(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    try:
        products_data = db_actions.get_all_products_for_export()
        
        if not products_data:
            bot.send_message(user_id, "‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        df_data = []
        for product in products_data:
            df_data.append({
                '–ú–æ–¥–µ–ª—å': product['name'],
                'ID –ú–æ–¥–µ–ª–∏': product['model_id'],
                '–†–∞–∑–º–µ—Ä': product['size'],
                '–¶–µ–Ω–∞ Y': product['price_yuan'],
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': product['quantity'],
                '–¶–µ–Ω–∞': product['price'],
                '–°—Å—ã–ª–∫–∞': product['link']
            })
        
        df = pd.DataFrame(df_data)
        filename = f"products_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        df.to_excel(filename, index=False)
        
        with open(filename, 'rb') as f:
            bot.send_document(user_id, f, caption="üìä –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        
        os.remove(filename)
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}"
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤")
        bot.send_message(user_id, error_msg)

@bot.message_handler(commands=['upload_products'])
def upload_products(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    bot.send_message(user_id, "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏")
    bot.register_next_step_handler(message, process_products_file)

@bot.message_handler(commands=['yadisk_auth'])
def yadisk_auth(message):
    """–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    user_id = message.from_user.id
    clear_temp_data(user_id)
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    cfg = config.get_config()
    yadisk_config = cfg.get('yadisk', {})
    client_id = yadisk_config.get('client_id')
    
    if not client_id:
        bot.send_message(user_id, 
            "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω client_id –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –≤ secrets.json:\n"
            '```json\n'
            '{\n'
            '  "yadisk": {\n'
            '    "client_id": "–≤–∞—à_client_id",\n'
            '    "client_secret": "–≤–∞—à_client_secret"\n'
            '  }\n'
            '}\n'
            '```', parse_mode='Markdown')
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º state –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    state = f"yadisk_auth_{user_id}_{int(time.time())}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º state –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if user_id not in temp_data:
        temp_data[user_id] = {}
    temp_data[user_id]['yadisk_state'] = state
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_url = (
        f"{YANDEX_OAUTH_URL}?"
        f"response_type=code&"
        f"client_id={client_id}&"
        f"state={state}"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîó –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", url=auth_url))
    
    bot.send_message(user_id,
        "üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
        "2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å\n"
        "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n"
        "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É\n\n"
        f"State: `{state}`", 
        reply_markup=markup, parse_mode='Markdown')
    
    temp_data[user_id]['step'] = 'await_yadisk_code'

@bot.message_handler(func=lambda m: temp_data.get(m.from_user.id, {}).get('step') == 'await_yadisk_code')
def handle_yadisk_code(message):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    user_id = message.from_user.id
    data = temp_data.get(user_id, {})
    
    if 'yadisk_state' not in data:
        bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /yadisk_auth")
        return
    
    code = message.text.strip()
    state = data['yadisk_state']
    
    try:
        # –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
        cfg = config.get_config()
        yadisk_config = cfg.get('yadisk', {})
        client_id = yadisk_config.get('client_id')
        client_secret = yadisk_config.get('client_secret')
        
        token_data = {
            'grant_type': 'authorization_code',
            'code': code,
            'client_id': client_id,
            'client_secret': client_secret
        }
        
        response = requests.post(YANDEX_TOKEN_URL, data=token_data, timeout=30)
        response.raise_for_status()
        tokens = response.json()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
        config.update_yadisk_tokens(
            tokens['access_token'],
            tokens.get('refresh_token', ''),
            tokens.get('expires_in', 3600)
        )
        
        bot.send_message(user_id, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in temp_data:
            del temp_data[user_id]
            
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")

@bot.message_handler(commands=['create_post'])
def create_post(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    if user_id in temp_data:
        del temp_data[user_id]
    
    temp_data[user_id] = {'step': 'await_product_id', 'photos': []}
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é xlsx (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        xlsx_path = config.get_config().get('xlsx_path')
        if xlsx_path and os.path.exists(os.path.join(work_dir, xlsx_path)):
            with open(os.path.join(work_dir, xlsx_path), 'rb') as f:
                bot.send_document(user_id, f, caption="üìÑ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ (—Å–æ–¥–µ—Ä–∂–∏—Ç ID)")
    except Exception as e:
        log_error(logger, e, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å XLSX")
    bot.send_message(user_id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–∞–ø–∫–æ–π –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ):")
    bot.register_next_step_handler(message, handle_enter_product_id)

def handle_enter_product_id(message):
    user_id = message.from_user.id
    if user_id not in temp_data or temp_data[user_id].get('step') != 'await_product_id':
        bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /create_post")
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç (–∞ –Ω–µ —Ñ–∞–π–ª/—Ñ–æ—Ç–æ)
    if not getattr(message, 'text', None) or not str(message.text).strip():
        bot.send_message(user_id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º (–∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ/–ø–∞–ø–∫–µ –Ø.–î–∏—Å–∫):")
        bot.register_next_step_handler(message, handle_enter_product_id)
        return
    product_id = message.text.strip()
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photos = []
    try:
        photos = download_photos_from_yadisk(product_id)
        if not photos:
            log_info(logger, f"–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
    except Exception as e:
        log_error(logger, e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
        photos = []
    
    temp_data[user_id]['photos'] = photos
    temp_data[user_id]['table_id'] = product_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–∏–∫—É–ª
    
    # –ü–æ–ª—É—á–∏–º —Ç–æ–≤–∞—Ä –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ table_id (–∞—Ä—Ç–∏–∫—É–ª—É) –∏–ª–∏ –ø–æ model_id –∏–∑ –≤–∞—Ä–∏–∞—Ü–∏–π
    product = db_actions.get_product_by_table_id(product_id)
    if not product:
        product = db_actions.get_product_by_model_id(product_id)
    if not product:
        bot.send_message(user_id, f"‚ùå –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    product_name = get_product_field(product, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    description_full = get_product_field(product, 'description_full', '')
    description_old = get_product_field(product, 'description', '')
    table_id_db = get_product_field(product, 'table_id', '')
    keywords = get_product_field(product, 'keywords', '')
    price = get_product_field(product, 'price', 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    actual_product_id = get_product_field(product, 'product_id', 0)
    temp_data[user_id]['product_id'] = actual_product_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –¥–ª—è –∫–Ω–æ–ø–æ–∫
    # –í–∞—Ä–∏–∞—Ü–∏–∏ –ø–æ product_id, –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ model_id (table_id)
    variations = db_actions.get_product_variations(actual_product_id)
    if (not variations) and table_id:
        try:
            variations = db_actions.get_product_variations_by_model_id(table_id)
        except Exception:
            variations = []
    available_sizes = []
    if variations:
        for variation in variations:
            size = get_product_field(variation, 'size', '')
            quantity = variation.get('quantity', None)
            if size and (quantity is None or quantity > 0):
                available_sizes.append(size)
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    import re
    numeric_sizes = []
    for s in available_sizes:
        ss = str(s).strip()
        m = re.search(r"(\d+(?:[\.,]\d+)?)", ss)
        if not m:
            continue
        try:
            val = float(m.group(1).replace(',', '.'))
            numeric_sizes.append((val, ss))
        except Exception:
            continue
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫
    seen = set()
    numeric_sizes_sorted = []
    for val, ss in sorted(numeric_sizes, key=lambda x: x[0]):
        if val in seen:
            continue
        seen.add(val)
        # –ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º: 42.0 -> 42, 42.5 -> 42.5
        disp = str(int(val)) if val.is_integer() else ("{:.1f}".format(val).rstrip('0').rstrip('.') if val % 1 != 0 else str(int(val)))
        numeric_sizes_sorted.append(disp)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (HTML):
    # –ù–∞–∑–≤–∞–Ω–∏–µ, –û–ø–∏—Å–∞–Ω–∏–µ, –ê—Ä—Ç–∏–∫—É–ª, –†–∞–∑–º–µ—Ä—ã, –¶–µ–Ω–∞, –í–æ–∑–≤—Ä–∞—Ç, –•—ç—à—Ç–µ–≥–∏, –ö–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏
    caption_parts = []
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    caption_parts.append(f"{product_name}")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–æ–º—É –ø–æ–ª—é, –µ—Å–ª–∏ –ø—É—Å—Ç–æ–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ; –±–µ–∑ —Å—Ç—Ä–æ–∫-—Ö—ç—à—Ç–µ–≥–æ–≤)
    description_to_show = description_full if description_full else description_old
    description_clean = description_to_show or ""
    if description_clean and '\n' in description_clean:
        lines = description_clean.split('\n')
        description_clean = '\n'.join([line for line in lines if not line.strip().startswith('#')]).strip()
    if description_clean:
        caption_parts.append(f"<blockquote>{description_clean}</blockquote>")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: table_id –∏–∑ –ë–î ‚Üí –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∞–¥–º–∏–Ω–æ–º table_id ‚Üí –ø–µ—Ä–≤—ã–π model_id
    try:
        preview_variations = variations or []
        if (not preview_variations) and table_id_db:
            preview_variations = db_actions.get_product_variations_by_model_id(table_id_db)
    except Exception:
        preview_variations = []
    first_model_id_for_display = None
    try:
        first_model_id_for_display = next((v.get('model_id') for v in preview_variations if v.get('model_id')), None)
    except Exception:
        first_model_id_for_display = None
    admin_table_id = product_id  # –≤–≤–æ–¥ –∞–¥–º–∏–Ω–∞ –≤ —ç—Ç–æ–º —à–∞–≥–µ ‚Äî —ç—Ç–æ –∞—Ä—Ç–∏–∫—É–ª (–ø–∞–ø–∫–∞ –Ω–∞ –Ø.–î–∏—Å–∫–µ)
    article_to_show = (str(table_id_db).strip() if table_id_db and str(table_id_db).strip() else None)
    if not article_to_show and admin_table_id and str(admin_table_id).strip():
        article_to_show = str(admin_table_id).strip()
    if not article_to_show and first_model_id_for_display and str(first_model_id_for_display).strip():
        article_to_show = str(first_model_id_for_display).strip()

    # –ë–ª–æ–∫ –¥–µ—Ç–∞–ª–µ–π: –ê—Ä—Ç–∏–∫—É–ª, –†–∞–∑–º–µ—Ä—ã, –¶–µ–Ω–∞ (–º–µ–∂–¥—É –Ω–∏–º–∏ –æ–¥–∏–Ω –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏)
    details_lines = []
    if article_to_show:
        details_lines.append(f"<b>–ê—Ä—Ç–∏–∫—É–ª: {article_to_show}</b>")
    if numeric_sizes_sorted:
        sizes_text = ", ".join(numeric_sizes_sorted[:10])
        if len(numeric_sizes_sorted) > 10:
            sizes_text += f" –∏ –µ—â–µ {len(numeric_sizes_sorted) - 10}"
        details_lines.append(f"–†–∞–∑–º–µ—Ä—ã: {sizes_text}")
    else:
        # Fallback: –ø–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –ë–î, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if available_sizes:
            uniq_raw = []
            seen_raw = set()
            for s in available_sizes:
                ss = str(s).strip()
                if ss and ss not in seen_raw:
                    seen_raw.add(ss)
                    uniq_raw.append(ss)
            if uniq_raw:
                sizes_text = ", ".join(uniq_raw[:10])
                if len(uniq_raw) > 10:
                    sizes_text += f" –∏ –µ—â–µ {len(uniq_raw) - 10}"
                details_lines.append(f"–†–∞–∑–º–µ—Ä—ã: {sizes_text}")
        log_info(logger, f"DEBUG: Sizes not found for preview. product_id={actual_product_id}, table_id={table_id}, variations={len(variations)}, raw_sizes={available_sizes}")
    price_text = f"–¶–µ–Ω–∞: {price}‚ÇΩ" if price and price > 0 else "–¶–µ–Ω–∞: –£—Ç–æ—á–Ω—è–π—Ç–µ"
    details_lines.append(price_text)
    if details_lines:
        caption_parts.append("\n".join(details_lines))
    
    # –í–æ–∑–≤—Ä–∞—Ç
    caption_parts.append("–í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π")
    
    # –°—Å—ã–ª–∫–∏: –ö—É–ø–∏—Ç—å –∏ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (–∫–∞–∫ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏)
    try:
        bot_username = bot.get_me().username
    except Exception:
        bot_username = ''
    deep_link = f"https://t.me/{bot_username}?start=product_{actual_product_id}" if bot_username else ""
    support_link = f"https://t.me/{bot_username}?start=support" if bot_username else ""
    link_chunks = []
    if deep_link:
        link_chunks.append(f"<a href=\"{deep_link}\">üõí –ö—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</a>")
    if support_link:
        link_chunks.append(f"<a href=\"{support_link}\">üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>")
    if link_chunks:
        caption_parts.append(" | ".join(link_chunks))
    
    # –•—ç—à—Ç–µ–≥–∏ (–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ keywords)
    hashtags_to_show = ''
    if description_to_show and '\n' in description_to_show:
        h_lines = [ln.strip() for ln in description_to_show.split('\n') if ln.strip().startswith('#')]
        if h_lines:
            hashtags_to_show = ' '.join(h_lines)
    if not hashtags_to_show and keywords and str(keywords).strip():
        hashtags_to_show = str(keywords).strip()
    if hashtags_to_show:
        caption_parts.append(f"{hashtags_to_show}")
    
    caption = "\n\n".join(caption_parts)
    
    # –ü—Ä–µ–≤—å—é: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (HTML)
    if photos:
        media = []
        for idx, p in enumerate(photos[:10]):
            if idx == 0:
                media.append(types.InputMediaPhoto(open(p, 'rb'), caption=caption, parse_mode="HTML"))
            else:
                media.append(types.InputMediaPhoto(open(p, 'rb')))
        bot.send_media_group(user_id, media)
    else:
        bot.send_message(user_id, caption, parse_mode="HTML")
    
    # –ö–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(text="üöÄ –í—ã–ª–æ–∂–∏—Ç—å", callback_data=f"post_publish_{actual_product_id}"),
        types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"post_edit_{actual_product_id}")
    )
    markup.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"post_cancel_{actual_product_id}"))
    bot.send_message(user_id, "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=markup)
    temp_data[user_id]['step'] = 'preview'

@bot.callback_query_handler(func=lambda call: call.data.startswith('post_cancel_'))
def handle_post_cancel(call):
    user_id = call.from_user.id
    files = temp_data.get(user_id, {}).get('photos', [])
    cleanup_local_files(files)
    if user_id in temp_data:
        del temp_data[user_id]
    bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
    bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id, text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('post_publish_'))
def handle_post_publish(call):
    user_id = call.from_user.id
    data = temp_data.get(user_id) or {}
    files = data.get('photos', [])
    product_id = data.get('product_id')
    try:
        if not files:
            bot.answer_callback_query(call.id, "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—É—á–∏—Ç—ã–≤–∞—è –ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∞)
        product = db_actions.get_product(int(product_id)) if product_id and str(product_id).isdigit() else None
        override_name = data.get('override_name')
        override_description = data.get('override_description')
        override_price = data.get('override_price') if 'override_price' in data else None
        override_tags = data.get('override_tags', '')

        name = override_name or (get_product_name(product) if product else f"–¢–æ–≤–∞—Ä {product_id}")
        description_full = get_product_field(product, 'description_full', '') if product else ''
        description_old = get_product_field(product, 'description', '') if product else ''
        table_id = get_product_field(product, 'table_id', '') if product else ''
        admin_table_id = temp_data.get(user_id, {}).get('table_id')
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∫–∞–∑–∞: table_id ‚Üí admin_table_id ‚Üí –ø–µ—Ä–≤—ã–π model_id
        first_model_id_for_display = None
        try:
            _vars_for_id = db_actions.get_product_variations(int(product_id)) if product else []
            first_model_id_for_display = next((v.get('model_id') for v in _vars_for_id if v.get('model_id')), None)
        except Exception:
            first_model_id_for_display = None
        article_to_show = (str(table_id).strip() if table_id and str(table_id).strip() else None)
        if not article_to_show and admin_table_id and str(admin_table_id).strip():
            article_to_show = str(admin_table_id).strip()
        if not article_to_show and first_model_id_for_display and str(first_model_id_for_display).strip():
            article_to_show = str(first_model_id_for_display).strip()
        keywords = get_product_field(product, 'keywords', '') if product else ''
        price = override_price if override_price is not None else (get_product_field(product, 'price', 0) if product else 0)

        # –û–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ —Å—Ç—Ä–æ–∫-—Ö—ç—à—Ç–µ–≥–æ–≤
        description_to_show = override_description or (description_full if description_full else description_old)
        description_clean = description_to_show
        if description_clean and '\n' in description_clean:
            _lines = description_clean.split('\n')
            description_clean = '\n'.join([ln for ln in _lines if not ln.strip().startswith('#')]).strip()

        # –•—ç—à—Ç–µ–≥–∏: –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –∏–∑ keywords
        hashtags_to_show = ''
        if description_to_show and '\n' in description_to_show:
            h_lines = [ln.strip() for ln in description_to_show.split('\n') if ln.strip().startswith('#')]
            if h_lines:
                hashtags_to_show = ' '.join(h_lines)
        if not hashtags_to_show and override_tags:
            hashtags_to_show = override_tags.strip()
        if not hashtags_to_show and keywords:
            hashtags_to_show = keywords.strip()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (HTML):
        # –§–æ—Ç–æ (–∏–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ), –ù–∞–∑–≤–∞–Ω–∏–µ, –û–ø–∏—Å–∞–Ω–∏–µ, –ê—Ä—Ç–∏–∫—É–ª, –†–∞–∑–º–µ—Ä—ã, –¶–µ–Ω–∞,
        # –í–æ–∑–≤—Ä–∞—Ç, –•—ç—à—Ç–µ–≥–∏, –ö–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏
        parts = []
        parts.append(f"{name}")
        if description_clean:
            parts.append(f"<blockquote>{description_clean}</blockquote>")
        if article_to_show:
            parts.append(f"<b>–ê—Ä—Ç–∏–∫—É–ª: {article_to_show}</b>")
        # –†–∞–∑–º–µ—Ä—ã
        try:
            variations = db_actions.get_product_variations(int(product_id)) if product else []
            if (not variations) and table_id:
                variations = db_actions.get_product_variations_by_model_id(table_id)
        except Exception:
            variations = []
        available_sizes = []
        if variations:
            for v in variations:
                size = get_product_field(v, 'size', '')
                quantity = v.get('quantity', None)
                if size and (quantity is None or quantity > 0):
                    available_sizes.append(size)
        # –ß–∏—Å–ª–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        import re
        numeric_sizes = []
        for s in available_sizes:
            ss = str(s).strip()
            m = re.search(r"(\d+(?:[\.,]\d+)?)", ss)
            if not m:
                continue
            try:
                val = float(m.group(1).replace(',', '.'))
                numeric_sizes.append((val, ss))
            except Exception:
                continue
        seen = set()
        numeric_sizes_sorted = []
        for val, ss in sorted(numeric_sizes, key=lambda x: x[0]):
            if val in seen:
                continue
            seen.add(val)
            disp = str(int(val)) if val.is_integer() else ("{:.1f}".format(val).rstrip('0').rstrip('.') if val % 1 != 0 else str(int(val)))
            numeric_sizes_sorted.append(disp)
        if numeric_sizes_sorted:
            sizes_text = ", ".join(numeric_sizes_sorted[:10])
            if len(numeric_sizes_sorted) > 10:
                sizes_text += f" –∏ –µ—â–µ {len(numeric_sizes_sorted) - 10}"
            parts.append(f"–†–∞–∑–º–µ—Ä—ã: {sizes_text}")
        else:
            # Fallback –Ω–∞ —Å—ã—Ä—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            if available_sizes:
                uniq_raw = []
                seen_raw = set()
                for s in available_sizes:
                    ss = str(s).strip()
                    if ss and ss not in seen_raw:
                        seen_raw.add(ss)
                        uniq_raw.append(ss)
                if uniq_raw:
                    sizes_text = ", ".join(uniq_raw[:10])
                    if len(uniq_raw) > 10:
                        sizes_text += f" –∏ –µ—â–µ {len(uniq_raw) - 10}"
                    parts.append(f"–†–∞–∑–º–µ—Ä—ã: {sizes_text}")
            log_info(logger, f"DEBUG: Sizes not found for publish-from-preview. product_id={product_id}, table_id={table_id}, variations={len(variations)}, raw_sizes={available_sizes}")
        # –¶–µ–Ω–∞ (–∫–∞–∫ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ)
        price_text = f"–¶–µ–Ω–∞: {price}‚ÇΩ" if price and price > 0 else "–¶–µ–Ω–∞: –£—Ç–æ—á–Ω—è–π—Ç–µ"
        parts.append(price_text)
        # –ö–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏
        try:
            bot_username = bot.get_me().username
        except Exception:
            bot_username = ''
        deep_link = f"https://t.me/{bot_username}?start=product_{product_id}" if bot_username else ""
        support_link = f"https://t.me/{bot_username}?start=support" if bot_username else ""
        link_chunks = []
        if deep_link:
            link_chunks.append(f"<a href=\"{deep_link}\">üõí –ö—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</a>")
        if support_link:
            link_chunks.append(f"<a href=\"{support_link}\">üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>")
        # –í–æ–∑–≤—Ä–∞—Ç –≤—ã—à–µ —Å—Å—ã–ª–æ–∫
        parts.append("–í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π")
        if link_chunks:
            parts.append(" | ".join(link_chunks))
        # –•—ç—à—Ç–µ–≥–∏
        if hashtags_to_show:
            parts.append(f"{hashtags_to_show}")
        caption = "\n\n".join(parts)
        config_data_local = config.get_config()
        chat_id = config_data_local.get('store_channel_id', '@BridgeSide_Store')
        topic_id = (config_data_local.get('topics') or {}).get('–º–∞–≥–∞–∑–∏–Ω')
        media = []
        for idx, p in enumerate(files[:10]):
            media_input = _resolve_media_input(p)
            if idx == 0:
                media.append(types.InputMediaPhoto(media_input, caption=caption, parse_mode="HTML"))
            else:
                media.append(types.InputMediaPhoto(media_input))
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
        bot.send_media_group(chat_id, media, message_thread_id=topic_id)
        bot.answer_callback_query(call.id, "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
        bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id, text="‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    finally:
        cleanup_local_files(files)
        if user_id in temp_data:
            del temp_data[user_id]

@bot.callback_query_handler(func=lambda call: call.data.startswith('post_edit_'))
def handle_post_edit(call):
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)
    # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(text="üñº –§–æ—Ç–æ", callback_data="post_editmenu_photos"),
        types.InlineKeyboardButton(text="üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="post_editmenu_name"),
    )
    markup.add(
        types.InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="post_editmenu_desc"),
        types.InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="post_editmenu_price"),
    )
    markup.add(
        types.InlineKeyboardButton(text="#Ô∏è‚É£ –•—ç—à—Ç–µ–≥–∏", callback_data="post_editmenu_tags"),
        types.InlineKeyboardButton(text="üîô –ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data="post_editmenu_back"),
    )
    try:
        bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                              text="–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)
    except Exception:
        bot.send_message(user_id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)
        temp_data.setdefault(user_id, {})
        temp_data[user_id]['step'] = 'edit_menu'

@bot.callback_query_handler(func=lambda call: call.data.startswith('post_editmenu_'))
def handle_post_edit_menu(call):
    user_id = call.from_user.id
    action = call.data.replace('post_editmenu_', '')
    bot.answer_callback_query(call.id)
    if action == 'back':
        try:
            _render_post_preview(user_id)
        except Exception:
            bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        return
    if action == 'photos':
        temp_data.setdefault(user_id, {})
        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Å –Ø.–î–∏—Å–∫–∞, –∏ –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
        try:
            existing = temp_data[user_id].get('photos', []) or []
            local_paths = [p for p in existing if isinstance(p, str) and os.path.exists(p)]
            if local_paths:
                cleanup_local_files(local_paths)
        except Exception:
            pass
        temp_data[user_id]['photos'] = []
        temp_data[user_id]['step'] = 'edit_photos_post'
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1‚Äì10 —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞. –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç —Å –ø–æ–¥–ø–∏—Å—å—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
    elif action == 'name':
        temp_data.setdefault(user_id, {})
        temp_data[user_id]['step'] = 'edit_name_post'
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:")
    elif action == 'desc':
        temp_data.setdefault(user_id, {})
        temp_data[user_id]['step'] = 'edit_desc_post'
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    elif action == 'price':
        temp_data.setdefault(user_id, {})
        temp_data[user_id]['step'] = 'edit_price_post'
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ), –ª–∏–±–æ 0 –¥–ª—è '–£—Ç–æ—á–Ω—è–π—Ç–µ':")
    elif action == 'tags':
        temp_data.setdefault(user_id, {})
        temp_data[user_id]['step'] = 'edit_tags_post'
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏):")

@bot.message_handler(content_types=['photo'], func=lambda m: temp_data.get(m.from_user.id, {}).get('step') == 'edit_photos_post')
def handle_edit_photos_post(message):
    user_id = message.from_user.id
    data = temp_data.setdefault(user_id, {})
    files = data.get('photos', [])
    try:
        file_id = message.photo[-1].file_id
        if not isinstance(files, list):
            files = []
        files.append(file_id)
        files = files[-10:]
        data['photos'] = files
        temp_data[user_id] = data
        bot.send_message(user_id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ. –¢–µ–∫—É—â–∏—Ö —Ñ–æ—Ç–æ: {len(files)}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /done –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
    except Exception as e:
        bot.send_message(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")

@bot.message_handler(commands=['done'])
def handle_done_editing(message):
    user_id = message.from_user.id
    if temp_data.get(user_id, {}).get('step') in ['edit_photos_post', 'edit_name_post', 'edit_desc_post', 'edit_price_post', 'edit_tags_post']:
        _render_post_preview(user_id)

@bot.message_handler(func=lambda m: temp_data.get(m.from_user.id, {}).get('step') == 'edit_name_post')
def handle_edit_name_post(message):
    user_id = message.from_user.id
    temp_data.setdefault(user_id, {})['override_name'] = (message.text or '').strip()
    _render_post_preview(user_id)

@bot.message_handler(func=lambda m: temp_data.get(m.from_user.id, {}).get('step') == 'edit_desc_post')
def handle_edit_desc_post(message):
    user_id = message.from_user.id
    temp_data.setdefault(user_id, {})['override_description'] = (message.text or '').strip()
    _render_post_preview(user_id)

@bot.message_handler(func=lambda m: temp_data.get(m.from_user.id, {}).get('step') == 'edit_price_post')
def handle_edit_price_post(message):
    user_id = message.from_user.id
    txt = (message.text or '').replace(',', '.').strip()
    try:
        value = float(txt)
        temp_data.setdefault(user_id, {})['override_price'] = value
        _render_post_preview(user_id)
    except Exception:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 4990 –∏–ª–∏ 0")

@bot.message_handler(func=lambda m: temp_data.get(m.from_user.id, {}).get('step') == 'edit_tags_post')
def handle_edit_tags_post(message):
    user_id = message.from_user.id
    temp_data.setdefault(user_id, {})['override_tags'] = (message.text or '').strip()
    _render_post_preview(user_id)

def _resolve_media_input(media_item):
    try:
        if isinstance(media_item, str) and os.path.exists(media_item):
            return open(media_item, 'rb')
        return media_item
    except Exception:
        return media_item

def _render_post_preview(user_id: int):
    data = temp_data.get(user_id) or {}
    files = data.get('photos', [])
    actual_product_id = data.get('product_id')
    table_id_input = data.get('table_id', '')
    product = db_actions.get_product(int(actual_product_id)) if actual_product_id and str(actual_product_id).isdigit() else None
    product_name = data.get('override_name') or (get_product_field(product, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if product else f"–¢–æ–≤–∞—Ä {actual_product_id}")
    description_full = get_product_field(product, 'description_full', '') if product else ''
    description_old = get_product_field(product, 'description', '') if product else ''
    table_id_db = get_product_field(product, 'table_id', '') if product else ''
    admin_table_id = table_id_input
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∫–∞–∑–∞: table_id –∏–∑ –ë–î ‚Üí admin_table_id ‚Üí –ø–µ—Ä–≤—ã–π model_id
    try:
        _vars_for_id = db_actions.get_product_variations(int(actual_product_id)) if product else []
        first_model_id_for_display = next((v.get('model_id') for v in _vars_for_id if v.get('model_id')), None)
    except Exception:
        first_model_id_for_display = None
    article_to_show = (str(table_id_db).strip() if table_id_db and str(table_id_db).strip() else None)
    if not article_to_show and admin_table_id and str(admin_table_id).strip():
        article_to_show = str(admin_table_id).strip()
    if not article_to_show and first_model_id_for_display and str(first_model_id_for_display).strip():
        article_to_show = str(first_model_id_for_display).strip()
    keywords = get_product_field(product, 'keywords', '') if product else ''
    price_value = data.get('override_price') if 'override_price' in data else (get_product_field(product, 'price', 0) if product else 0)
    description_to_show = data.get('override_description') or (description_full if description_full else description_old)
    description_clean = description_to_show or ''
    if description_clean and '\n' in description_clean:
        lines = description_clean.split('\n')
        description_clean = '\n'.join([ln for ln in lines if not ln.strip().startswith('#')]).strip()
    # sizes
    try:
        variations = db_actions.get_product_variations(int(actual_product_id)) if product else []
        if (not variations) and table_id:
            variations = db_actions.get_product_variations_by_model_id(table_id)
    except Exception:
        variations = []
    available_sizes = []
    if variations:
        for v in variations:
            size = get_product_field(v, 'size', '')
            quantity = v.get('quantity', None)
            if size and (quantity is None or quantity > 0):
                available_sizes.append(size)
    import re as _re
    numeric_sizes = []
    for s in available_sizes:
        ss = str(s).strip()
        m = _re.search(r"(\d+(?:[\.,]\d+)?)", ss)
        if not m:
            continue
        try:
            val = float(m.group(1).replace(',', '.'))
            numeric_sizes.append((val, ss))
        except Exception:
            continue
    seen = set()
    numeric_sizes_sorted = []
    for val, ss in sorted(numeric_sizes, key=lambda x: x[0]):
        if val in seen:
            continue
        seen.add(val)
        disp = str(int(val)) if val.is_integer() else ("{:.1f}".format(val).rstrip('0').rstrip('.') if val % 1 != 0 else str(int(val)))
        numeric_sizes_sorted.append(disp)
    # build caption
    parts = []
    parts.append(f"{product_name}")
    if description_clean:
        parts.append(f"<blockquote>{description_clean}</blockquote>")
    if article_to_show:
        parts.append(f"<b>–ê—Ä—Ç–∏–∫—É–ª: {article_to_show}</b>")
    if numeric_sizes_sorted:
        sizes_text = ", ".join(numeric_sizes_sorted[:10])
        if len(numeric_sizes_sorted) > 10:
            sizes_text += f" –∏ –µ—â–µ {len(numeric_sizes_sorted) - 10}"
        parts.append(f"–†–∞–∑–º–µ—Ä—ã: {sizes_text}")
    price_text = f"–¶–µ–Ω–∞: {price_value}‚ÇΩ" if price_value and price_value > 0 else "–¶–µ–Ω–∞: –£—Ç–æ—á–Ω—è–π—Ç–µ"
    parts.append(price_text)
    parts.append("–í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π")
    try:
        bot_username = bot.get_me().username
    except Exception:
        bot_username = ''
    deep_link = f"https://t.me/{bot_username}?start=product_{actual_product_id}" if bot_username else ""
    support_link = f"https://t.me/{bot_username}?start=support" if bot_username else ""
    link_chunks = []
    if deep_link:
        link_chunks.append(f"<a href=\"{deep_link}\">üõí –ö—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</a>")
    if support_link:
        link_chunks.append(f"<a href=\"{support_link}\">üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>")
    if link_chunks:
        parts.append(" | ".join(link_chunks))
    # hashtags
    hashtags_to_show = data.get('override_tags', '')
    if not hashtags_to_show and description_to_show and '\n' in (description_to_show or ''):
        h_lines = [ln.strip() for ln in description_to_show.split('\n') if ln.strip().startswith('#')]
        if h_lines:
            hashtags_to_show = ' '.join(h_lines)
    if not hashtags_to_show and keywords and str(keywords).strip():
        hashtags_to_show = str(keywords).strip()
    if hashtags_to_show:
        parts.append(f"{hashtags_to_show}")
    caption = "\n\n".join(parts)
    # send preview
    if files:
        media = []
        for idx, p in enumerate(files[:10]):
            media_input = _resolve_media_input(p)
            if idx == 0:
                media.append(types.InputMediaPhoto(media_input, caption=caption, parse_mode="HTML"))
            else:
                media.append(types.InputMediaPhoto(media_input))
        bot.send_media_group(user_id, media)
    else:
        bot.send_message(user_id, caption, parse_mode="HTML")
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(text="üöÄ –í—ã–ª–æ–∂–∏—Ç—å", callback_data=f"post_publish_{actual_product_id}"),
        types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"post_edit_{actual_product_id}")
    )
    markup.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"post_cancel_{actual_product_id}"))
    bot.send_message(user_id, "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=markup)
    temp_data[user_id]['step'] = 'preview'

@bot.message_handler(func=lambda m: temp_data.get(m.from_user.id, {}).get('step') == 'edit_text')
def handle_new_caption(message):
    user_id = message.from_user.id
    data = temp_data.get(user_id) or {}
    files = data.get('photos', [])
    new_text = message.text or ""
    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ —Ç–æ–º—É –∂–µ —à–∞–±–ª–æ–Ω—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    try:
        product_id = data.get('product_id')
        product = db_actions.get_product(int(product_id)) if product_id and str(product_id).isdigit() else None
        product_name = get_product_field(product, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if product else f"–¢–æ–≤–∞—Ä {product_id}"
        description_full = get_product_field(product, 'description_full', '') if product else ''
        description_old = get_product_field(product, 'description', '') if product else ''
        table_id = get_product_field(product, 'table_id', '') if product else ''
        keywords = get_product_field(product, 'keywords', '') if product else ''
        price = get_product_field(product, 'price', 0) if product else 0

        # –†–∞–∑–º–µ—Ä—ã
        try:
            variations = db_actions.get_product_variations(int(product_id)) if product else []
        except Exception:
            variations = []
        available_sizes = []
        if variations:
            for v in variations:
                size = get_product_field(v, 'size', '')
                quantity = get_product_field(v, 'quantity', 0)
                if quantity > 0 and size:
                    available_sizes.append(size)

        # –°—Å—ã–ª–∫–∏
        try:
            bot_username = bot.get_me().username
        except Exception:
            bot_username = ''
        deep_link = f"https://t.me/{bot_username}?start=product_{product_id}" if bot_username else ""
        support_link = f"https://t.me/{bot_username}?start=support" if bot_username else ""

        # –•—ç—à—Ç–µ–≥–∏: –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ keywords
        description_to_show = description_full if description_full else description_old
        hashtags_to_show = ''
        if description_to_show and '\n' in description_to_show:
            h_lines = [ln.strip() for ln in description_to_show.split('\n') if ln.strip().startswith('#')]
            if h_lines:
                hashtags_to_show = ' '.join(h_lines)
        if not hashtags_to_show and keywords and keywords.strip():
            hashtags_to_show = keywords.strip()

        # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —Å—Ç—Ä–æ–∫-—Ö—ç—à—Ç–µ–≥–æ–≤)
        description_clean = new_text
        if description_clean and '\n' in description_clean:
            _lines = description_clean.split('\n')
            description_clean = '\n'.join([ln for ln in _lines if not ln.strip().startswith('#')]).strip()

        parts = []
        parts.append(f"{product_name}")
        if description_clean:
            parts.append(f"{description_clean}")
        if table_id:
            parts.append(f"<b>–ê—Ä—Ç–∏–∫—É–ª: {table_id}</b>")
        if available_sizes:
            sizes_text = ", ".join(available_sizes[:10])
            if len(available_sizes) > 10:
                sizes_text += f" –∏ –µ—â–µ {len(available_sizes) - 10}"
            parts.append(f"–†–∞–∑–º–µ—Ä—ã: {sizes_text}")
        parts.append(f"–¶–µ–Ω–∞: {price}‚ÇΩ")
        link_chunks = []
        if deep_link:
            link_chunks.append(f"<a href=\"{deep_link}\">üõí –ö—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</a>")
        if support_link:
            link_chunks.append(f"<a href=\"{support_link}\">üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>")
        if link_chunks:
            parts.append(" | ".join(link_chunks))
        parts.append("–í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π")
        if hashtags_to_show:
            parts.append(f"{hashtags_to_show}")
        rebuilt_caption = "\n\n".join(parts)

        media = []
        for idx, p in enumerate(files[:10]):
            if idx == 0:
                media.append(types.InputMediaPhoto(open(p, 'rb'), caption=rebuilt_caption, parse_mode="HTML"))
            else:
                media.append(types.InputMediaPhoto(open(p, 'rb')))
        bot.send_media_group(user_id, media)
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(text="üöÄ –í—ã–ª–æ–∂–∏—Ç—å", callback_data=f"post_publish_{data.get('product_id')}")
        )
        markup.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"post_cancel_{data.get('product_id')}") )
        bot.send_message(user_id, "–ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", reply_markup=markup)
        temp_data[user_id]['step'] = 'preview'
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

@bot.message_handler(commands=['export_users'])
def export_users(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    users = db_actions.get_all_users()
    if not users:
        bot.send_message(user_id, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
        
    df = pd.DataFrame(users, columns=['user_id', 'first_name', 'last_name', 'username'])
    
    filename = f"users_export_{datetime.now().strftime('%Y%m%d%H%M%S')}.xlsx"
    df.to_excel(filename, index=False)
    
    with open(filename, 'rb') as f:
        bot.send_document(user_id, f, caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    os.remove(filename)


@bot.message_handler(commands=['order_status'])
def order_status_command(message):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    user_id = message.from_user.id
    clear_temp_data(user_id)
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    args = message.text.split()
    if len(args) < 3:
        bot.send_message(user_id, 
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /order_status [order_id] [status]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ç—É—Å–æ–≤:\n"
            "‚Ä¢ –ù–û–í–´–ô\n"
            "‚Ä¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù\n" 
            "‚Ä¢ –û–ü–õ–ê–ß–ï–ù\n"
            "‚Ä¢ –û–¢–ü–†–ê–í–õ–ï–ù\n"
            "‚Ä¢ –î–û–°–¢–ê–í–õ–ï–ù\n"
            "‚Ä¢ –û–¢–ú–ï–ù–ï–ù"
        )
        return
        
    try:
        order_id = int(args[1])
        status = ' '.join(args[2:])
        
        success = db_actions.update_order_status(order_id, status)
        
        if success:
            order_info = db_actions.get_order_by_id(order_id)
            if order_info:
                user_data = db_actions.get_user_data(order_info['user_id'])
                product = db_actions.get_product(order_info['product_id'])
                
                status_texts = {
                    'new': 'üÜï –ù–û–í–´–ô',
                    'confirmed': '‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù',
                    'paid': 'üí≥ –û–ü–õ–ê–ß–ï–ù', 
                    'shipped': 'üöö –û–¢–ü–†–ê–í–õ–ï–ù',
                    'delivered': 'üì¶ –î–û–°–¢–ê–í–õ–ï–ù',
                    'cancelled': '‚ùå –û–¢–ú–ï–ù–ï–ù'
                }
                
                status_display = status_texts.get(status.lower(), status.upper())
                
                # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
                try:
                    bot.send_message(
                        order_info['user_id'],
                        f"üì¶ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω:\n"
                        f"üîÑ {status_display}\n\n"
                        f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product) if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                        f"üí∞ –°—É–º–º–∞: {get_product_field(product, 'price', 0) if product else '0'}‚ÇΩ"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            bot.send_message(user_id, f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status}'")
        else:
            bot.send_message(user_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        bot.send_message(user_id, "‚ùå order_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–û–í–´–• –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù–ê ============

@bot.message_handler(func=lambda msg: msg.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
def admin_add_product_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'"""
    clear_temp_data(message.from_user.id)
    add_product(message)

@bot.message_handler(func=lambda msg: msg.text == 'üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ')
def admin_user_info_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'"""
    clear_temp_data(message.from_user.id)
    user_info(message)

@bot.message_handler(func=lambda msg: msg.text == 'üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∏–¥–∫—É')
def admin_set_discount_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∏–¥–∫—É'"""
    clear_temp_data(message.from_user.id)
    bot.send_message(message.from_user.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_discount [user_id] [%]")

@bot.message_handler(func=lambda msg: msg.text == 'üí∞ –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã')
def admin_add_coins_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã'"""
    clear_temp_data(message.from_user.id)
    bot.send_message(message.from_user.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_coins [user_id] [amount]")

@bot.message_handler(func=lambda msg: msg.text == 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã')
def admin_upload_products_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã'"""
    clear_temp_data(message.from_user.id)
    upload_products(message)

@bot.message_handler(func=lambda msg: msg.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞')
def admin_stats_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞'"""
    clear_temp_data(message.from_user.id)
    admin_stats(message)

@bot.message_handler(func=lambda msg: msg.text == 'üìã –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
def admin_export_users_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'"""
    clear_temp_data(message.from_user.id)
    export_users(message)

@bot.message_handler(func=lambda msg: msg.text == 'üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç')
def admin_create_post_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç'"""
    clear_temp_data(message.from_user.id)
    create_post(message)

@bot.message_handler(func=lambda msg: msg.text == 'üì¶ –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤')
def admin_export_products_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤'"""
    clear_temp_data(message.from_user.id)
    export_products(message)

@bot.message_handler(func=lambda msg: msg.text == 'üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤')
def admin_order_status_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤'"""
    clear_temp_data(message.from_user.id)
    bot.send_message(
        message.from_user.id,
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /order_status [order_id] [status]\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ç—É—Å–æ–≤:\n"
        "‚Ä¢ –ù–û–í–´–ô\n"
        "‚Ä¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù\n" 
        "‚Ä¢ –û–ü–õ–ê–ß–ï–ù\n"
        "‚Ä¢ –û–¢–ü–†–ê–í–õ–ï–ù\n"
        "‚Ä¢ –î–û–°–¢–ê–í–õ–ï–ù\n"
        "‚Ä¢ –û–¢–ú–ï–ù–ï–ù"
    )

@bot.message_handler(commands=['orders'])
def list_orders(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    user_id = message.from_user.id
    clear_temp_data(user_id)
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    status_filter = None
    args = message.text.split()
    if len(args) > 1:
        status_filter = args[1].lower()
    
    orders = db_actions.get_all_orders(status_filter)
    
    if not orders:
        bot.send_message(user_id, "–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    orders_text = "üì¶ –°–ü–ò–°–û–ö –ó–ê–ö–ê–ó–û–í"
    if status_filter:
        orders_text += f" (—Ñ–∏–ª—å—Ç—Ä: {status_filter})"
    orders_text += "\n\n"
    
    for order in orders:
        product = db_actions.get_product(order['product_id'])
        user_data = db_actions.get_user_data(order['user_id'])
        
        orders_text += (
            f"üõí –ó–∞–∫–∞–∑ #{order['order_id']}\n"
            f"üë§ {user_data['first_name']} {user_data['last_name']}\n"
            f"üõçÔ∏è {get_product_name(product) if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
            f"üïí {order['created_at']}\n"
            f"üîó /order_info_{order['order_id']}\n\n"
        )
    
    bot.send_message(user_id, orders_text)

@bot.message_handler(func=lambda message: message.text.startswith('/order_info_'))
def order_info(message):
    user_id = message.from_user.id
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    try:
        order_id = int(message.text.split('_')[2])
        order_info = db_actions.get_order_by_id(order_id)
        
        if not order_info:
            bot.send_message(user_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        product = db_actions.get_product(order_info['product_id'])
        user_data = db_actions.get_user_data(order_info['user_id'])
        buttons = Bot_inline_btns()
        
        info_text = (
            f"üì¶ –ó–ê–ö–ê–ó #{order_id}\n\n"
            f"üë§ –ö–õ–ò–ï–ù–¢:\n"
            f"‚Ä¢ –ò–º—è: {user_data['first_name']} {user_data['last_name']}\n"
            f"‚Ä¢ @{user_data['username']}\n"
            f"‚Ä¢ ID: {user_data['user_id']}\n\n"
            f"üõçÔ∏è –¢–û–í–ê–†:\n"
            f"‚Ä¢ {get_product_name(product) if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {get_product_field(product, 'price', 0) if product else '0'}‚ÇΩ\n\n"
            f"üì¶ –î–û–°–¢–ê–í–ö–ê:\n"
            f"‚Ä¢ –ì–æ—Ä–æ–¥: {order_info['city']}\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: {order_info['address']}\n"
            f"‚Ä¢ –§–ò–û: {order_info['full_name']}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {order_info['phone']}\n"
            f"‚Ä¢ –°–ø–æ—Å–æ–±: {order_info['delivery_type']}\n\n"
            f"üìä –°–¢–ê–¢–£–°: {order_info['status']}\n"
            f"üïí –°–û–ó–î–ê–ù: {order_info['created_at']}\n\n"
            f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /order_status {order_id} [—Å—Ç–∞—Ç—É—Å]"
        )
        
        bot.send_message(user_id, info_text, reply_markup=buttons.create_order_status_buttons(order_id))
        
    except (IndexError, ValueError):
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['add_product'])
def add_product(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
        
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
        
    bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")
    bot.register_next_step_handler(message, process_product_photo)

@bot.message_handler(commands=['cancel'])
def cancel_command(message):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    user_id = message.from_user.id
    clear_temp_data(user_id)
    bot.send_message(user_id, "‚ùå –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω")

@bot.message_handler(commands=['check_product'])
def check_product_data(message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id
    clear_temp_data(user_id)
    
    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    args = message.text.split()
    if len(args) != 2:
        bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_product <product_id>")
        return
    
    try:
        product_id = int(args[1])
        product = db_actions.get_product(product_id)
        
        if not product:
            bot.send_message(user_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞
        info = f"üîç –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ ID {product_id}:\n\n"
        for key, value in product.items():
            info += f"‚Ä¢ {key}: {value}\n"
        
        bot.send_message(user_id, info)
        
    except ValueError:
        bot.send_message(user_id, "‚ùå ID —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

@bot.message_handler(commands=['check_product_by_table_id'])
def check_product_by_table_id(message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ table_id (–∞—Ä—Ç–∏–∫—É–ª—É)"""
    user_id = message.from_user.id
    clear_temp_data(user_id)

    if not db_actions.user_is_admin(user_id):
        bot.send_message(user_id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    args = message.text.split()
    if len(args) != 2:
        bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_product_by_table_id <table_id>")
        return

    try:
        table_id = args[1]
        product = db_actions.get_product_by_table_id(table_id)

        if not product:
            bot.send_message(user_id, f"‚ùå –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {table_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        info = f"üîç –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {table_id}:\n\n"
        for key, value in product.items():
            info += f"‚Ä¢ {key}: {repr(value)}\n"

        bot.send_message(user_id, info)

    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['test_order'])
def test_order(message):
    user_id = message.from_user.id
    clear_temp_data(user_id)
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞
        temp_data[user_id] = {
            'order': {
                'product_id': 36,
                'size': '42.0',
                'step': 'ask_delivery'
            }
        }
        
        delivery_form = (
            "üì¶ –î–õ–Ø –û–§–û–†–ú–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "üèôÔ∏è –ì–æ—Ä–æ–¥: –í–∞—à –≥–æ—Ä–æ–¥\n"
            "üìç –ê–¥—Ä–µ—Å: –£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞\n"
            "üë§ –§–ò–û: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +79123456789\n"
            "üöö –î–æ—Å—Ç–∞–≤–∫–∞: –°–î–≠–ö\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ú–æ—Å–∫–≤–∞\n"
            "—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 5\n"
            "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
            "+79123456789\n"
            "–°–î–≠–ö"
        )
        
        bot.send_message(user_id, delivery_form)
        
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

def process_product_photo(message):
    if not message.photo:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")
        return
        
    photo_id = message.photo[-1].file_id
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    bot.register_next_step_handler(
        message, 
        lambda m: process_product_name(m, photo_id)
    )

def process_product_name(message, photo_id):
    name = message.text
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    bot.register_next_step_handler(
        message, 
        lambda m: process_product_description(m, photo_id, name)
    )

def process_product_description(message, photo_id, name):
    description = message.text
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)")
    bot.register_next_step_handler(
        message, 
        lambda m: process_product_price(m, photo_id, name, description)
    )

def process_product_price(message, photo_id, name, desc):
    try:
        price = float(message.text)
    
        user_id = message.from_user.id
        temp_data[user_id] = {
            'name': name,
            'description': desc,
            'price': price,
            'photo_id': photo_id,
            'step': 'ready_to_save'
        }
        
        # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä
        product_id = db_actions.add_product(
            name=name,
            description=desc,
            price=price,
            price_yuan=0,
            photo_id=photo_id,
            category="–º–∞–≥–∞–∑–∏–Ω"
        )
        
        if product_id:
            bot.send_message(
                message.chat.id,
                f"‚úÖ –¢–æ–≤–∞—Ä ¬´{name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
                f"üÜî ID: {product_id}"
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
            
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in temp_data:
            del temp_data[user_id]
            
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞")

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ============

@bot.callback_query_handler(func=lambda call: call.data == 'exchange_coin')
def exchange_coin(call):
    user_id = call.from_user.id
    user_data = db_actions.get_user_data(user_id)
    
    if not user_data:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    if user_data['bs_coin'] < 500:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BS Coin! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 500")
        return
        
    db_actions.update_user_stats(user_id, 'bs_coin', -500)
    db_actions.update_user_stats(user_id, 'discount', 5)
    
    bot.answer_callback_query(call.id, "‚úÖ –£—Å–ø–µ—à–Ω–æ! 500 BS Coin –æ–±–º–µ–Ω—è–Ω—ã –Ω–∞ 5% —Å–∫–∏–¥–∫–∏")
    
    user_data = db_actions.get_user_data(user_id)
    buttons = Bot_inline_btns()
    
    achievements_str = ""
    if user_data['achievements']:
        icons = {"first_order": "üöÄ", "active_commentator": "üí¨", "referral_king": "üëë"}
        achievements_str = "\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: " + " ".join(
            [icons.get(a, "üåü") for a in user_data['achievements']]
        )
    
    achievements_str += "\n\nüìñ [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–∏—Å—Ç–µ–º–µ –∞—á–∏–≤–æ–∫](https://telegra.ph/FAQ-Sistema-achivok--Bridge-Side-Collective-09-19)"
    
    profile_msg = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üÜî ID: <code>{user_data['user_id']}</code>\n"
        f"üåü –°—Ç–∞—Ç—É—Å: {user_data['status']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_data['comments']}\n"
        f"üì¶ –ó–∞–∫–∞–∑—ã: {user_data['orders']}\n"
        f"ü™ô BS Coin: {user_data['bs_coin']}\n"
        f"üéÅ –°–∫–∏–¥–∫–∞: {user_data['discount']}%\n"
        f"{achievements_str}"
    )
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=profile_msg,
        parse_mode="HTML",
        reply_markup=buttons.profile_buttons(user_data)
    )
    
    bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ–±–º–µ–Ω—è–ª–∏ 500 BS Coin –Ω–∞ 5% —Å–∫–∏–¥–∫–∏")


@bot.callback_query_handler(func=lambda call: call.data == 'how_to_get_coins')
def how_to_get_coins(call):
    user_id = call.from_user.id
    user_data = db_actions.get_user_data(user_id)
    
    if not user_data:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(
        text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        callback_data="ref_link"
    )
    markup.add(btn1)
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=f"üíé –°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è BS Coin:\n\n"
            f"1. üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +10 BS Coin –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (/start)\n"
            f"2. üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: +100 BS Coin –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ (/ref)\n"
            f"3. üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ: –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã\n"
            f"4. üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n\n"
            f"üìñ [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–∏—Å—Ç–µ–º–µ –∞—á–∏–≤–æ–∫](https://telegra.ph/FAQ-Sistema-achivok--Bridge-Side-Collective-09-19)\n\n"
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data['bs_coin']} BS Coin",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'ref_link')
def ref_link(call):
    user_id = call.message.chat.id
    user_data = db_actions.get_user_data(user_id)
    
    if not user_data:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
        
    ref_count = db_actions.get_referral_stats(user_id)
    ref_link = f"https://t.me/{bot.get_me().username}?start={user_data['referral_code']}"
    
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(
        text="üíé –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä–∞–º",
        callback_data="back_to_catalog"
    )
    markup.add(btn1)
    
    ref_msg = (
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
        f"‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 100 BS Coin\n"
        f"‚Ä¢ –í–∞—à –¥—Ä—É–∑—å—è –ø–æ–ª—É—á–∞–µ—Ç 50 BS Coin –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–∫–∞–∑–µ\n\n"
        f"üöÄ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {ref_count}\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {ref_count * 100} BS Coin"
    )
    
    try:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=ref_msg,
            parse_mode="HTML",
            reply_markup=markup
        )
    except:
        bot.send_message(
            user_id,
            ref_msg,
            parse_mode="HTML",
            reply_markup=markup
        )
    bot.answer_callback_query(call.id)


def publish_product_to_channel(product):
    try:
        if not product.get('product_id'):
            log_error(logger, "product_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return None
            
        config_data = config.get_config()
        chat_id = config_data['chat_id']
        topic_id = config_data['topics']['–º–∞–≥–∞–∑–∏–Ω']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        name = product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        description = product.get('description', '') or ''
        # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏-—Ö—ç—à—Ç–µ–≥–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        if '\n' in description:
            _lines = description.split('\n')
            description = '\n'.join([ln for ln in _lines if not ln.strip().startswith('#')]).strip()
        table_id = product.get('table_id') or product.get('article') or ''
        price = product.get('price', 0)
        # –•—ç—à—Ç–µ–≥–∏: –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –∏–∑ –ø–æ–ª—è keywords
        hashtags = ''
        if 'keywords' in product and product.get('keywords'):
            hashtags = product.get('keywords', '').strip()
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫–∏-—Ö—ç—à—Ç–µ–≥–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            orig_desc = product.get('description', '') or ''
            if '\n' in orig_desc:
                h_lines = [ln.strip() for ln in orig_desc.split('\n') if ln.strip().startswith('#')]
                if h_lines:
                    hashtags = ' '.join(h_lines)
        
        caption_parts = []
        caption_parts.append(f"{name}")
        if description:
            caption_parts.append(f"{description}")
        if table_id:
            caption_parts.append(f"<b>–ê—Ä—Ç–∏–∫—É–ª: {table_id}</b>")
        caption_parts.append(f"–¶–µ–Ω–∞: {price}‚ÇΩ")

        # –†–∞–∑–º–µ—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ)
        try:
            variations = db_actions.get_product_variations(product.get('product_id'))
            available_sizes = [v['size'] for v in variations if v.get('quantity', 0) > 0 and v.get('size')]
        except Exception:
            available_sizes = []
        # –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∂–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        import re
        numeric_sizes = []
        for s in available_sizes:
            ss = str(s).strip()
            m = re.search(r"(\d+(?:[\.,]\d+)?)", ss)
            if not m:
                continue
            try:
                val = float(m.group(1).replace(',', '.'))
                numeric_sizes.append((val, ss))
            except Exception:
                continue
        seen = set()
        numeric_sizes_sorted = []
        for val, ss in sorted(numeric_sizes, key=lambda x: x[0]):
            if val in seen:
                continue
            seen.add(val)
            disp = str(int(val)) if val.is_integer() else ("{:.1f}".format(val).rstrip('0').rstrip('.') if val % 1 != 0 else str(int(val)))
            numeric_sizes_sorted.append(disp)
        if numeric_sizes_sorted:
            sizes_text = ", ".join(numeric_sizes_sorted[:10])
            if len(numeric_sizes_sorted) > 10:
                sizes_text += f" –∏ –µ—â–µ {len(numeric_sizes_sorted) - 10}"
            caption_parts.append(f"–†–∞–∑–º–µ—Ä—ã: {sizes_text}")

        # –°—Å—ã–ª–∫–∏: –ö—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ –∏ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (HTML)
        try:
            bot_username = bot.get_me().username
        except Exception:
            bot_username = ''
        deep_link = f"https://t.me/{bot_username}?start=product_{product['product_id']}" if bot_username else ""
        support_link = f"https://t.me/{bot_username}?start=support" if bot_username else ""
        links_line = []
        if deep_link:
            links_line.append(f"<a href=\"{deep_link}\">–ö—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</a>")
        if support_link:
            links_line.append(f"<a href=\"{support_link}\">–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>")
        if links_line:
            caption_parts.append(" | ".join(links_line))

        # –ü–æ–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        caption_parts.append("–í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π")
        if hashtags:
            caption_parts.append(f"{hashtags}")
        caption = "\n\n".join(caption_parts)
        
        message = bot.send_photo(
            chat_id=chat_id,
            photo=product['photo_id'],
            caption=caption,
            parse_mode="HTML",
            message_thread_id=topic_id
        )
        
        channel_id = str(abs(chat_id))
        return f"https://t.me/c/{channel_id}/{message.message_id}?thread={topic_id}"
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return None

@bot.callback_query_handler(func=lambda call: call.data.startswith('post_product_'))
def select_product_for_post(call):
    user_id = call.from_user.id
    product_id = int(call.data.split('_')[2])
    
    if user_id not in temp_data or temp_data[user_id]['step'] != 'select_product':
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        return
        
    product = db_actions.get_product(product_id)
    if not product:
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    temp_data[user_id]['product_id'] = product_id
    temp_data[user_id]['step'] = 'add_photos'
    temp_data[user_id]['product_name'] = get_product_name(product)
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=f"üì¶ –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {get_product_name(product)}\n\n"
            f"üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 6 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞\n"
            f"üìù –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞\n"
            f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data in ['exclusive_yes_post', 'exclusive_no_post'])
def handle_exclusive_post(call):
    user_id = call.from_user.id
    is_exclusive = (call.data == 'exclusive_yes_post')
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if user_id not in temp_data or 'product_id' not in temp_data[user_id]:
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text="‚ùå –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_post –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
            )
        except:
            bot.send_message(user_id, "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_post –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
        return
        
    product_id = temp_data[user_id]['product_id']
    product = db_actions.get_product(product_id)
    
    if not product:
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        if is_exclusive:
            temp_data[user_id]['step'] = 'ask_coin_price_post'
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text="üíé –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ BS Coin (—Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):\n\n‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ
            success = db_actions.update_product_exclusive(product_id, False, 0)
            if not success:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
                return
                
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            table_id = temp_data[user_id].get('table_id', '')
            post_success = publish_post_to_channel(
                table_id,
                temp_data[user_id].get('photos', []),
                temp_data[user_id].get('text', ''),
                False,
                0
            )
            
            if post_success:
                bot.answer_callback_query(call.id, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                bot.edit_message_text(
                    chat_id=user_id,
                    message_id=call.message.message_id,
                    text=f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @BridgeSide_Store\n\n"
                        f"üõçÔ∏è –¢–æ–≤–∞—Ä: {temp_data[user_id].get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"üéØ –°—Ç–∞—Ç—É—Å: –û–±—ã—á–Ω—ã–π (—Ä—É–±–ª–∏)\n"
                        f"üí∞ –¶–µ–Ω–∞: {get_product_field(product, 'price', 0)}‚ÇΩ"
                )
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞.")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if user_id in temp_data:
                del temp_data[user_id]
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_exclusive_post: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /create_post")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('step') == 'ask_coin_price_post')
def handle_coin_price_input(message):
    user_id = message.from_user.id
    
    if message.text.lower() == '/cancel':
        if user_id in temp_data:
            del temp_data[user_id]
        bot.send_message(user_id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
        
    process_coin_price_post(message)

def process_coin_price_post(message):
    user_id = message.from_user.id
    
    if user_id not in temp_data or temp_data[user_id].get('step') != 'ask_coin_price_post':
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_post –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
        return
        
    if message.text.lower() == '/cancel':
        if user_id in temp_data:
            del temp_data[user_id]
        bot.send_message(user_id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
        
    try:
        coin_price = int(message.text)
        if coin_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            
        product_id = temp_data[user_id]['product_id']
        product = db_actions.get_product(product_id)
        
        if not product:
            bot.send_message(user_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            if user_id in temp_data:
                del temp_data[user_id]
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
        success = db_actions.update_product_exclusive(product_id, True, coin_price)
        if not success:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
            if user_id in temp_data:
                del temp_data[user_id]
            return
        
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
        table_id = temp_data[user_id].get('table_id', '')
        post_success = publish_post_to_channel(
            table_id,
            temp_data[user_id].get('photos', []),
            temp_data[user_id].get('text', ''),
            True,
            coin_price
        )
        
        if post_success:
            bot.send_message(
                user_id,
                f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @BridgeSide_Store\n\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {temp_data[user_id].get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üéØ –°—Ç–∞—Ç—É—Å: –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π\n"
                f"üíé –¶–µ–Ω–∞: {coin_price} BS Coin"
            )
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞.")
        
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.")
        bot.send_message(user_id, "üíé –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ BS Coin:")
        return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
    finally:
        if user_id in temp_data:
            del temp_data[user_id]

def publish_post_to_channel(table_id, photos, text, is_exclusive, coin_price=0):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ table_id (–∞—Ä—Ç–∏–∫—É–ª—É)
        product = db_actions.get_product_by_table_id(table_id)
        if not product:
            log_error(logger, f"–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {table_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        config_data = config.get_config()
        channel_id = config_data.get('store_channel_id', '@BridgeSide_Store')
        
        if not channel_id:
            log_error(logger, "–ù–µ —É–∫–∞–∑–∞–Ω channel_id –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
            return False
        
        actual_product_id = get_product_field(product, 'product_id', 0)
        deep_link = f"https://t.me/{bot.get_me().username}?start=product_{actual_product_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        product_name = get_product_field(product, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        description_full = get_product_field(product, 'description_full', '')
        product_table_id = get_product_field(product, 'table_id', '')
        keywords = get_product_field(product, 'keywords', '')
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        log_info(logger, f"DEBUG: product_name: {repr(product_name)}")
        log_info(logger, f"DEBUG: description_full: {repr(description_full)}")
        log_info(logger, f"DEBUG: product_table_id: {repr(product_table_id)}")
        log_info(logger, f"DEBUG: keywords: {repr(keywords)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        # –í–∞—Ä–∏–∞—Ü–∏–∏ –ø–æ product_id, –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ model_id (table_id)
        variations = db_actions.get_product_variations(actual_product_id)
        if not variations:
            try:
                model_id = get_product_field(product, 'table_id', '') or get_product_field(product, 'article', '')
                if model_id:
                    variations = db_actions.get_product_variations_by_model_id(model_id)
            except Exception:
                variations = []
        available_sizes = []
        if variations:
            for variation in variations:
                size = get_product_field(variation, 'size', '')
                quantity = get_product_field(variation, 'quantity', 0)
                if quantity > 0 and size:
                    available_sizes.append(size)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–Ω—É
        if not is_exclusive:
            price_text = f"üí∞ –¶–µ–Ω–∞: {get_product_field(product, 'price', 0)}‚ÇΩ"
        else:
            price_text = f"üíé –¶–µ–Ω–∞: {coin_price} BS Coin"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã:
        # –ù–∞–∑–≤–∞–Ω–∏–µ, –û–ø–∏—Å–∞–Ω–∏–µ, –ê—Ä—Ç–∏–∫—É–ª (–∂–∏—Ä–Ω—ã–π), –†–∞–∑–º–µ—Ä—ã, –¶–µ–Ω–∞, –°—Å—ã–ª–∫–∏, –í–æ–∑–≤—Ä–∞—Ç, –•—ç—à—Ç–µ–≥–∏
        caption_parts = []
        caption_parts.append(f"{product_name}")
        
        description_old = get_product_field(product, 'description', '')
        description_to_show = description_full if description_full else description_old
        if description_to_show:
            description_clean = description_to_show
            if '\n' in description_clean:
                lines = description_clean.split('\n')
                description_clean = '\n'.join([line for line in lines if not line.strip().startswith('#')]).strip()
            if description_clean:
                caption_parts.append(description_clean)
        
        # –ë–ª–æ–∫ –¥–µ—Ç–∞–ª–µ–π: –ê—Ä—Ç–∏–∫—É–ª, –†–∞–∑–º–µ—Ä—ã, –¶–µ–Ω–∞ ‚Äî –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º, –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
        details_lines = []
        if product_table_id:
            details_lines.append(f"<b>–ê—Ä—Ç–∏–∫—É–ª: {product_table_id}</b>")
        sizes_text = None
        if available_sizes:
            import re
            numeric_sizes = []
            for s in available_sizes:
                ss = str(s).strip()
                m = re.search(r"(\d+(?:[\.,]\d+)?)", ss)
                if not m:
                    continue
                try:
                    val = float(m.group(1).replace(',', '.'))
                    numeric_sizes.append((val, ss))
                except Exception:
                    continue
            seen = set()
            numeric_sizes_sorted = []
            for val, ss in sorted(numeric_sizes, key=lambda x: x[0]):
                if val in seen:
                    continue
                seen.add(val)
                disp = str(int(val)) if val.is_integer() else ("{:.1f}".format(val).rstrip('0').rstrip('.') if val % 1 != 0 else str(int(val)))
                numeric_sizes_sorted.append(disp)
            if numeric_sizes_sorted:
                sizes_text = ", ".join(numeric_sizes_sorted[:10])
                if len(numeric_sizes_sorted) > 10:
                    sizes_text += f" –∏ –µ—â–µ {len(numeric_sizes_sorted) - 10}"
            else:
                uniq_raw = []
                seen_raw = set()
                for s in available_sizes:
                    ss = str(s).strip()
                    if ss and ss not in seen_raw:
                        seen_raw.add(ss)
                        uniq_raw.append(ss)
                if uniq_raw:
                    sizes_text = ", ".join(uniq_raw[:10])
                    if len(uniq_raw) > 10:
                        sizes_text += f" –∏ –µ—â–µ {len(uniq_raw) - 10}"
        if sizes_text:
            details_lines.append(f"–†–∞–∑–º–µ—Ä—ã: {sizes_text}")
        details_lines.append(f"{price_text.replace('üí∞ ', '').replace('üíé ', '')}")
        if details_lines:
            caption_parts.append("\n".join(details_lines))

        # –°—Å—ã–ª–∫–∏: –ö—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ –∏ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        try:
            bot_username = bot.get_me().username
        except Exception:
            bot_username = ''
        support_link = f"https://t.me/{bot_username}?start=support" if bot_username else ""
        links_line = []
        links_line.append(f"<a href=\"{deep_link}\">üõí –ö—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</a>")
        if support_link:
            links_line.append(f"<a href=\"{support_link}\">üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>")
        if links_line:
            caption_parts.append(" \n ".join(links_line))

        # –ü–æ–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        caption_parts.append("–í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π")
        
        hashtags_to_show = ""
        if description_to_show and '\n' in description_to_show:
            lines = description_to_show.split('\n')
            hashtag_lines = [line.strip() for line in lines if line.strip().startswith('#')]
            if hashtag_lines:
                hashtags_to_show = ' '.join(hashtag_lines)
        if not hashtags_to_show and keywords:
            hashtags_to_show = keywords.strip()
        if hashtags_to_show:
            caption_parts.append(f"{hashtags_to_show}")
        
        caption = "\n\n".join(caption_parts)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        log_info(logger, f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª caption: {repr(caption)}")
        log_info(logger, f"DEBUG: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π caption: {len(caption_parts)}")
        for i, part in enumerate(caption_parts):
            log_info(logger, f"DEBUG: –ß–∞—Å—Ç—å {i}: {repr(part)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        if photos and len(photos) > 0:
            media = []
            
            # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å caption
            media.append(types.InputMediaPhoto(photos[0], caption=caption, parse_mode="HTML"))

            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ caption
            for photo in photos[1:]:
                media.append(types.InputMediaPhoto(photo))

            try:
                bot.send_media_group(
                    chat_id=channel_id,
                    media=media
                )
                return True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    bot.send_message(chat_id=channel_id, text=caption, parse_mode="HTML")
                    return True
                except Exception as e2:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e2}")
                    return False
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                bot.send_message(chat_id=channel_id, text=caption, parse_mode="HTML")
                return True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
                return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        return False
    
@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('step') in ['add_photos', 'add_text'])
def handle_post_creation(message):
    user_id = message.from_user.id
    
    if message.text == '/cancel':
        if user_id in temp_data:
            del temp_data[user_id]
        bot.send_message(user_id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
        
    try:
        if temp_data[user_id]['step'] == 'add_photos':
            if message.content_type == 'photo':
                if len(temp_data[user_id]['photos']) < 6:
                    temp_data[user_id]['photos'].append(message.photo[-1].file_id)
                    remaining = 6 - len(temp_data[user_id]['photos'])
                    if remaining > 0:
                        bot.send_message(user_id, f"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {remaining} —Ñ–æ—Ç–æ")
                    else:
                        bot.send_message(user_id, "‚úÖ –ú–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
                else:
                    bot.send_message(user_id, "‚ùå –ú–∞–∫—Å–∏–º—É–º 6 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
            elif message.content_type == 'text':
                temp_data[user_id]['step'] = 'add_text'
                temp_data[user_id]['text'] = message.text
                ask_exclusive_status(user_id)
                
        elif temp_data[user_id]['step'] == 'add_text':
            temp_data[user_id]['text'] = message.text
            ask_exclusive_status(user_id)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /create_post")
        if user_id in temp_data:
            del temp_data[user_id]

@bot.callback_query_handler(func=lambda call: call.data.startswith('size_'))
def handle_size_selection(call):
    user_id = call.from_user.id
    try:
        parts = call.data.split('_')
        product_id = int(parts[1])
        size = parts[2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞
        if not db_actions.check_size_availability(product_id, size):
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in temp_data:
            temp_data[user_id] = {}
        
        temp_data[user_id]['selected_product'] = product_id
        temp_data[user_id]['selected_size'] = size
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product = db_actions.get_product(product_id)
        if not product:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫–∞–∑–∞
        markup = types.InlineKeyboardMarkup()
        order_btn = types.InlineKeyboardButton(
            text="üõí –ó–∞–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å",
            callback_data=f"order_{product_id}_{size}"
        )
        markup.add(order_btn)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if call.message.caption:
                bot.edit_message_caption(
                    chat_id=user_id,
                    message_id=call.message.message_id,
                    caption=call.message.caption,
                    reply_markup=markup
                )
            else:
                bot.edit_message_text(
                    chat_id=user_id,
                    message_id=call.message.message_id,
                    text=call.message.text,
                    reply_markup=markup
                )
            
            bot.answer_callback_query(call.id, f"‚úÖ –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: {size}")
            
        except Exception as e:
            log_error(logger, e, "–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞")
                
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –≤ handle_size_selection")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('order_'))
def handle_order(call):
    user_id = call.from_user.id
    try:
        parts = call.data.split('_')
        product_id = int(parts[1])
        size = parts[2] if len(parts) > 2 else None
        
        print(f"DEBUG: –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ - product_id: {product_id}, size: {size}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        if user_id not in temp_data:
            temp_data[user_id] = {}
        
        temp_data[user_id]['order'] = {
            'product_id': product_id,
            'size': size,
            'step': 'ask_city'
        }

        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏
        bot.send_message(
            user_id,
            "üì¶ –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
            "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:"
        )
        bot.answer_callback_query(call.id, "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_order: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_city')
def ask_city(message):
    user_id = message.from_user.id
    temp_data[user_id]['order']['city'] = message.text
    temp_data[user_id]['order']['step'] = 'ask_address'
    bot.send_message(user_id, "üìç –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_address')
def ask_address(message):
    user_id = message.from_user.id
    temp_data[user_id]['order']['address'] = message.text
    temp_data[user_id]['order']['step'] = 'ask_full_name'
    bot.send_message(user_id, "üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_full_name')
def ask_full_name(message):
    user_id = message.from_user.id
    temp_data[user_id]['order']['full_name'] = message.text
    temp_data[user_id]['order']['step'] = 'ask_phone'
    bot.send_message(user_id, "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_phone')
def ask_phone(message):
    user_id = message.from_user.id
    temp_data[user_id]['order']['phone'] = message.text
    temp_data[user_id]['order']['step'] = 'ask_delivery_type'
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–°–î–≠–ö"))
    markup.add(types.KeyboardButton("–î—Ä—É–≥–æ–µ"))
    
    bot.send_message(user_id, "üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä')
def handle_order_button(message):
    bot.send_message(
        message.chat.id,
        "üì¶ –î–ª—è –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
        "üëâ @BridgeSide_Store\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É: https://t.me/BridgeSide_Store",
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_delivery_type')
def ask_delivery_type(message):
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–æ–µ", –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
    if message.text == "–î—Ä—É–≥–æ–µ":
        handle_other_delivery(message)
        return
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    remove_markup = types.ReplyKeyboardRemove()
    
    temp_data[user_id]['order']['delivery_type'] = message.text
    temp_data[user_id]['order']['step'] = 'ask_payment'
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product_id = temp_data[user_id]['order']['product_id']
    product = db_actions.get_product(product_id)
    
    if product:
        price, currency = get_product_price(product)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–∫–∞–∑—É
        order_summary = (
            f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã!\n\n"
            f"üìã –í–∞—à –∑–∞–∫–∞–∑:\n"
            f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product)}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {temp_data[user_id]['order'].get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} {currency}\n\n"
            f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞:\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {temp_data[user_id]['order']['city']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {temp_data[user_id]['order']['address']}\n"
            f"üë§ –§–ò–û: {temp_data[user_id]['order']['full_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {temp_data[user_id]['order']['phone']}\n"
            f"üöö –°–ø–æ—Å–æ–±: {temp_data[user_id]['order']['delivery_type']}\n\n"
            f"üí≥ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ\n\n"
            f"–†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –û–ü–õ–ê–¢–´\n\n"
            f"2200154531899085 \n–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫\n\n"
            f"5280413753453047\n–¢-–±–∞–Ω–∫\n\n"
            f"5228600520272271\n–°–ë–ï–†\n\n"
            f"8-903-191-98-48 \n–°–ü–ë - –Ø–Ω–∞ –ñ."
        )
        
        bot.send_message(user_id, order_summary, reply_markup=remove_markup)

@bot.message_handler(content_types=['photo'], 
                    func=lambda message: 
                    message.from_user.id in temp_data and 
                    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_payment')
def process_payment_photo(message):
    user_id = message.from_user.id
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã
        payment_photo_id = message.photo[-1].file_id
        temp_data[user_id]['order']['payment_photo'] = payment_photo_id
        temp_data[user_id]['order']['step'] = 'confirm_order'
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product_id = temp_data[user_id]['order']['product_id']
        product = db_actions.get_product(product_id)
        
        if product:
            price, currency = get_product_price(product)
            
            order_summary = (
                f"‚úÖ –í–°–ï –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ï–ù–´!\n\n"
                f"üìã –í–∞—à –∑–∞–∫–∞–∑:\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product)}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {temp_data[user_id]['order'].get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üí∞ –¶–µ–Ω–∞: {price} {currency}\n\n"
                f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞:\n"
                f"üèôÔ∏è –ì–æ—Ä–æ–¥: {temp_data[user_id]['order']['city']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {temp_data[user_id]['order']['address']}\n"
                f"üë§ –§–ò–û: {temp_data[user_id]['order']['full_name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {temp_data[user_id]['order']['phone']}\n"
                f"üöö –°–ø–æ—Å–æ–±: {temp_data[user_id]['order']['delivery_type']}\n\n"
                f"üì∏ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–æ\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            confirm_btn = types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
            edit_btn = types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            cancel_btn = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
            markup.add(confirm_btn, edit_btn, cancel_btn)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            bot.send_photo(user_id, payment_photo_id, caption="üì∏ –í–∞—à–µ —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã:")
            bot.send_message(user_id, order_summary, reply_markup=markup)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'confirm_order' and
    message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑')
def confirm_order_final(message):
    user_id = message.from_user.id
    
    try:
        order_data = temp_data[user_id]['order']
        product_id = order_data['product_id']
        product = db_actions.get_product(product_id)
        
        if not product:
            bot.send_message(user_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
        print(f"DEBUG: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ - user_id: {user_id}, product_id: {product_id}")
        print(f"DEBUG: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {order_data}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ
        order_id = db_actions.create_detailed_order(
            user_id=user_id,  # –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id
            product_id=product_id,
            size=order_data.get('size'),
            city=order_data['city'],
            address=order_data['address'],
            full_name=order_data['full_name'], 
            phone=order_data['phone'],
            delivery_type=order_data['delivery_type']
        )
        
        print(f"DEBUG: –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ ID: {order_id}")
        
        if order_id:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            notify_admins_about_order(user_id, product, order_data, order_id, order_data.get('payment_photo'))
            
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            remove_markup = types.ReplyKeyboardRemove()
            
            bot.send_message(
                user_id,
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
                f"üìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
                f"üí¨ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
                reply_markup=remove_markup
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_actions.update_user_stats(user_id, 'orders', 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏
            check_achievement_conditions(user_id, 'first_purchase')
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –≤ check_achievement_conditions
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in temp_data and 'order' in temp_data[user_id]:
            del temp_data[user_id]['order']

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'confirm_order' and
    message.text.lower() == '‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')
def edit_order_data(message):
    user_id = message.from_user.id
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üìç –ê–¥—Ä–µ—Å"),
        types.KeyboardButton("üë§ –§–ò–û"),
        types.KeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω"),
        types.KeyboardButton("üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"),
        types.KeyboardButton("üì∏ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã"),
        types.KeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ")
    )
    
    temp_data[user_id]['order']['step'] = 'edit_choice'
    
    bot.send_message(
        user_id,
        "üìù –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'edit_choice')
def handle_edit_choice(message):
    user_id = message.from_user.id
    choice = message.text
    
    if choice == "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ":
        temp_data[user_id]['order']['step'] = 'confirm_order'
        show_order_confirmation(user_id)
        return
    
    if choice == "üèôÔ∏è –ì–æ—Ä–æ–¥":
        temp_data[user_id]['order']['step'] = 'edit_city'
        bot.send_message(user_id, "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:", reply_markup=types.ReplyKeyboardRemove())
    elif choice == "üìç –ê–¥—Ä–µ—Å":
        temp_data[user_id]['order']['step'] = 'edit_address'
        bot.send_message(user_id, "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:", reply_markup=types.ReplyKeyboardRemove())
    elif choice == "üë§ –§–ò–û":
        temp_data[user_id]['order']['step'] = 'edit_full_name'
        bot.send_message(user_id, "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:", reply_markup=types.ReplyKeyboardRemove())
    elif choice == "üìû –¢–µ–ª–µ—Ñ–æ–Ω":
        temp_data[user_id]['order']['step'] = 'edit_phone'
        bot.send_message(user_id, "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=types.ReplyKeyboardRemove())
    elif choice == "üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏":
        temp_data[user_id]['order']['step'] = 'edit_delivery_type'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–°–î–≠–ö"))
        markup.add(types.KeyboardButton("–î—Ä—É–≥–æ–µ"))
        bot.send_message(user_id, "üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=markup)
    elif choice == "üì∏ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã":
        temp_data[user_id]['order']['step'] = 'edit_payment'
        bot.send_message(user_id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã:", reply_markup=types.ReplyKeyboardRemove())

def show_order_confirmation(user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    product_id = temp_data[user_id]['order']['product_id']
    product = db_actions.get_product(product_id)
    
    if product:
        price, currency = get_product_price(product)
        
        order_summary = (
            f"‚úÖ –í–°–ï –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ï–ù–´!\n\n"
            f"üìã –í–∞—à –∑–∞–∫–∞–∑:\n"
            f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product)}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {temp_data[user_id]['order'].get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} {currency}\n\n"
            f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞:\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {temp_data[user_id]['order']['city']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {temp_data[user_id]['order']['address']}\n"
            f"üë§ –§–ò–û: {temp_data[user_id]['order']['full_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {temp_data[user_id]['order']['phone']}\n"
            f"üöö –°–ø–æ—Å–æ–±: {temp_data[user_id]['order']['delivery_type']}\n\n"
            f"üì∏ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã: {'–ü—Ä–∏–ª–æ–∂–µ–Ω–æ ‚úÖ' if temp_data[user_id]['order'].get('payment_photo') else '–ù–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ ‚ùå'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        confirm_btn = types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
        edit_btn = types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        cancel_btn = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
        markup.add(confirm_btn, edit_btn, cancel_btn)
        
        bot.send_message(user_id, order_summary, reply_markup=markup)

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'edit_city')
def edit_city(message):
    user_id = message.from_user.id
    temp_data[user_id]['order']['city'] = message.text
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üìç –ê–¥—Ä–µ—Å"),
        types.KeyboardButton("üë§ –§–ò–û"),
        types.KeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω"),
        types.KeyboardButton("üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"),
        types.KeyboardButton("üì∏ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã"),
        types.KeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ")
    )
    
    temp_data[user_id]['order']['step'] = 'edit_choice'
    bot.send_message(user_id, "‚úÖ –ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω! –ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'edit_address')
def edit_address(message):
    user_id = message.from_user.id
    temp_data[user_id]['order']['address'] = message.text
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üìç –ê–¥—Ä–µ—Å"),
        types.KeyboardButton("üë§ –§–ò–û"),
        types.KeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω"),
        types.KeyboardButton("üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"),
        types.KeyboardButton("üì∏ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã"),
        types.KeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ")
    )
    
    temp_data[user_id]['order']['step'] = 'edit_choice'
    bot.send_message(user_id, "‚úÖ –ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω! –ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'edit_full_name')
def edit_full_name(message):
    user_id = message.from_user.id
    temp_data[user_id]['order']['full_name'] = message.text
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üìç –ê–¥—Ä–µ—Å"),
        types.KeyboardButton("üë§ –§–ò–û"),
        types.KeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω"),
        types.KeyboardButton("üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"),
        types.KeyboardButton("üì∏ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã"),
        types.KeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ")
    )
    
    temp_data[user_id]['order']['step'] = 'edit_choice'
    bot.send_message(user_id, "‚úÖ –§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'edit_phone')
def edit_phone(message):
    user_id = message.from_user.id
    temp_data[user_id]['order']['phone'] = message.text
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üìç –ê–¥—Ä–µ—Å"),
        types.KeyboardButton("üë§ –§–ò–û"),
        types.KeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω"),
        types.KeyboardButton("üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"),
        types.KeyboardButton("üì∏ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã"),
        types.KeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ")
    )
    
    temp_data[user_id]['order']['step'] = 'edit_choice'
    bot.send_message(user_id, "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω! –ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'edit_delivery_type')
def edit_delivery_type(message):
    user_id = message.from_user.id
    temp_data[user_id]['order']['delivery_type'] = message.text
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üìç –ê–¥—Ä–µ—Å"),
        types.KeyboardButton("üë§ –§–ò–û"),
        types.KeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω"),
        types.KeyboardButton("üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"),
        types.KeyboardButton("üì∏ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã"),
        types.KeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ")
    )
    
    temp_data[user_id]['order']['step'] = 'edit_choice'
    bot.send_message(user_id, "‚úÖ –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω! –ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(content_types=['photo'], 
                    func=lambda message: 
                    message.from_user.id in temp_data and 
                    temp_data[message.from_user.id].get('order', {}).get('step') == 'edit_payment')
def edit_payment(message):
    user_id = message.from_user.id
    temp_data[user_id]['order']['payment_photo'] = message.photo[-1].file_id
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üìç –ê–¥—Ä–µ—Å"),
        types.KeyboardButton("üë§ –§–ò–û"),
        types.KeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω"),
        types.KeyboardButton("üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"),
        types.KeyboardButton("üì∏ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã"),
        types.KeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ")
    )
    
    temp_data[user_id]['order']['step'] = 'edit_choice'
    bot.send_message(user_id, "‚úÖ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'confirm_order' and
    message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑')
def cancel_order(message):
    user_id = message.from_user.id
    
    if user_id in temp_data and 'order' in temp_data[user_id]:
        del temp_data[user_id]['order']
    
    remove_markup = types.ReplyKeyboardRemove()
    
    bot.send_message(
        user_id,
        "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!",
        reply_markup=remove_markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith(('approve_review_', 'reject_review_')))
def handle_review_moderation(call):
    try:
        parts = call.data.split('_')
        action = parts[0]
        user_id = int(parts[2])
        
        review_key = None
        review_data = None
        
        for key in list(pending_reviews.keys()):
            if key.startswith(f"{user_id}_"):
                review_key = key
                review_data = pending_reviews[key]
                break
        
        if not review_data:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
            return
            
        if action == 'approve':
            photos_json = json.dumps(review_data.get('photos', [])) if review_data.get('photos') else None
            db_actions.add_review(
                user_id, 
                review_data['text'], 
                photos_json
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞
            check_achievement_conditions(user_id, 'first_review_with_photo')
            
            publish_review_to_channel(user_id, review_data)
            
            bot.answer_callback_query(call.id, "‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω")
            bot.send_message(
                user_id,
                "üéâ –í–∞—à –æ—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @BridgeSide_Featback!"
            )
            
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            bot.send_message(
                user_id,
                "‚ùå –í–∞—à –æ—Ç–∑—ã–≤ –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

@bot.callback_query_handler(func=lambda call: call.data == 'start_review')
def start_review(call):
    user_id = call.from_user.id
    
    if user_id not in temp_data:
        temp_data[user_id] = {}
    
    temp_data[user_id]['step'] = 'writing_review'
    temp_data[user_id]['photos'] = []
    
    bot.send_message(
        user_id,
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤. –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞\n"
        "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_order_'))
def handle_order_rejection(call):
    try:
        admin_id = call.from_user.id
        if not db_actions.user_is_admin(admin_id):
            bot.answer_callback_query(call.id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
            
        order_id = int(call.data.split('_')[2])
        
        order_info = db_actions.get_order_by_id(order_id)
        if not order_info:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        db_actions.return_product_quantity(order_id)
            
        user_data = db_actions.get_user_data(order_info['user_id'])
        product = db_actions.get_product(order_info['product_id'])
        
        temp_data[admin_id] = {
            'reject_order': {
                'order_id': order_id,
                'message_id': call.message.message_id,
                'chat_id': call.message.chat.id,
                'is_photo': call.message.photo is not None,
                'topic_id': call.message.message_thread_id
            }
        }
        
        bot.answer_callback_query(
            call.id, 
            "üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –≤ —Ç–æ–ø–∏–∫–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", 
            show_alert=True
        )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text and "–ó–ê–ö–ê–ó #" in message.reply_to_message.text)
def handle_topic_reply(message):
    try:
        admin_id = message.from_user.id
        if not db_actions.user_is_admin(admin_id):
            return
            
        replied_message = message.reply_to_message
        replied_text = replied_message.text if replied_message.text else replied_message.caption

        import re
        order_id_match = re.search(r'–ó–ê–ö–ê–ó #(\d+)', replied_text)
        if not order_id_match:
            return
            
        order_id = int(order_id_match.group(1))
        reason = message.text
        
        db_actions.return_product_quantity(order_id)
        
        db_actions.update_order_status(order_id, f"‚ùå –û–¢–ö–õ–û–ù–ï–ù: {reason}")
        
        order_info = db_actions.get_order_by_id(order_id)
        if not order_info:
            return
            
        user_data = db_actions.get_user_data(order_info['user_id'])
        product = db_actions.get_product(order_info['product_id'])
        
        try:
            if replied_message.caption:
                new_caption = replied_message.caption.replace("‚è≥ –û–ñ–ò–î–ê–ï–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø", f"‚ùå –û–¢–ö–õ–û–ù–ï–ù: {reason}")
                bot.edit_message_caption(
                    chat_id=replied_message.chat.id,
                    message_id=replied_message.message_id,
                    caption=new_caption,
                    message_thread_id=replied_message.message_thread_id,
                    reply_markup=None
                )
            else:
                new_text = replied_message.text.replace("‚è≥ –û–ñ–ò–î–ê–ï–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø", f"‚ùå –û–¢–ö–õ–û–ù–ï–ù: {reason}")
                bot.edit_message_text(
                    chat_id=replied_message.chat.id,
                    message_id=replied_message.message_id,
                    text=new_text,
                    message_thread_id=replied_message.message_thread_id,
                    reply_markup=None
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        try:
            bot.send_message(
                order_info['user_id'],
                f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product) if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                f"üí∞ –°—É–º–º–∞: {get_product_field(product, 'price', 0) if product else '0'}‚ÇΩ\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            
            if product and get_product_field(product, 'is_exclusive'):
                db_actions.update_user_stats(order_info['user_id'], 'bs_coin', get_product_field(product, 'coin_price', 0))
                bot.send_message(
                    order_info['user_id'],
                    f"üíé –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {get_product_field(product, 'coin_price', 0)} BS Coin"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except:
            pass

            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_order_'))
def handle_order_approval(call):
    try:
        admin_id = call.from_user.id
        if not db_actions.user_is_admin(admin_id):
            bot.answer_callback_query(call.id, "‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
            
        order_id = int(call.data.split('_')[2])
        
        order_info = db_actions.get_order_by_id(order_id)
        if not order_info:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –£–±–∏—Ä–∞–µ–º –æ—Å–æ–±—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è user_id –∏ admin_id ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π
            
        user_data = db_actions.get_user_data(order_info['user_id'])
        product = db_actions.get_product(order_info['product_id'])
        

        db_actions.update_order_status(order_id, "‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù")


        try:
            if call.message.caption:
                new_caption = call.message.caption.replace("‚è≥ –û–ñ–ò–î–ê–ï–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø", "‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù")
                bot.edit_message_caption(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    caption=new_caption,
                    reply_markup=None
                )
            else:
                new_text = call.message.text.replace("‚è≥ –û–ñ–ò–î–ê–ï–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø", "‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù")
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=new_text,
                    reply_markup=None
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        try:
            bot.send_message(
                order_info['user_id'],
                f"üéâ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product) if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                f"üí∞ –°—É–º–º–∞: {get_product_field(product, 'price', 0) if product else '0'}‚ÇΩ\n\n"
                f"üì¶ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        bot.answer_callback_query(call.id, "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_reason_'))
def ask_reject_reason(call):
    try:
        order_id = int(call.data.split('_')[2])
        
        bot.answer_callback_query(
            call.id, 
            "üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", 
            show_alert=True
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—á–∏–Ω—ã: {e}")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    'reject_reason' in temp_data[message.from_user.id] and
    message.chat.id == temp_data[message.from_user.id]['reject_reason']['chat_id'])
def process_reject_reason_in_topic(message):
    try:
        admin_id = message.from_user.id
        reason_data = temp_data[admin_id]['reject_reason']
        order_id = reason_data['order_id']
        reason = message.text
        
        order_info = db_actions.get_order_by_id(order_id)
        if not order_info:
            print(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        user_data = db_actions.get_user_data(order_info['user_id'])
        product = db_actions.get_product(order_info['product_id'])
        
        if not user_data or not product:
            log_error(logger, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        

        db_actions.update_order_status(order_id, f"‚ùå –û–¢–ö–õ–û–ù–ï–ù: {reason}")
        

        updated_text = (
            f"üõí –ó–ê–ö–ê–ó #{order_id} ‚ùå –û–¢–ö–õ–û–ù–ï–ù\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_data['first_name']} {user_data['last_name']}\n"
            f"üîó @{user_data['username']}\n"
            f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product)}\n"
            f"üí∞ –¶–µ–Ω–∞: {get_product_field(product, 'price', 0)}‚ÇΩ\n\n"
            f"üì¶ –î–ê–ù–ù–´–ï –î–û–°–¢–ê–í–ö–ò:\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {order_info.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order_info.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üë§ –§–ò–û: {order_info.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üöö –°–ø–æ—Å–æ–±: {order_info.get('delivery_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reason}\n"
            f"üë®‚Äçüíº –û—Ç–∫–ª–æ–Ω–∏–ª: @{message.from_user.username}\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        try:
            if reason_data['is_photo']:
                bot.edit_message_caption(
                    chat_id=reason_data['chat_id'],
                    message_id=reason_data['message_id'],
                    caption=updated_text,
                    reply_markup=None
                )
            else:
                bot.edit_message_text(
                    chat_id=reason_data['chat_id'],
                    message_id=reason_data['message_id'],
                    text=updated_text,
                    reply_markup=None
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        try:
            bot.send_message(
                order_info['user_id'],
                f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product)}\n"
                f"üí∞ –°—É–º–º–∞: {get_product_field(product, 'price', 0)}‚ÇΩ\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            
            if get_product_field(product, 'is_exclusive'):  # is_exclusive
                db_actions.update_user_stats(order_info['user_id'], 'bs_coin', get_product_field(product, 'coin_price', 0))
                bot.send_message(
                    order_info['user_id'],
                    f"üíé –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {get_product_field(product, 'coin_price', 0)} BS Coin"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        if admin_id in temp_data and 'reject_reason' in temp_data[admin_id]:
            del temp_data[admin_id]['reject_reason']
        
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except:
            pass
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_delivery_type' and
    message.text == "–î—Ä—É–≥–æ–µ")
def handle_other_delivery(message):
    user_id = message.from_user.id
    temp_data[user_id]['order']['step'] = 'ask_custom_delivery'
    bot.send_message(user_id, "üöö –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:")

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_custom_delivery')
def process_custom_delivery(message):
    user_id = message.from_user.id
    temp_data[user_id]['order']['delivery_type'] = message.text
    temp_data[user_id]['order']['step'] = 'ask_payment'
    

    remove_markup = types.ReplyKeyboardRemove()
    

    product_id = temp_data[user_id]['order']['product_id']
    product = db_actions.get_product(product_id)
    
    if product:
        price, currency = get_product_price(product)
        

        order_summary = (
            f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã!\n\n"
            f"üìã –í–∞—à –∑–∞–∫–∞–∑:\n"
            f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product)}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {temp_data[user_id]['order'].get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} {currency}\n\n"
            f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞:\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {temp_data[user_id]['order']['city']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {temp_data[user_id]['order']['address']}\n"
            f"üë§ –§–ò–û: {temp_data[user_id]['order']['full_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {temp_data[user_id]['order']['phone']}\n"
            f"üöö –°–ø–æ—Å–æ–±: {temp_data[user_id]['order']['delivery_type']}\n\n"
            f"üí≥ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ"
        )
        
        bot.send_message(user_id, order_summary, reply_markup=remove_markup)

@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_delivery')
def process_delivery_info(message):
    user_id = message.from_user.id
    
    try:

        temp_data[user_id]['order']['delivery_info'] = message.text
        temp_data[user_id]['order']['step'] = 'ask_payment'
        

        payment_request = (
            "‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã!\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ\n\n"
            "üí≥ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞\n\n"
            "–†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –û–ü–õ–ê–¢–´\n\n"
            "2200154531899085 \n–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫\n\n"
            "5280413753453047\n–¢-–±–∞–Ω–∫\n\n"
            "5228600520272271\n–°–ë–ï–†\n\n"
            "8-903-191-98-48 \n–°–ü–ë - –Ø–Ω–∞ –ñ."
        )
        
        bot.send_message(user_id, payment_request)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")



@bot.message_handler(func=lambda message: 
    message.from_user.id in temp_data and 
    'reject_order' in temp_data[message.from_user.id])
def handle_reject_reason(message):
    try:
        admin_id = message.from_user.id
        order_data = temp_data[admin_id]['reject_order']
        order_id = order_data['order_id']
        reason = message.text
        

        db_actions.return_product_quantity(order_id)
        

        db_actions.update_order_status(order_id, f"‚ùå –û–¢–ö–õ–û–ù–ï–ù: {reason}")
        

        order_info = db_actions.get_order_by_id(order_id)
        if not order_info:
            bot.send_message(admin_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        user_data = db_actions.get_user_data(order_info['user_id'])
        product = db_actions.get_product(order_info['product_id'])
        
        try:
            if order_data['is_photo']:
                bot.edit_message_caption(
                    chat_id=order_data['chat_id'],
                    message_id=order_data['message_id'],
                    caption=f"‚ùå –ó–ê–ö–ê–ó –û–¢–ö–õ–û–ù–ï–ù: {reason}",
                    reply_markup=None
                )
            else:
                bot.edit_message_text(
                    chat_id=order_data['chat_id'],
                    message_id=order_data['message_id'],
                    text=f"‚ùå –ó–ê–ö–ê–ó –û–¢–ö–õ–û–ù–ï–ù: {reason}",
                    reply_markup=None
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        try:

            user_id_from_order = order_info['user_id']
            bot.send_message(
                user_id_from_order,
                f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product) if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                f"üí∞ –°—É–º–º–∞: {get_product_field(product, 'price', 0) if product else '0'}‚ÇΩ\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            

            if product and get_product_field(product, 'is_exclusive'):
                db_actions.update_user_stats(user_id_from_order, 'bs_coin', get_product_field(product, 'coin_price', 0))
                bot.send_message(
                    user_id_from_order,
                    f"üíé –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {get_product_field(product, 'coin_price', 0)} BS Coin"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        bot.send_message(admin_id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω")
        

        del temp_data[admin_id]['reject_order']
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
        bot.send_message(admin_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")



@bot.message_handler(content_types=['photo'], 
                    func=lambda message: 
                    message.from_user.id in temp_data and 
                    temp_data[message.from_user.id].get('order', {}).get('step') == 'ask_payment')
def process_payment_photo(message):
    user_id = message.from_user.id
    
    try:

        payment_photo_id = message.photo[-1].file_id
        temp_data[user_id]['order']['payment_photo'] = payment_photo_id
        temp_data[user_id]['order']['step'] = 'confirm_order'

        product_id = temp_data[user_id]['order']['product_id']
        product = db_actions.get_product(product_id)
        
        if product:
            order_summary = (
                f"‚úÖ –í–°–ï –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ï–ù–´!\n\n"
                f"üìã –í–∞—à –∑–∞–∫–∞–∑:\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {get_product_name(product)}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {temp_data[user_id]['order'].get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üí∞ –¶–µ–Ω–∞: {get_product_field(product, 'price', 0)}‚ÇΩ\n\n"
                f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞:\n{temp_data[user_id]['order']['delivery_info']}\n\n"
                f"üì∏ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–æ\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            confirm_btn = types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
            edit_btn = types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            cancel_btn = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
            markup.add(confirm_btn, edit_btn, cancel_btn)
            

            bot.send_photo(user_id, payment_photo_id, caption="üì∏ –í–∞—à–µ —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã:")
            bot.send_message(user_id, order_summary, reply_markup=markup)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")


@bot.callback_query_handler(func=lambda call: call.data.startswith(('approve_review_', 'reject_review_')))
def handle_review_moderation(call):
    try:
        parts = call.data.split('_')
        action = parts[0]
        user_id = int(parts[2])
        
        review_key = None
        review_data = None
        
        for key in list(pending_reviews.keys()):
            if key.startswith(f"{user_id}_"):
                review_key = key
                review_data = pending_reviews[key]
                break
        
        if not review_data:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
            return
            
        if action == 'approve':
            photos_json = json.dumps(review_data.get('photos', [])) if review_data.get('photos') else None
            db_actions.add_review(
                user_id, 
                review_data['text'], 
                photos_json
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞
            check_achievement_conditions(user_id, 'first_review_with_photo')
            
            publish_review_to_channel(user_id, review_data)
            
            bot.answer_callback_query(call.id, "‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω")
            bot.send_message(
                user_id,
                "üéâ –í–∞—à –æ—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @BridgeSide_Featback!"
            )
            
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            bot.send_message(
                user_id,
                "‚ùå –í–∞—à –æ—Ç–∑—ã–≤ –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

@bot.callback_query_handler(func=lambda call: call.data == 'start_review')
def start_review(call):
    user_id = call.from_user.id
    
    if user_id not in temp_data:
        temp_data[user_id] = {}
    
    temp_data[user_id]['step'] = 'writing_review'
    temp_data[user_id]['photos'] = []
    
    bot.send_message(
        user_id,
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤. –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞\n"
        "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('select_size_'))
def select_size(call):
    user_id = call.from_user.id
    product_id = int(call.data.split('_')[2])
    
    product = db_actions.get_product_with_variations(product_id)
    if not product:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    buttons = Bot_inline_btns()
    markup = buttons.size_selection_buttons(product['variations'])
    
    bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith(('size_', 'size_coin_')))
def handle_size_selection(call):
    user_id = call.from_user.id
    try:
        parts = call.data.split('_')
        
        is_exclusive = parts[0] == 'size_coin'
        
        if is_exclusive:
            product_id = int(parts[2])
            size = parts[3]
        else:
            product_id = int(parts[1])
            size = parts[2]
        
        print(f"DEBUG: –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä - product_id: {product_id}, size: '{size}', exclusive: {is_exclusive}")
        
        if not db_actions.check_size_availability(product_id, size):
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if user_id not in temp_data:
            temp_data[user_id] = {}
        
        temp_data[user_id]['selected_product'] = product_id
        temp_data[user_id]['selected_size'] = size
        temp_data[user_id]['is_exclusive'] = is_exclusive
        
        product = db_actions.get_product(product_id)
        if not product:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        markup = types.InlineKeyboardMarkup()
        
        if is_exclusive:
            buy_btn = types.InlineKeyboardButton(
                text=f"üíé –ö—É–ø–∏—Ç—å –∑–∞ {get_product_field(product, 'coin_price', 0)} BS Coin",
                callback_data=f"buy_coin_{product_id}_{size}"
            )
            markup.add(buy_btn)
        else:
            order_btn = types.InlineKeyboardButton(
                text="üõí –ó–∞–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å",
                callback_data=f"order_{product_id}_{size}"
            )
            markup.add(order_btn)
        
        try:
            if call.message.caption:
                bot.edit_message_caption(
                    chat_id=user_id,
                    message_id=call.message.message_id,
                    caption=call.message.caption,
                    reply_markup=markup
                )
            else:
                bot.edit_message_text(
                    chat_id=user_id,
                    message_id=call.message.message_id,
                    text=call.message.text,
                    reply_markup=markup
                )
            
            bot.answer_callback_query(call.id, f"‚úÖ –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: {size}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_size_selection: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞")


# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ============

@bot.message_handler(content_types=['text', 'photo'])
def handle_messages(message):
    user_id = message.from_user.id
    
    if user_id in temp_data and temp_data[user_id].get('step') in ['add_photos', 'add_text']:
        handle_post_creation(message)
        return
        
    if user_id in temp_data and temp_data[user_id].get('step') == 'writing_review':
        handle_review(message)
        return
        

def handle_post_creation(message):
    user_id = message.from_user.id
    
    if message.text == '/cancel':
        if user_id in temp_data:
            del temp_data[user_id]
        bot.send_message(user_id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
        
    if temp_data[user_id]['step'] == 'add_photos':
        if message.content_type == 'photo':
            if len(temp_data[user_id]['photos']) < 6:
                temp_data[user_id]['photos'].append(message.photo[-1].file_id)
                remaining = 6 - len(temp_data[user_id]['photos'])
                bot.send_message(user_id, f"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å: {remaining}")
            else:
                bot.send_message(user_id, "‚ùå –ú–∞–∫—Å–∏–º—É–º 6 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
        elif message.content_type == 'text':
            temp_data[user_id]['step'] = 'add_text'
            temp_data[user_id]['text'] = message.text
            ask_exclusive_status(user_id)
            
    elif temp_data[user_id]['step'] == 'add_text':
        temp_data[user_id]['text'] = message.text
        ask_exclusive_status(user_id)

def handle_review(message):
    user_id = message.from_user.id
    
    review_data = temp_data[user_id]
    
    if message.content_type == 'photo':
        if 'photos' not in review_data:
            review_data['photos'] = []
            
        if len(review_data['photos']) < 3:
            review_data['photos'].append(message.photo[-1].file_id)
            remaining = 3 - len(review_data['photos'])
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="review_done"))
            bot.send_message(user_id, f"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {remaining} —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="review_done"))
            bot.send_message(user_id, "‚ùå –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=markup)
            
    elif message.content_type == 'text':
        text = message.text.strip()
        
        if text.lower() == '/done':
            if 'text' not in review_data or not review_data['text']:
                bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞")
                return
                
            send_review_for_moderation(user_id, review_data)
            
            if user_id in temp_data:
                del temp_data[user_id]
                
            bot.send_message(user_id, "‚úÖ –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
        elif text.lower() == '/cancel':
            if user_id in temp_data:
                del temp_data[user_id]
            bot.send_message(user_id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
        else:
            review_data['text'] = text
            photos_count = len(review_data.get('photos', []))
            remaining_photos = 3 - photos_count
            
            if photos_count > 0:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="review_done"))
                bot.send_message(
                    user_id, 
                    f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {photos_count}/3. "
                    f"–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {remaining_photos} —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
                    reply_markup=markup
                )
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="review_done"))
                bot.send_message(
                    user_id, 
                    f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ {remaining_photos} —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
                    reply_markup=markup
                )

@bot.callback_query_handler(func=lambda call: call.data == 'review_done')
def handle_review_done(call):
    try:
        user_id = call.from_user.id
        if temp_data.get(user_id, {}).get('step') != 'writing_review':
            bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞")
            return
        review_data = temp_data.get(user_id) or {}
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        if not review_data.get('text'):
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞")
            bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞")
            return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        send_review_for_moderation(user_id, review_data)
        if user_id in temp_data:
            del temp_data[user_id]
        bot.answer_callback_query(call.id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        bot.send_message(user_id, "‚úÖ –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞")
        try:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")
        except Exception:
            pass


@bot.channel_post_handler(content_types=['text'])
def handle_channel_post(message):
    if message.reply_to_message:
        user_id = message.from_user.id
        
        db_actions.update_user_stats(user_id, 'comments', 1)
        
        check_comment_achievement(user_id)

@bot.message_handler(content_types=['text'], func=lambda message: message.is_topic_message)
def handle_topic_messages(message):
    user_id = message.from_user.id
    
    db_actions.update_user_stats(user_id, 'comments', 1)
    
    check_comment_achievement(user_id)

# ============ –ó–ê–ü–£–°–ö –ë–û–¢–ê ============

if __name__ == '__main__':
    log_info(logger, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        log_error(logger, e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
        traceback.print_exc()